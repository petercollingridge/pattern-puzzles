{"version":3,"sources":["Puzzles/Tutorial/Icon.js","utils/common.js","Puzzles/utils/graphUtils.js","Puzzles/utils/graphTypes.js","Puzzles/utils/loadPuzzle.js","Puzzles/utils/evaluate.js","PuzzleChamber/Toolbars/ButtonSet.js","PuzzleChamber/Toolbars/Button.js","PuzzleChamber/Toolbars/ColourToolbar.js","PuzzleChamber/Toolbars/PuzzlePreviewToolbar.js","PuzzleChamber/PuzzleChamber.js","Puzzles/PuzzleComponents/Primitives.js","Puzzles/utils/isColourable.js","Puzzles/PuzzleComponents/Graph.js","Puzzles/Tutorial/Tutorial.js","Puzzles/Sequences/Icons.js","Puzzles/PuzzleComponents/Sequence.js","Puzzles/Sequences/BasicSequences.js","Puzzles/Sequences/GraphSequences.js","Puzzles/ColourMaps/Icons.js","Puzzles/PuzzleComponents/Map.js","Puzzles/ColourMaps/ColourMaps.js","Puzzles/Combinatorics/Icons.js","Puzzles/Combinatorics/Combinations.js","Puzzles/Combinatorics/Permutations.js","Puzzles/Combinatorics/Derrangements.js","Puzzles/Combinatorics/puzzles.js","Puzzles/Transformations/Icons.js","Puzzles/Transformations/Transformations.js","Puzzles/Transformations/puzzles.js","Puzzles/GraphTheory/ColourGraphs.js","Puzzles/GraphTheory/HamiltonianPath.js","Puzzles/GraphTheory/DominatingSet.js","Puzzles/GraphTheory/MinimumCut.js","Puzzles/GraphTheory/EulerPath.js","Puzzles/GraphTheory/Icons/ColourGraphs.js","Puzzles/GraphTheory/Icons/GraphTheory.js","Puzzles/GraphTheory/puzzles.js","Puzzles/allPuzzles.js","PuzzleNavigation/PuzzleMenu.js","PuzzleNavigation/PuzzleGraphLayout.js","PuzzleNavigation/PuzzleGraph.js","serviceWorker.js","index.js","App.js"],"names":["TutorialIcon","react_default","a","createElement","className","r","sum","arr","func","i","length","getArrayOfN","n","push","nTimes","Array","from","map","getArray","value","isArray","_","getCombinationsWithReplacement","size","result","_loop2","firstItem","slice","forEach","seq","concat","handleKeyDown","evt","callback","key","keyCode","getNodesOnCircle","colours","_ref2","arguments","undefined","_ref2$r","_ref2$offsetAngle","offsetAngle","_ref2$dx","dx","_ref2$dy","dy","_ref","_ref$r","_ref$offsetAngle","_ref$dx","_ref$dy","points","dAngle","Math","PI","angle","sin","cos","getPointsOnACircle","_ref3","_ref4","Object","slicedToArray","getGraphBBox","_ref5","nodes","x1","x2","y1","y2","x","y","node","width","height","getLineOfEdges","start","stop","edges","getLoopOfEdges","max","connectNodeToNodes","node1","getRegularPolygonGraph","scale","triangleGraph","squareGraph","linearGraph","params","_params$scale","colour","props","objectWithoutProperties","startX","assign","loopGraph","_params$scale2","sunletGraph","innerColours","outerColours","p","graph","index","getGraphObject","_ref$nodes","_ref$edges","_ref$size","nodeObjects","nodeColour","fixed","Boolean","edgeObjects","n1","n2","node2","edge","getGraphAndUncolouredCopy","_ref6","_ref6$nodes","_ref6$edges","_ref6$size","_ref6$r","target","blank","_ref7","_ref8","getMapObject","_ref9","_ref9$regions","regions","_ref9$connections","connections","_ref9$size","regionObjects","_ref10","_ref11","connectionObjects","_ref12","_ref13","colourNumberToColourObject","getSequenceObject","_ref14","pattern","answer","sequence","getGraphSet","_ref16","graphs","graphType","loop","getGraphSequence","_ref17","answerGraph","blankGraph","allItemsHaveValue","items","attr","every","item","allItemsColoured","extractAttribute","graphToStringOfNodes","join","graphToStringOfSortedNodes","sort","sequenceSetMatches","targetSet","sequenceSet","Set","toConsumableArray","has","allConnectedItemsHaveDifferentColours","cxns","matches","cxn","flashing","graphIsChromatic","sequencesMatch","seq1","seq2","sequencesAreEquivalent","mapping1","Map","mapping2","value1","get","value2","set","graphNodesAreSameColour","samePatternButDifferent","min","sequenceHasNoMatches","TOOLBAR_R","DELTA_ANGLE","ButtonSet","buttons","startAngle","positionR","positions","baseAngle","direction","getPositionsAroundCircle","role","component","position","Component","cx","cy","SVGButton","tabIndex","onKeyDown","onClick","ColourButton","count","puzzle","selectedColour","state","button","Button_SVGButton","aria-checked","setState","showColourCounter","Button","viewBox","ColourToolbar","clearPuzzle","colourCount","color","Toolbars_ButtonSet","PuzzlePreviewToolbar","puzzles","maxIndex","getPuzzle","COLOURS","PuzzlePage","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","queryString","parse","location","search","parseInt","q","solved","clear","bind","assertThisInitialized","update","nextPuzzle","backToMenu","_this$props","getPuzzleObject","getSolutionObject","colourPalette","solution","clearButton","nextState","history","_this$state","evaluate","aria-label","Button_Button","_this$state2","style","selectColourIndicator","getNextPuzzleButton","id","preserveAspectRatio","in","stdDeviation","in2","mode","operator","radius","displayPuzzle","Toolbars_ColourToolbar","Toolbars_PuzzlePreviewToolbar","React","withRouter","Line","isColourable","chamber","_ref$className","_ref$onColour","onColour","inactive","colourUses","colourThisItem","Edge","hidden","edgeColour","Primitives_Line","ColourableEdge","atan2","sqrt","transform","Graph","_ref2$edges","_ref2$nodes","EdgeGraph","_ref3$edges","_ref3$nodes","current","ColourableGraph","Graph_Graph","Tutorial","name","slug","icon","PuzzleChamber","available","Icons","rx","ry","href","getSize","Sequence","_ref$sequence","_ref$y","ColourableSequence","Sequence_Sequence","GraphRow","GAP","gap","totalWidth","gapSize","bbox","GraphColumn","totalHeight","puzzles1","puzzles2","correctSequence","PuzzleComponent","BasicSequences","BasicSequences_PuzzleComponent","t1","t2","t112","t221","t121","t211","t123","t231","t312","s1122","s2211","s2112","s1221","s1212","s2121","correctGraphSequence","GraphSequences","ColourMaps_Icons","_ref$regions","ColourableMap","Map_Map","ColourMaps","ColourMaps_PuzzleComponent","Combinatorics_Icons","d","CombinationPuzzles","combinationLength","combinations","combination","permute","remainingItems","previousItem","curr","next","splice","getPermutations","getPermutationsWithReplacement","_loop","displayGraphSequence","PermutationPuzzles","getSolutions","solutionSet","solutions","nGraphs","DerrangementPuzzle","graphStrings","j","allGraphsInSequenceAreDifferent","allNodes","getRepeatArray","Transformations_Icons","Fragment","identity1","reflection1","rotation1","colour1","Transformation","Transformations","Transformations_Transformation","Puzzles","rectCoords","ColourGraph","R3","GraphTheory","updateNodes","path","selectedNode","nodeIndex","previousNode","pop","_params$scale3","shift","starGraph","spokeGraph","targetNode","neighbours","keys","active","visited","frontier","nodeCount","nextNodeId","nextNode","graphIsDisjoint","Graph_EdgeGraph","EulerPath","labelInactiveEdges","some","ColourGraphs","fill","Icons_GraphTheory","ColourGraphIcons","GraphTheoryIcons","HamiltonianPath","DominatingSet","MinimumCut","puzzleData","TutorialPuzzle","TransformationPuzzles","GraphTheoryPuzzles","Section","react_router_dom","to","Menu","puzzleLayout","section","CONNECTION_LENGTH","BRANCHES","PUZZLE_CONNECTIONS","getConnections","find","console","error","addConnection","name1","name2","puzzle1","puzzle2","radians","branch","_branch","SIZE","extent","minX","maxX","maxY","minY","getGraphExtent","_useState","useState","_useState2","dragging","setDragging","_useState3","_useState4","lastPosition","setLastPosition","_useState5","_useState6","offset","setOffset","getPosition","touches","pageX","pageY","onMouseDown","stopPropagation","preventDefault","onMouseMove","move","onMouseUp","onTouchStart","onTouchMove","onTouchEnd","stroke","strokeWidth","filter","window","hostname","match","ReactDOM","render","react_router","values","PuzzleMenu","PuzzleGraph","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b3001597.chunk.js","sourcesContent":["import React from 'react';\n\n\nexport const TutorialIcon = (\n    <g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" r=\"8\" />\n        </g>\n    </g>\n);\n","export function sum(arr, func) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += func ? func(arr[i]) : arr[i];\n    }\n    return sum;\n}\n\nexport function shuffle(arr) {\n    for (let i = arr.length; i--; ) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    return arr;\n}\n\n// Get an array of [1, 2, 3, ..., n]\nexport function getArrayOfN(n) {\n    const arr = [];\n    for (let i = 1; i <= n; i++) {\n        arr.push(i)\n    }\n    return arr;\n}\n\n// Get an array of values from calling function <func> n times\nexport function nTimes(n, func) {\n    return Array.from({ length: n }).map(func);\n}\n\n// If arr is not an array return an empty array with that length\n// If arr is a number, then return an array with n items with the given value\n// Allows colours to be a number or an array of numbers\nexport function getArray(arr, value) {\n    if (Array.isArray(arr)) {\n        return arr;\n    }\n    return nTimes(arr, (_) => value);\n}\n\n// Returns an array of <item> repeated <n> times\nexport function getRepeatArray(item, n) {\n    const arr = [];\n    for (let i = 0; i < n; i++) {\n        arr.push(item);\n    }\n    return arr;\n}\n\nexport function getPermutations(arr) {\n    const result = [];\n  \n    const permute = (remainingItems, seq) => {\n        if (remainingItems.length === 0) {\n            result.push(seq)\n        } else {\n            let previousItem = false;\n            for (let i = 0; i < remainingItems.length; i++) {\n                const curr = remainingItems.slice();\n                const next = curr.splice(i, 1);\n                if (next[0] !== previousItem) {\n                    permute(curr, seq.concat(next));\n                    previousItem = next[0];\n                }\n            }\n        }\n   }\n  \n   // Copy arr and then sort it\n   permute(arr.slice().sort(), []);\n  \n   return result;\n}\n\n// Return all possible sequences of colours\n// e.g. ([1, 2], 2) => (1, 1), (1, 2), (2, 1), (2, 2)\nexport function getPermutationsWithReplacement(colours, size) {\n    if (size <= 0) { return [[]]; }\n\n    const result = [];\n    for (let i = 0; i < colours.length; i++) {\n        const firstItem = colours[i];\n        const subSequence = getPermutationsWithReplacement(colours, size - 1);\n        subSequence.forEach((seq) => {\n            result.push([firstItem].concat(seq));\n        });\n    }\n\n    return result;\n}\n\nexport function getCombinationsWithReplacement(arr, size) {\n    if (size === 0) { return [[]]; }\n    const result = [];\n\n    for (let i = 0; i < arr.length; i++) {\n        const firstItem = arr[i];\n        const subSequence = getCombinationsWithReplacement(arr.slice(i), size - 1);\n        subSequence.forEach((seq) => {\n            result.push([firstItem].concat(seq));\n        });\n    }\n\n    return result;\n}\n\n// Click enter or space triggers a given callback\nexport const handleKeyDown = (evt, callback) => {\n    if (evt.key === 'Enter' || evt.keyCode === 32) {\n        callback();\n    }\n};\n\nexport function hashCode(str) {\n    let hash = 0, i, chr;\n    for (i = 0; i < str.length; i++) {\n        chr = str.charCodeAt(i);\n        hash = ((hash << 5) - hash) + chr;\n        hash |= 0;\n    }\n    return hash;\n}","import { getArray } from '../../utils/common';\n\n\nexport function getPointsOnACircle(n, {r=1, offsetAngle=0, dx=0, dy=0}={}) {\n    const points = [];\n    const dAngle = 2 * Math.PI / n;\n    let angle = (offsetAngle * Math.PI / 180 || 0) - 0.5 * dAngle;\n\n    for (let i = 0; i < n; i++) {\n        points.push([\n            dx + r * Math.sin(angle),\n            dy + r * Math.cos(angle),\n        ]);\n        angle += dAngle;\n    }\n\n    return points;\n}\n\nexport function getNodesOnCircle(colours, {r=1, offsetAngle=0, dx=0, dy=0}={}) {\n    colours = getArray(colours);\n    const n = colours.length;\n    const points = getPointsOnACircle(n, { r, offsetAngle, dx, dy });\n\n    // Combine coordinates with colours\n    const nodes = points.map(([x, y], i) => [x, y, colours[i]]);\n\n    return nodes;\n}\n\nexport function getGraphBBox({ nodes }) {\n    if (nodes.length === 0) {\n        return { x1: 0, x2: 0, y1: 0, y2: 0 };\n    }\n\n    let x1 = nodes[0].x - nodes[0].r;\n    let x2 = nodes[0].x + nodes[0].r;\n    let y1 = nodes[0].y - nodes[0].r;\n    let y2 = nodes[0].y + nodes[0].r;\n\n    for (let i = 0; i < nodes.length; i++) {\n        const node = nodes[i];\n        if (node.x - node.r < x1) {\n            x1 = node.x - node.r;\n        }\n        if (node.x + node.r > x2) {\n            x2 = node.x + node.r;\n        }\n        if (node.y - node.r < y1) {\n            y1 = node.y - node.r;\n        }\n        if (node.y + node.r > y2) {\n            y2 = node.y + node.r;\n        }\n    }\n\n    return { x1, y1, width: x2 - x1, height: y2 - y1 };\n}\n\n// Given a <start> and <stop> value, return an array of arrays,\n// where each sub-array is a pair of consequtive values between <start> and <stop>\n// e.g. (3, 6) => [[3, 4], [4, 5], [5, 6]]\nexport function getLineOfEdges(start, stop) {\n    if (stop === undefined) {\n        stop = start - 1;\n        start = 0;\n    }\n\n    var edges = [];\n    for (var i = start; i < stop; i++) {\n        edges.push([i, i + 1]);\n    }\n\n    return edges;\n}\n\nexport function getLoopOfEdges(start, stop) {\n    if (stop === undefined) {\n        stop = Math.max(0, start - 1);\n        start = 0;\n    }\n\n    const edges = getLineOfEdges(start, stop);\n    // Link start to stop, unless they are the same or one different (a linear graph of 2)\n    if (stop - start > 1) {\n        edges.push([stop, start]);\n    }\n    return edges;\n}\n\nexport function connectNodeToNodes(node1, nodes) {\n    return nodes.map(node => [node1, node]);\n}\n\n// Given a graph, add a node along each existing edge\nexport function subdivideGraph(graph) {\n    const newEdges = [];\n    const nodes = graph.nodes;\n    let n = nodes.length;\n\n    graph.edges.forEach(([n1, n2]) => {\n        const node1 = nodes[n1];\n        const node2 = nodes[n2];\n        nodes.push([(node1[0] + node2[0]) / 2, (node1[1] + node2[1]) / 2, node1[2]]);\n        newEdges.push([n1, n], [n2, n]);\n        n++;\n    })\n\n    graph.edges = newEdges;\n\n    return graph;\n}\n\nfunction getRegularPolygonGraph(size, colours, scale=1) {\n    // Can pass in a single colour to set all nodes to that colour\n    if (!Array.isArray(colours)) {\n        colours = Array.from({ length: size }).map(_ => colours);\n    }\n\n    return {\n        nodes: getNodesOnCircle(colours, { r: scale }),\n        edges: getLoopOfEdges(size)\n    };\n}\n\nexport function triangleGraph(colours, scale=1) {\n    return getRegularPolygonGraph(3, colours, scale);\n}\n\nexport function squareGraph(colours, scale=1) {\n    return getRegularPolygonGraph(4, colours, scale);\n}\n","import { nTimes, getArray } from '../../utils/common';\nimport {\n    getLineOfEdges,\n    getLoopOfEdges,\n    getNodesOnCircle,\n    subdivideGraph,\n} from './graphUtils';\n\n\nexport function linearGraph(colours, params={}) {\n    const { scale=1, colour, ...props } = params;\n    colours = getArray(colours, colour);\n    \n    const n = colours.length;\n    const startX = (1 - n) * scale / 2;\n    const nodes = colours.map((colour, i) => [startX + i * scale, 0, colour])\n    const edges = getLineOfEdges(n);\n\n    return Object.assign(props, { nodes, edges });\n}\n\nexport function loopGraph(colours, params={}) {\n    const { scale=1, colour, ...props } = params;\n    colours = getArray(colours, colour);\n\n    const nodes = getNodesOnCircle(colours, { r: scale });\n    const edges = getLoopOfEdges(colours.length);\n\n    return Object.assign(props, { nodes, edges });\n}\n\nexport function gridGraph(nColumns, nRows, params={}) {\n    const scale = params.scale || 1;\n    const nodes = [];\n    const edges = [];\n\n    const startX = -scale * (nColumns - 1) / 2;\n    const startY = -scale * (nRows - 1) / 2;\n\n    let nodeIndex = 0;\n    for (let i = 0; i < nColumns; i++) {\n        for (let j = 0; j < nRows; j++) {\n            nodes.push([\n                startX + i * scale,\n                startY + j * scale,\n            ]);\n\n            if (i) {\n                edges.push([nodeIndex, nodeIndex - nRows]);\n            }\n            if (j) {\n                edges.push([nodeIndex, nodeIndex - 1]);\n            }\n            nodeIndex++;\n        }\n    }\n\n    return { nodes, edges };\n}\n\nexport function starGraph(colours, params={}) {\n    const { scale=1, colour, ...props } = params;\n    colours = getArray(colours, colour);\n\n    const firstNode = colours.shift();\n    const nodes = [[0, 0, firstNode]].concat(getNodesOnCircle(colours, { r: scale }));\n    const edges = colours.map((_, index) => [0, index + 1]);\n\n    return Object.assign(props, { nodes, edges });\n}\n\nexport function spokeGraph(colours, params={}) {\n    const graph = starGraph(colours, params);\n    graph.edges = graph.edges.concat(getLoopOfEdges(1, colours - 1))\n    return graph;\n}\n\n// AKA helm graph\n// A loop graph, with a spoke coming out of every vertex\n// Colours can be an integer that determines the nodes in the inner loop\n// Or an array of colours for all nodes\nexport function sunletGraph(colours, params={}) {\n    let n, innerColours, outerColours;\n\n    if (Array.isArray(colours)) {\n        n = colours.length / 2;\n        innerColours = colours.slice(0, n);\n        outerColours = colours.slice(n);\n    } else {\n        // colours is the number of nodes, so get two arrays of that length, full of 1s\n        n = colours;\n        innerColours = getArray(n, 1);\n        outerColours = getArray(n, 1);\n    }\n\n    // Determine radius of inner shape so its side length is the same as the remaining radial spoke length\n    const scale = params.scale || 1;\n    const p = 1 / (1  + 2 * Math.sin(Math.PI / n));\n    params.scale = scale * p;\n\n    const graph = loopGraph(innerColours, params);\n    graph.nodes = graph.nodes.concat(getNodesOnCircle(outerColours, { r: scale }));\n    graph.edges = graph.edges.concat(nTimes(n, (_, index) => [index, index + n]));\n\n    return graph;\n}\n\nexport function prismGraph(n, params={}) {\n    const graph = sunletGraph(n, params);\n    graph.edges = graph.edges.concat(getLoopOfEdges(n, 2 * n - 1));\n    return graph;\n}\n\nexport function antiPrismGraph(n, params={}) {\n    const p = 1 / (1  + 2 * Math.sin(Math.PI / n));\n    const scale = params.scale || 1;\n    params.scale = scale * p;\n\n    const graph = loopGraph(n, params);\n    graph.nodes = graph.nodes.concat(getNodesOnCircle(n, { r: scale, offsetAngle: 180 / n }));\n    graph.edges = graph.edges.concat(nTimes(n, (_, index) => [index, n + index]));\n    graph.edges = graph.edges.concat(nTimes(n, (_, index) => [index, n + ((index + n - 1) % n)]));\n    graph.edges = graph.edges.concat(getLoopOfEdges(n, 2 * n - 1));\n    return graph;\n}\n\nexport function gearGraph(n, params={}) {\n    const graph = subdivideGraph(loopGraph(n, params));\n    graph.nodes.push([0, 0, undefined]);\n    graph.edges = graph.edges.concat(nTimes(n, (_, index) => [index, 2 * n]))\n    return graph;\n}\n\nfunction getRegularPolygonGraph(size, colours, scale=1) {\n    // Can pass in a single colour to set all nodes to that colour\n    if (!Array.isArray(colours)) {\n        colours = Array.from({ length: size }).map(_ => colours);\n    }\n\n    return {\n        nodes: getNodesOnCircle(colours, { r: scale }),\n        edges: getLoopOfEdges(size)\n    };\n}\n\nexport function triangleGraph(colours, scale=1) {\n    return getRegularPolygonGraph(3, colours, scale);\n}\n\nexport function squareGraph(colours, scale=1) {\n    return getRegularPolygonGraph(4, colours, scale);\n}\n","/***\n * These functions take the raw puzzle data and return an object that can used to\n * display the puzzle and determine when the correct answer is found\n***/\n\nimport { shuffle, getCombinationsWithReplacement } from '../../utils/common';\nimport { linearGraph, loopGraph } from './graphTypes';\n\n// Given arrays of node coordinates and edge coordinates, return an object of nodes and edges\nexport function getGraphObject({ nodes=[], edges=[], size=32, r=8, colour }) {\n    const nodeObjects = nodes.map(([x, y, nodeColour], index) => ({\n        r,\n        index,\n        x: x * size,\n        y: y * size,\n        colour: nodeColour || colour,\n        fixed: Boolean(nodeColour || colour),\n        edges: {}\n    }));\n\n    const edgeObjects = edges.map(([n1, n2]) => {\n        const node1 = nodeObjects[n1];\n        const node2 = nodeObjects[n2];\n        const edge = {\n            node1,\n            node2,\n            x1: node1.x,\n            y1: node1.y,\n            x2: node2.x,\n            y2: node2.y\n        };\n\n        // Edges map another node to the edge object\n        node1.edges[node2.index] = edge;\n        node2.edges[node1.index] = edge;\n\n        return edge;\n    });\n\n    return {\n        nodes: nodeObjects,\n        edges: edgeObjects\n    };\n}\n\n// Given arrays of node coordinates and edge coordinates, return two objects of nodes and edges,\n// one includes the node colours and one is empty\nexport function getGraphAndUncolouredCopy({ nodes=[], edges=[], size=32, r=8 }) {\n    const target = getGraphObject({ nodes, edges, size, r });\n\n    // Remove the colours from the nodes\n    const blankNodes = nodes.map(([x, y]) => [x, y]);\n    const blankGraph = getGraphObject({ nodes: blankNodes, edges, size, r });\n\n    return { target, blank: blankGraph };\n}\n\nexport function getMapObject({ regions=[], connections=[], size=1 }) {\n    const regionObjects = regions.map(([x, y, width, height]) => ({\n        x: (x - width / 2) * size,\n        y: (y - height / 2) * size,\n        width: width * size,\n        height: height * size,\n    }));\n\n    const connectionObjects = connections.map(([n1, n2]) => ({\n        node1: regionObjects[n1],\n        node2: regionObjects[n2],\n    }));\n\n    // Create a graph of the map in order to evaluate the solution\n    return {\n        regions: regionObjects,\n        connections: connectionObjects\n    };\n}\n\n// Convert a number to n object with a colour attribute equal to that number and a fixed attribute\nconst colourNumberToColourObject = colour => ({\n    colour,\n    fixed: colour > 0\n});\n\nexport function getSequenceObject({ pattern, answer }) {\n    //  Get a sequence of node objects\n    const sequence = pattern.map(colourNumberToColourObject);\n\n    // Target sequence is the starting sequence with any 0s replaced by the answer items\n    let n = 0;\n    const target = pattern.map(colour => {\n        if (colour > 0) {\n            return { colour };\n        } else {\n            return { colour: answer[n++] };\n        }\n    });\n\n    return { sequence, target };\n}\n\nexport function getCombinationObject({ pattern, items }) {\n    //  Get an array of linear graphs\n    const sequences = pattern.map(sequence => getGraphObject(linearGraph(sequence)));\n\n    // Find all combinations based on the length of the first item in the pattern\n    const combinations = getCombinationsWithReplacement(items, pattern[0].length);\n    const combinationSet = new Set(combinations.map(combination => combination.join('-')))\n\n    return { sequences, target: combinationSet };\n}\n\n// Given an array of arrays of numbers, return an array of graph objects\n// These can be linear graphs or looped graphs\nexport function getGraphSet({ graphs, loop }) {\n    const graphType = loop ? loopGraph : linearGraph;\n    const sequence = graphs.map(graph => getGraphObject(graphType(graph)));\n    return { sequence };\n}\n\n// TODO: Combine with getGraphSet\nexport function getGraphSequence({ sequence, answer }) {\n    const graphs = [];\n    const target = [];\n\n    let n = 0;\n    sequence.forEach(graph => {\n        if (graph) {\n            graphs.push(getGraphObject(graph));\n            target.push(getGraphObject(graph));\n        } else {\n            // Target sequence is the starting sequence with any nulls replaced by the answer graphs\n            const answerGraph = getGraphObject(answer[n]);\n            target.push(answerGraph);\n            \n            // Displayed sequence show answer as a blank graph\n            const blankGraph = getGraphObject(answer[n]);\n            blankGraph.nodes.forEach(node => {\n                node.fixed = false;\n                node.colour = 0;\n            });\n\n            graphs.push(blankGraph);\n            target.push(answerGraph);\n            n++;\n        }\n    });\n\n    return { sequence: graphs, target };\n}\n\n// Return an array of category object which have a colour, and an object to display\nexport function getCategoryObjects({ categories, randomRotate, itemProps={} }) {\n    const categoryObjects = [];\n    \n    categories.forEach(category => {\n        const copies = category.copies || 1;\n        const item = Object.assign(category.item, itemProps);\n\n        for (let i = 0; i < copies; i++) {\n            categoryObjects.push({\n                category: category.type,\n                colour: category.colour || 0,\n                object: item,\n                rotate: randomRotate ? Math.floor(Math.random() * 12) * 30 : 0\n            });\n        }\n    });\n\n    return shuffle(categoryObjects);\n}\n","// Test whether all items are bigger than 0 or have an attrubute with value bigger than 0\nexport const allItemsHaveValue = (items=[], attr) =>\n    attr ?\n        items.every(item => item[attr] > 0) :\n        items.every(item => item > 0);\n\nexport const allItemsColoured = (items=[]) => allItemsHaveValue(items, 'colour');\n\nexport const extractAttribute = (items=[], attr) => items.map(item => item[attr]);\n\n// Convert a graph into a string of node colours, separates by hypens, e.g. 1-1-2\nconst graphToStringOfNodes = graph => extractAttribute(graph.nodes, 'colour').join('-');\n\nconst graphToStringOfSortedNodes = graph => extractAttribute(graph.nodes, 'colour').sort().join('-');\n\n// Check that two sets of sets contain sam set of sets\n// e.g. ((1, 1), (1, 2)) = ((2, 1), (1,1))\nexport function setOfSetsEqual({ sequence }, targetSet) {\n    const sequenceSet = new Set(sequence.map(graphToStringOfSortedNodes));\n\n    // Check the this set of sequences matches the set of permutations\n    return (sequenceSet.size === targetSet.size)\n        && [...sequenceSet].every(value => targetSet.has(value));\n}\n\n// Check the the given set of sequences matches a set of sequences.\nexport function sequenceSetMatches({ sequence }, targetSet) {\n    // Check all the sequences are fully coloured\n    if (!sequence.every(graph => allItemsColoured(graph.nodes))) {\n        return false;\n    }\n\n    // Get a set of sequence values,\n    // where a sequence value is a string of numbers separated by hypens, e.g. 1-2\n    const sequenceSet = new Set(sequence.map(graphToStringOfNodes));\n\n    // Check the this set of sequences matches the set of permutations\n    return (sequenceSet.size === targetSet.size)\n        && [...sequenceSet].every(value => targetSet.has(value));\n};\n\nexport function allGraphsInSequenceAreDifferent(sequence) {\n    const graphStrings = sequence.map(graphToStringOfNodes);\n    const n = graphStrings.length;\n    for (let i = 0; i < n - 1; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (graphStrings[i] === graphStrings[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nexport function allConnectedItemsHaveDifferentColours(cxns=[]) {\n    // Colour any edge that connects two nodes of the same colour\n    let matches = 0;\n    cxns.forEach((cxn) => {\n        if (cxn.node1.colour && cxn.node1.colour === cxn.node2.colour) {\n            cxn.colour = cxn.node1.colour;\n            cxn.flashing = true;\n            matches++;\n        } else {\n            cxn.colour = null;\n            cxn.flashing = false;\n        }\n    });\n    return matches === 0;\n}\n\nexport const graphIsChromatic = ({ nodes, edges }) => \n    allConnectedItemsHaveDifferentColours(edges) &&\n    allItemsColoured(nodes);\n\nexport const sequencesMatch = (seq1, seq2, attr) => {\n    if (seq1.length !== seq2.length) { return false; }\n    for (let i = 0; i < seq1.length; i++) {\n        const value1 = attr ? seq1[i][attr] : seq1[i];\n        const value2 = attr ? seq2[i][attr] : seq2[i];\n        if (value1 !== value2) {\n            return false;\n        }\n    }\n    return true;\n};\n\nexport const sequenceHasNoMatches = (seq1, seq2) => {\n    const n = Math.min(seq1.length, seq2.length);\n\n    for (let i = 0; i < n; i++) {\n        if (seq1[i] === seq2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test whether there is a consistent mapping between the values in one array to the value the other\nexport const sequencesAreEquivalent = (seq1, seq2) => {\n    if (seq1.length !== seq2.length) { \n        return false;\n    }\n\n    const mapping1 = new Map();\n    const mapping2 = new Map();\n\n    for (let i = 0; i < seq1.length; i++) {\n        const value1 = mapping1.get(seq1[i]);\n        const value2 = mapping2.get(seq2[i]);\n\n        if (value1 === undefined) {\n            mapping1.set(seq1[i], seq2[i]);\n        } else if (value1 !== seq2[i]) {\n            return false;\n        }\n\n        if (value2 === undefined) {\n            mapping2.set(seq2[i], seq1[i]);\n        } else if (value2 !== seq1[i]) {\n            return false;\n        }\n        \n    }\n\n    return true;\n};\n\n// Test whether the nodes of two graphs are the same colour\nexport const graphNodesAreSameColour = ({ blank, target }) => \n    allItemsColoured(blank.nodes) &&\n    sequencesMatch(blank.nodes, target.nodes, 'colour');\n\n// Test whether the nodes of two graphs have the same pattern,\n// i.e. there is a consistent mapping from the colours in one graph to the colour in the target\nexport const graphNodesHaveSamePattern = ({ blank, target }) =>\n    allItemsColoured(blank.nodes) &&\n    sequencesAreEquivalent(blank.nodes, target.nodes);\n\nexport const samePatternButDifferent = (seq1, seq2) =>\n    allItemsHaveValue(seq1) &&\n    allItemsHaveValue(seq2) &&\n    sequenceHasNoMatches(seq1, seq2) &&\n    sequencesAreEquivalent(seq1, seq2);\n\n\nexport const graphIsDisjoint = (nodes) => {\n    nodes.forEach(node => node.visited = false);\n    \n    // Begin with the first node\n    const frontier = [nodes[0]];\n    nodes[0].visited = true;\n    let nodeCount = 1;\n\n    while(frontier.length > 0) {\n        const node = frontier.pop();\n        const edges = node.edges;\n\n        for (const nextNodeId in edges) {\n            // If edge not cut and node hasn't been visited\n            if (!edges[nextNodeId].colour) {\n                const nextNode = nodes[nextNodeId];\n                if (!nextNode.visited) {\n                    frontier.push(nextNode)\n                    nextNode.visited = true;\n                    nodeCount++;\n                }\n            }\n        }\n    }\n\n    return nodeCount < nodes.length;\n}","import React from 'react';\nimport { nTimes } from '../../utils/common';\n\n\n// Size of chamber\nconst TOOLBAR_R = 136;\n\n// Angle between button\nconst DELTA_ANGLE = Math.PI / 18;\n\nfunction getPositionsAroundCircle(n, r, baseAngle=0) {\n    const direction = baseAngle < 0 ? 1 : -1;\n    const startAngle = baseAngle - direction * (DELTA_ANGLE * (n - 1) / 2);\n\n    // Array of button positions\n    return nTimes(n, (_, i) => {\n        const angle = startAngle + direction * i * DELTA_ANGLE;\n        return {\n            angle,\n            x: r * Math.cos(angle),\n            y: r * Math.sin(angle)\n        }\n    });\n}\n\nfunction ButtonSet({ buttons, startAngle }) {\n    const r = 8;\n    const positionR = TOOLBAR_R + r;\n    const positions = getPositionsAroundCircle(buttons.length, positionR, startAngle);\n\n    return (\n        <g className=\"toolbar\" role=\"radiogroup\">\n            {\n                buttons.map(({ component, ...props }, index) => {\n                    const position = positions[index];\n                    const Component = component;\n                    props.angle = position.angle;\n                    return (\n                        <Component\n                            key={index}\n                            role=\"radio\"\n                            cx={position.x}\n                            cy={position.y}\n                            r={r}\n                            {...props}\n                        />\n                    );\n                })\n            }\n        </g>\n    );\n}\n\nexport default ButtonSet;\n","import React from 'react';\nimport { handleKeyDown, nTimes } from '../../utils/common';\n\n\nexport const SVGButton = (props) =>\n    <circle\n        r=\"9\"\n        role=\"button\"\n        tabIndex=\"0\"\n        onKeyDown={evt => handleKeyDown(evt, props.onClick)}\n        {...props} />\n\n// Get an array of dots around the colour button to show how many times we can use it\nconst showColourCounter = (n, colour, x, y, angle, r) => {\n    if (!n) { return null; }\n    const dAngle = Math.PI * 2 / (3 * n);\n    angle += dAngle * (n - 1) / 2;\n\n    return nTimes(n, (_, index) => (\n        <circle\n            key={index}\n            className={`fill-${ colour }`}\n            r={r * 0.3}\n            cx={x + (r * 1.6) * Math.cos(angle - index * dAngle)}\n            cy={y + (r * 1.6) * Math.sin(angle - index * dAngle)}\n        />\n    ));\n}\n\nexport const ColourButton = ({\n    colour,\n    count,\n    angle,\n    puzzle,\n    ...props,\n}) => {\n    const selectedColour = puzzle.state.selectedColour;\n    const setColour = () => puzzle.setState({ selectedColour: colour });\n\n    const button = (\n        <SVGButton\n            className={`colour-palette colour-${ colour }`}\n            aria-checked={selectedColour === colour}\n            r=\"8\"\n            onClick={setColour}\n            {...props}\n        />\n    );\n\n    if (count > 0) {\n        return (\n            <g key={colour}>\n                { button }\n                { showColourCounter(count, colour, props.cx, props.cy, angle, props.r) }\n         </g>\n        );\n    } else {\n        return button;\n    }\n};\n\nexport const Button = (props) =>\n    <svg viewBox=\"-15 -15 31 31\">\n        <SVGButton r=\"9\" {...props} />\n    </svg>\n","import React from 'react';\n\nimport ButtonSet from './ButtonSet';\nimport { SVGButton, ColourButton } from './Button';\n\n\nfunction ColourToolbar({ puzzle, colours, clearPuzzle, startAngle }) {\n    const buttons = colours.map((colourCount, index) => ({\n        component: ColourButton,\n        colour: index + 1,\n        count: colourCount,\n        puzzle,\n    }));\n\n    if (clearPuzzle) {\n        buttons.push({\n            component: SVGButton,\n            key: \"clear-button\",\n            color: \"white\",\n            className: \"colour-palette\",\n            onClick: clearPuzzle\n        });\n    }\n\n    return <ButtonSet buttons={buttons} startAngle={startAngle} />;\n}\n\nexport default ColourToolbar;\n","import React from 'react';\n\nimport ButtonSet from './ButtonSet';\nimport { SVGButton } from './Button';\n\n\nfunction PuzzlePreviewToolbar({ puzzle, startAngle }) {\n    const puzzles = puzzle.props.puzzles;\n    const buttons = puzzles.map((_, index) => {\n        let className = 'puzzle-preview';\n        let onClick;\n        if (index === puzzle.state.index) {\n            className += ' selected';\n        } else if (index <= puzzle.state.maxIndex) {\n            className += ' puzzle-done';\n            onClick = () => puzzle.getPuzzle(index);\n        }\n        return {\n            component: SVGButton,\n            color: \"white\",\n            className,\n            puzzle,\n            onClick,\n        };\n    });\n\n    return <ButtonSet buttons={buttons} startAngle={startAngle} />;\n};\n\nexport default PuzzlePreviewToolbar;\n","import React from 'react';\nimport { withRouter } from 'react-router';\nimport { parse } from 'query-string';\n\nimport { getArray } from '../utils/common';\nimport ColourToolbar from './Toolbars/ColourToolbar';\nimport PuzzlePreviewToolbar from './Toolbars/PuzzlePreviewToolbar';\nimport { Button } from './Toolbars/Button';\n\nimport './puzzle.css';\nimport './puzzleChamber.css';\n\n\nconst COLOURS = [\n    'rgb(170, 170, 170)',\n    'rgb(20, 146, 196)',\n    'rgb(196, 20, 96)',\n    'rgb(20, 198, 96)',\n    'rgb(220, 220, 20)',\n];\n\nclass PuzzlePage extends React.Component {\n    constructor(props) {\n        super(props);\n   \n        const queryString = parse(props.location.search);\n        const index = parseInt(queryString.q) || 0;\n\n        this.state = {\n            index,\n            maxIndex: index,\n            solved: false,\n            selectedColour: null,\n        }\n\n        this.clear = this.clear.bind(this);\n        this.update = this.update.bind(this);\n        this.getPuzzle = this.getPuzzle.bind(this);\n        this.nextPuzzle = this.nextPuzzle.bind(this);\n        this.backToMenu = this.backToMenu.bind(this);\n    }\n\n    componentDidMount() {\n        // Load the first puzzle\n        this.getPuzzle(this.state.index);\n    }\n\n    getPuzzle(index) {\n        this.setState({ index });\n        const { getPuzzleObject, puzzles } = this.props;\n        const getSolutionObject = this.props.getSolutionObject || (puzzle => puzzle);\n        const puzzle = puzzles[index];\n\n        // If colourPalette is a number then convert it into an array of -1s\n        // to indicate that each colour can be used infinitely\n        const colourPalette = getArray(this.props.colourPalette || puzzle.colourPalette, -1);\n\n        if (puzzle) {\n            this.setState({\n                puzzle: getPuzzleObject(puzzle),\n                solution: getSolutionObject(puzzle),\n                clearButton: puzzle.clearButton,\n                colourPalette,\n            });\n        }\n    }\n\n    nextPuzzle() {\n        const nextState = this.state.index + 1;\n        const maxIndex = Math.max(nextState, this.state.maxIndex);\n        this.setState({\n            maxIndex,\n            solved: false,\n            selectedColour: null\n        });\n        this.getPuzzle(nextState);\n    }\n\n    backToMenu() {\n        this.props.history.push(\"/\")\n    }\n\n    clear() {\n        this.getPuzzle(this.state.index);\n    }\n\n    // Child element has updated so evaluate to see if puzzle has been solved\n    update() {\n        const { puzzle, solution } = this.state;\n        const solved = this.props.evaluate(puzzle, solution);\n        this.setState({ puzzle, solved });\n    }\n\n    getNextPuzzleButton() {\n        // Only show button if the puzzle has been solved\n        if (!this.state.solved) { return null; }\n\n        if (this.state.index < this.props.puzzles.length - 1) {\n            // Button to go to the next puzzle\n            return <div className=\"menu-button next-puzzle-button\" aria-label=\"Next puzzle\">\n                <Button onClick={this.nextPuzzle}/>\n            </div>\n        } else {\n            // Button to go back to the home page\n            return <div className=\"menu-button next-puzzle-button\" aria-label=\"Puzzle completed\" role=\"link\">\n                <Button onClick={this.backToMenu}/>\n            </div>\n        }\n    }\n\n    render() {\n        const { index, puzzle, selectedColour } = this.state;\n        if (!puzzle) { return null; }\n\n        const colourPalette = this.state.colourPalette || this.props.colourPalette;\n        const clearPuzzle = (this.state.clearButton || this.props.clearButton) ? this.clear : null;\n\n        // Determine what the selected colour is if we have selected one\n        const style = {\n            color: COLOURS[selectedColour || 0]\n        };\n        const className = selectedColour ? \"colour-selected\" : \"\";\n\n        let selectColourIndicator = \"selected-colour-indicator\";\n        if (selectedColour) {\n            selectColourIndicator += ` colour-${selectedColour}`;\n        }\n\n        return <main>\n            <nav>\n                <div className=\"menu-button back-button\" aria-label=\"Back to menu\" role=\"link\">\n                    <Button onClick={this.backToMenu}/>\n                </div>\n\n                { this.getNextPuzzleButton() }\n            </nav>\n\n            <svg id=\"puzzle-chamber\" viewBox=\"-128 -128 256 256\" preserveAspectRatio=\"xMidYMid meet\">\n                <defs>\n                    <filter id=\"shadow-filter\">\n                        <feOffset result=\"offOut\" in=\"SourceAlpha\" dx=\"2\" dy=\"2\"/>\n                        <feGaussianBlur result=\"blurOut\" in=\"offOut\" stdDeviation=\"5\" />\n                        <feBlend in=\"SourceGraphic\" in2=\"blurOut\" mode=\"normal\" />\n                    </filter>\n                    <filter id=\"glow-filter\" x=\"-250%\" y=\"-250%\" width=\"500%\" height=\"500%\">\n                        <feMorphology in=\"mask\" result=\"dilated\" operator=\"dilate\" radius=\"1\" />\n                        <feGaussianBlur stdDeviation=\"3\" result=\"colouredBlur\" />\n                        <feMerge>\n                            <feMergeNode in=\"coloredBlur\"/>\n                            <feMergeNode in=\"SourceGraphic\"/>\n                        </feMerge>\n                    </filter>\n                </defs>\n\n                <rect className=\"background\" x=\"-200\" y=\"-200\" width=\"400\" height=\"400\" />\n\n                <g id=\"puzzle\" key={index} className={className} style={style}>\n                    { this.props.displayPuzzle(puzzle, this) }\n                </g>\n\n                <circle id=\"chamber-window\" r=\"212\" />\n                <circle className={selectColourIndicator} r=\"132\" />\n\n                <ColourToolbar \n                    puzzle={this}\n                    colours={colourPalette}\n                    clearPuzzle={clearPuzzle}\n                    selectedColour={selectedColour}\n                    startAngle={-Math.PI}\n                />\n\n                <PuzzlePreviewToolbar puzzle={this} />\n\n            </svg>\n        </main>\n    }\n};\n\nexport default withRouter(PuzzlePage);\n","import React from 'react';\n\n\nexport const Line = ({ className, x1, y1, x2, y2 }) =>\n    <line className={className} x1={x1} y1={y1} x2={x2} y2={y2} />\n","import { handleKeyDown } from '../../utils/common';\n\n\n// Given a node, return props to make it colourable\nexport function isColourable(item, chamber, {className=\"\", onColour=null}={}) {\n    if (item.colour) {\n        className += ` fill-${item.colour}`;\n    } else if (item.inactive) {\n        className += \" inactive\";\n    } else {\n        className += \" no-fill\";\n    }\n\n    if (item.fixed || item.inactive) {\n        return { className };\n    }\n\n    className += \" colourable\";\n\n    const colour = chamber.state.selectedColour;\n    const colourUses = chamber.state.colourPalette.slice();\n\n    const colourThisItem = () => {\n        if (!colour) { return; }\n\n        if (item.colour === colour) {\n            // Remove exisiting colour\n            item.colour = 0;\n            colourUses[colour - 1]++;\n        } else if (colourUses[colour - 1] !== 0) {\n            // If item is already coloured, add that colour back\n            if (item.colour) {\n                colourUses[item.colour - 1]++;\n            }\n            // Colour item\n            item.colour = colour;\n            colourUses[colour - 1]--;\n        }\n\n        if (onColour) { onColour(item); }\n        chamber.setState({ colourPalette: colourUses })\n        chamber.update();\n    };\n\n    return {\n        className,\n        tabIndex: 0,\n        onClick: colourThisItem,\n        onKeyDown: (evt) => handleKeyDown(evt, colourThisItem)\n    };\n}\n","/****************************************************************\n * Graph object consisting of node and edges.\n * Both nodes and edges may be coloured or colourable.\n*****************************************************************/\nimport React from 'react';\nimport { Line } from './Primitives';\nimport { isColourable } from '../utils/isColourable';\n\n\n// A connection between two nodes\nfunction Edge(props) {\n    if (props.hidden) { return null; }\n    const flashing = props.flashing ? 'flashing' : '';\n    const edgeColour = props.colour ? `stroke-${ props.colour }`: '';\n    return (\n        <g className={flashing}>\n            <Line className=\"edge-outline\" {...props} />\n            <Line className={edgeColour} {...props} />\n        </g>\n    );\n}\n\nfunction ColourableEdge({ chamber, onColour, edge }) {\n    const dx = edge.x2 - edge.x1;\n    const dy = edge.y2 - edge.y1;\n    const angle = Math.atan2(dy, dx) * 180 / Math.PI;\n    const length = Math.sqrt(dx * dx + dy * dy);\n\n    return (\n        <rect\n            transform={`translate(${edge.x1} ${edge.y1}) rotate(${angle})`}\n            y={-3}\n            width={length}\n            height={6}\n            {...isColourable(edge, chamber, { onColour })}\n        />\n    );\n}\n\n// Display a graph in which the nodes have the potential to be coloured\nexport const Graph = ({ edges=[], nodes=[], chamber, onColour }) =>\n    <g className=\"graph\">\n        <g className=\"graph-edges\">\n            { edges.map((edge, i) => <Edge key={i} {...edge} /> )}\n        </g>\n        <g className=\"graph-nodes\">\n            { nodes.map((node, i) => \n                <g key={i} transform={`translate(${ node.x } ${ node.y })`}>\n                    <circle className=\"node-outline\" r={node.r} />\n                    <circle r={node.r} {...isColourable(node, chamber, { onColour })} />\n                </g>\n            )}\n        </g>\n    </g>\n\n// A graph where the edges can be selected\nexport const EdgeGraph = ({ edges=[], nodes=[], chamber, onColour }) => {\n    return <g className=\"graph\">\n        <g className=\"graph-edges\">\n            { edges.map((edge, i) => <ColourableEdge key={i} chamber={chamber} onColour={onColour} edge={edge} />) }\n        </g>\n        <g className=\"graph-nodes\">\n            { nodes.map((node, i) => {\n                let className = node.colour ? `fill-${node.colour}` : 'no-fill';\n                if (node.current) { className += ' current'; }\n                return (\n                    <g key={i} transform={`translate(${node.x} ${node.y})`}>\n                        <circle className=\"node-outline\" r={node.r} />\n                        <circle className={className} r={node.r} />\n                    </g>\n                );\n            }\n            )}\n        </g>\n    </g>\n}\n\nexport const ColourableGraph = (graph, chamber) => <Graph {...graph} chamber={chamber} />\n\nexport const ColourableEdgeGraph = (graph, chamber) => <EdgeGraph {...graph} chamber={chamber} />\n\n// Colour an Euler path - visiting every nodes once\n// A colourable graph where one node starts coloured and you can colour its edges\n// Colouring an edge will colour the next node and let you colour its edges\nexport const ColourableHamilitonianPath = (graph, chamber) => {\n    const colour = chamber.state.selectedColour;\n\n    const updateNodes = () => {\n        if (!graph.path) { return; }\n\n        const selectedNode = graph.path[graph.path.length - 1];\n        if (selectedNode) {\n            graph.nodes.forEach(node => {\n                if (node === selectedNode) {\n                    node.inactive = false;\n                } else if (node.edges[selectedNode.index] && !node.colour) {\n                    // Nodes that are next to the selected node and aren't coloured can be coloured\n                    node.inactive = false;\n                } else {\n                    node.inactive = true;\n                }\n            });\n        } else {\n            // No nodes left in the path, so all nodes are active\n            graph.nodes.forEach(node => node.fixed = false);\n        }\n    }\n\n    const onColour = selectedNode => {\n        const nodeIndex = selectedNode.index;\n\n        if (selectedNode.colour) {\n            selectedNode.current = true;\n\n            if (!graph.path) { graph.path = []; }\n\n            // Colour the edge of the path\n            const previousNode = graph.path.slice(-1)[0];\n            if (previousNode) {\n                previousNode.edges[nodeIndex].colour = colour;\n            }\n\n            // Add new node to the path\n            graph.path.push(selectedNode);\n        } else {\n            // Remove the node we clicked on\n            graph.path.pop();\n            const previousNode = graph.path.slice(-1)[0];\n            if (previousNode) {\n                previousNode.edges[nodeIndex].colour = 0;\n            }\n            // The active node is now the previous node in the path\n            selectedNode = previousNode;\n        }\n\n        updateNodes();\n    };\n\n    updateNodes();\n    return <Graph {...graph} chamber={chamber} onColour={onColour} />\n};\n\n// Colour an Euler path - visiting every edge once, but vertices more than once\n// A colourable graph where you start by colouring one node, then and you can colour its edges\n// Colouring an edge will colour the next node and let you colour its edges\nexport function ColourableEulerPath(graph, chamber) {\n    // Inactive edges are those not next to the current nodes\n    function labelInactiveEdges() {\n        graph.edges.forEach(edge => {\n            edge.inactive = (!edge.node1.current && !edge.node2.current) ||\n                (edge.colour && edge !== graph.path[graph.path.length - 1]);\n        });\n    }\n\n    // Function that updates graph state when an edge is coloured,\n    // making the next node in the path current and activating the others.\n    const onColourEdge = edge => {\n        // Update path depending on whether we are colouring or decolouring an edge\n        if (edge.colour) {\n            graph.path.push(edge);\n        } else {\n            graph.path.pop();\n        }\n\n        if (edge.node1.current) {\n            edge.node1.colour = edge.colour;\n            edge.node1.current = false;\n            edge.node2.current = true;\n        } else {\n            edge.node2.colour = edge.colour;\n            edge.node2.current = false;\n            edge.node1.current = true;\n        }\n        labelInactiveEdges();\n    };\n\n    const onColourNode = node => {\n        node.colour = 0;\n        node.current = true;\n        graph.path = [];\n        labelInactiveEdges();\n    };\n\n    if (graph.nodes.some(node => node.current)) {\n        return <EdgeGraph {...graph} chamber={chamber} onColour={onColourEdge} />;\n    } else {\n        // Need to select a node first\n        return <Graph {...graph} chamber={chamber} onColour={onColourNode} />;\n    }\n}\n\n// A colourable graph, where colouring a node also colours any adjacent nodes\nexport const DominatingSet = (graph, chamber) => {\n    const onColour = node => {\n        const nodeIndex = node.index;\n        const targetNode = graph.nodes[nodeIndex];\n        const neighbours = Object.keys(targetNode.edges);\n\n        if (targetNode.colour) {\n            // Colour neighbours\n            neighbours.forEach(n => {\n                // Colour node if it is not coloured\n                if (!graph.nodes[n].colour) {\n                    graph.nodes[n].colour = 2;\n                }\n                // Colour edge\n                targetNode.edges[n].active = 2;\n            })\n        } else {\n            // Remove colour from neighbour unless they are next to other coloured nodes\n            neighbours.forEach(n => {\n                targetNode.edges[n].active = 0;\n                const node = graph.nodes[n];\n                if (node.colour === 2) {\n                    // Check neighbours for nodes that are coloured\n                    if (Object.keys(node.edges).every(n2 => graph.nodes[n2].colour !== 1)) {\n                        node.colour = 0;\n                    } \n                } else if (node.colour === 1) {\n                    // This node is next to a different coloured node, so colour with colour 2\n                    targetNode.colour = 2;\n                    targetNode.edges[n].active = 2;\n                }\n            })\n        }\n    }\n\n    return <Graph {...graph} chamber={chamber} onColour={onColour} />\n};\n","import React from 'react';\n\nimport { TutorialIcon } from './Icon';\nimport { getGraphSet } from '../utils/loadPuzzle';\nimport { graphIsChromatic } from '../utils/evaluate';\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { ColourableGraph } from '../PuzzleComponents/Graph';\n\n\nconst puzzle = [{\n    colourPalette: 1,\n    graphs: [[0]]\n}, {\n    colourPalette: 2,\n    graphs: [[1, 2], [0, 0]]\n}];\n\nconst PuzzleComponent = () => <PuzzlePage\n        puzzles={puzzle}\n        evaluate={graphIsChromatic}\n        getPuzzleObject={getGraphSet}\n        displayPuzzle={ColourableGraph}\n    />\n\nconst Tutorial = {\n    name: 'Tutorial',\n    slug: 'tutorial',\n    icon: TutorialIcon,\n    component: PuzzleComponent,\n    available: true,\n};\n\nexport default Tutorial;\n","import React from 'react';\n\n\nconst SequencesIcon1 = (\n    <g className=\"graph-nodes\">\n        <rect className=\"colour-1\" x=\"-37.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"-22.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"-7.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"7.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"22.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n    </g>\n);\n\nconst SequencesIcon2 = (\n    <g className=\"graph-nodes\">\n        {[1, 2, 1, 0, 1, 2, 1].map((colour, index) =>\n            <rect\n                key={index}\n                className={\"colour-\" + colour}\n                x={-42 + index * 12}\n                y=\"-7.5\"\n                width=\"12\" height=\"12\" rx=\"2\" ry=\"2\" />\n        )}\n    </g>\n);\n\nconst SequencesIcon3 = (\n    <g>\n        <defs>\n            <g id=\"triangle\" className=\"graph-edges\">\n                <line x1=\"-15\" y1=\"13\" x2=\"0\" y2=\"-13\" />\n                <line x1=\"-15\" y1=\"13\" x2=\"15\" y2=\"13\" />\n                <line x1=\"0\" y1=\"-13\" x2=\"15\" y2=\"13\" />\n            </g>\n            <g id=\"triangle-1\">\n                <use href=\"#triangle\" />\n                <g className=\"graph-nodes\">\n                    <circle className=\"colour-1\" cx=\"-15\" cy=\"13\" r=\"7\" />\n                    <circle className=\"colour-2\" cx=\"0\" cy=\"-13\" r=\"7\" />\n                    <circle className=\"colour-1\" cx=\"15\" cy=\"13\" r=\"7\" />\n                </g>\n            </g>\n            <g id=\"triangle-2\">\n                <use href=\"#triangle\" />\n                <g className=\"graph-nodes\">\n                    <circle className=\"colour-2\" cx=\"-15\" cy=\"13\" r=\"7\" />\n                    <circle className=\"colour-1\" cx=\"0\" cy=\"-13\" r=\"7\" />\n                    <circle className=\"colour-2\" cx=\"15\" cy=\"13\" r=\"7\" />\n                </g>\n            </g>\n        </defs>\n\n        <use href=\"#triangle-1\" transform=\"translate(-34, -4) scale(0.45)\"/>\n        <use href=\"#triangle-2\" transform=\"translate(-11, -4) scale(0.45)\"/>\n        <use href=\"#triangle-1\" transform=\"translate(11, -4) scale(0.45)\"/>\n        <use href=\"#triangle-2\" transform=\"translate(34, -4) scale(0.45)\"/>\n    </g>\n);\n\nexport default [\n    SequencesIcon1,\n    SequencesIcon2,\n    SequencesIcon3,\n];\n","import React from 'react';\nimport { Graph } from './Graph';\nimport { sum } from '../../utils/common';\nimport { isColourable } from '../utils/isColourable';\nimport { getGraphBBox } from '../utils/graphUtils';\n\n\n// Calculate the size of items in a sequence based on the number of items in the sequence\nconst getSize = n =>  Math.min(24, 200 / n);\n\n// Sequence of blocks in a line, some of which may be colourable\nconst Sequence = ({ sequence=[], y=0, chamber }) => {\n    const size = getSize(sequence.length);\n    const startX = -(sequence.length * size) / 2;\n\n    return <g className=\"sequence\">\n        { sequence.map((item, i) =>\n            <rect\n                key={i}\n                x={startX + i * size }\n                y={y - size / 2}\n                width={size - 1}\n                height={size - 1}\n                rx=\"3\"\n                ry=\"3\"\n                {...isColourable(item, chamber)}\n            />\n        )}\n    </g>\n};\n\n// Wrapper function to return Sequence component\nexport function ColourableSequence(puzzle, chamber) {\n    return <Sequence {...puzzle} chamber={chamber} />;\n}\n\n// Given an array of sequences, draw each graph in the sequence, one after another\nexport function GraphRow({ sequence }, chamber) {\n    // Get size of graphs with 10% for the gap\n    const GAP = sequence.gap || 0.1\n\n    const n = sequence.length;\n    let totalWidth = sum(sequence.map(getGraphBBox), graph => graph.width);\n    const gapSize = GAP * totalWidth / (n - 1);\n\n    if (n > 1) { totalWidth *= (1 + GAP); }\n\n    const scale = Math.min(1, 240 / totalWidth);\n    totalWidth *= scale;\n\n    const graphs = [];\n    let x = -totalWidth / 2;\n\n    sequence.forEach((graph, index) => {\n        const bbox = getGraphBBox(graph);\n        graphs.push(\n            <g key={index} transform={`translate(${x - bbox.x1} 0) scale(${scale})`}>\n                <Graph {...graph} chamber={chamber}/>\n            </g>\n        );\n        x += scale * (gapSize + bbox.width);\n    });\n    \n    return graphs;\n}\n// Given an array of sequences, draw each graph in the sequence, one under another\nexport function GraphColumn({ sequence }, chamber) {\n    // Get size of graphs with 10% for the gap\n    const GAP = 1;\n\n    const n = sequence.length;\n    let totalHeight = sum(sequence.map(getGraphBBox), graph => graph.height);\n\n    const gapSize = GAP * totalHeight / (n + 1);\n    if (n > 1) { totalHeight *= (1 + GAP); }\n    const scale = Math.min(1, 240 / totalHeight);\n    totalHeight *= scale;\n\n    const graphs = [];\n    let y = -totalHeight / 2;\n\n    sequence.forEach((graph, index) => {\n        const bbox = getGraphBBox(graph);\n        graphs.push(\n            <g key={index} transform={`translate(0 ${y - bbox.y1}) scale(${scale})`}>\n                <Graph {...graph} chamber={chamber}/>\n            </g>\n        );\n        y += scale * (gapSize + bbox.height);\n    });\n    \n    return graphs;\n}\n\n// Draw a set of graphs, one below the other\nexport const Sequence2D = (puzzle, chamber) => {\n    const graphs = puzzle.sequences;\n    const size = 1.25 * getSize(Math.max(graphs.length, graphs[0].nodes.length));\n    const startY = -((graphs.length - 1) * size) / 2;\n\n    return graphs.map((graph, index) =>\n        <g key={index} transform={`translate(0 ${startY + index * size})`}>\n            <Graph {...graph} chamber={chamber}/>\n        </g>\n    );\n}\n","/*\n * Given a sequence of objects, continue it or fill in the missing bits.\n */\n\nimport React from 'react';\n\nimport Icons from './Icons';\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { ColourableSequence } from '../PuzzleComponents/Sequence';\nimport { getSequenceObject } from '../utils/loadPuzzle';\nimport { sequencesMatch } from '../utils/evaluate';\n\n\n// Sequence of coloured blocks with uncoloured blocks at the end\nconst puzzles1 = [\n    {\n        colourPalette: 1,\n        pattern: [1, 1, 1, 0],\n        answer: [1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 1, 1, 1, 0, 0],\n        answer: [1, 1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 1, 2, 1, 2, 0, 0],\n        answer: [1, 2]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 1, 2, 3, 0, 0, 0],\n        answer: [1, 2, 3]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 1, 2, 2, 1, 1, 0, 0],\n        answer: [2, 2]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 2, 1, 2, 2, 0, 0, 0],\n        answer: [1, 2, 2]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 3, 1, 2, 3, 3, 0, 0, 0, 0],\n        answer: [1, 2, 3, 3]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 0, 0],\n        answer: [1, 2, 1, 1]\n    }\n];\n\n// Sequence of coloured blocks with uncoloured blocks in the middle of the sequence\nconst puzzles2 = [\n    {\n        colourPalette: 1,\n        pattern: [1, 1, 0, 1, 1],\n        answer: [1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 1, 0, 1, 2, 1],\n        answer: [2]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 0, 2, 3],\n        answer: [1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 1, 2, 2, 1, 0, 0, 2],\n        answer: [1, 2]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 2, 1, 2, 0, 0, 2, 2],\n        answer: [2, 1]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1],\n        answer: [3]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 0, 0, 3, 1, 2, 3, 2, 1],\n        answer: [2, 1]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 1, 0, 0, 0, 1, 2, 3, 1, 1, 2, 3],\n        answer: [2, 3, 1]\n    }\n];\n\nconst correctSequence = ({ sequence, target }) => sequencesMatch(sequence, target, 'colour');\n\nconst PuzzleComponent = ({ puzzle }) =>\n    <PuzzlePage\n        puzzles={puzzle}\n        evaluate={correctSequence}\n        getPuzzleObject={getSequenceObject}\n        displayPuzzle={ColourableSequence}\n    />\n\nconst BasicSequences = [{\n    name: 'Sequences 1',\n    slug: 'sequences-1',\n    icon: Icons[0],\n    component: () => <PuzzleComponent puzzle={puzzles1} />,\n}, {\n    name: 'Sequences 2',\n    slug: 'sequences-2',\n    icon: Icons[1],\n    component: () => <PuzzleComponent puzzle={puzzles2} />,\n}];\n\nexport default BasicSequences;\n","/*\n * Given a sequence of objects, continue it or fill in the missing bits.\n */\n\nimport React from 'react';\n\nimport Icons from './Icons';\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { GraphRow } from '../PuzzleComponents/Sequence';\nimport { getGraphSequence } from '../utils/loadPuzzle';\nimport { sequencesMatch } from '../utils/evaluate';\nimport { triangleGraph, squareGraph } from '../utils/graphUtils';\n\n\n// Sequence of coloured graphs with uncoloured one at the end\nconst t1 = triangleGraph(1);\nconst t2 = triangleGraph(2);\nconst t112 = triangleGraph([1, 1, 2]);\nconst t221 = triangleGraph([2, 2, 1]);\nconst t121 = triangleGraph([1, 2, 1]);\nconst t211 = triangleGraph([2, 1, 1]);\nconst t123 = triangleGraph([1, 2, 3]);\nconst t231 = triangleGraph([2, 3, 1]);\nconst t312 = triangleGraph([3, 1, 2]);\n\nconst s1122 = squareGraph([1, 1, 2, 2]);\nconst s2211 = squareGraph([2, 2, 1, 1]);\nconst s2112 = squareGraph([2, 1, 1, 2]);\nconst s1221 = squareGraph([1, 2, 2, 1]);\nconst s1212 = squareGraph([1, 2, 1, 2]);\nconst s2121 = squareGraph([2, 1, 2, 1]);\n\nconst puzzle = [\n    {\n        colourPalette: 1,\n        sequence: [t1, t1, t1, null],\n        answer: [t1]\n    }, {\n        colourPalette: 2,\n        sequence: [t1, t2, t1, t2, null],\n        answer: [t1]\n    }, {\n        colourPalette: 2,\n        sequence: [t112, t221, t112, t221, null],\n        answer: [t112]\n    }, {\n        colourPalette: 2,\n        sequence: [s1122, s2211, s1122, s2211, null],\n        answer: [s1122]\n    }, {\n        colourPalette: 2,\n        sequence: [s1212, s2121, s1212, s2121, s1212, null],\n        answer: [s2121]\n    }, {\n        colourPalette: 2,\n        sequence: [s1122, s1221, s2211, null],\n        answer: [s2112]\n    }, {\n        colourPalette: 2,\n        sequence: [t112, t121, t211, t112, t121, null],\n        answer: [t211]\n    }, {\n        colourPalette: 3,\n        sequence: [t123, t231, t312, t123, null],\n        answer: [t312]\n    }\n];\n\n// Check every node in a sequence of graphs matches the target node colours\nconst correctGraphSequence = ({ sequence, target }) =>\n    sequence.every((graph, index) =>\n        sequencesMatch(graph.nodes, target[index].nodes, 'colour')\n    );\n\nconst GraphSequences = {\n    name: 'Sequences 3',\n    slug: 'sequences-3',\n    icon: Icons[2],\n    component: () => <PuzzlePage\n        puzzles={puzzle}\n        evaluate={correctGraphSequence}\n        getPuzzleObject={getGraphSequence}\n        displayPuzzle={GraphRow}\n    />,\n};\n\nexport default GraphSequences;\n","import React from 'react';\n\n\nconst ColourMapIcon1 = (\n    <g className=\"graph-nodes\">\n        <rect className=\"colour-1\" x=\"-28\" y=\"-28\" width=\"28\" height=\"28\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"0\" y=\"-28\" width=\"28\" height=\"28\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"-28\" y=\"0\" width=\"28\" height=\"28\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"0\" y=\"0\" width=\"28\" height=\"28\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-3\" x=\"-12\" y=\"-12\" width=\"24\" height=\"24\" rx=\"2\" ry=\"2\" />\n    </g>\n);\n\nconst ColourMapIcon2 = (\n    <g className=\"graph-nodes\">\n        <rect className=\"colour-1\" x=\"-30\" y=\"-30\" width=\"30\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"0\" y=\"-30\" width=\"30\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"-30\" y=\"-10\" width=\"20\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-3\" x=\"-10\" y=\"-10\" width=\"20\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"10\" y=\"-10\" width=\"20\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"-30\" y=\"10\" width=\"30\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"0\" y=\"10\" width=\"30\" height=\"20\" rx=\"2\" ry=\"2\" />\n    </g>\n);\n\nexport default [ColourMapIcon1, ColourMapIcon2];\n","import React from 'react';\nimport { isColourable } from '../utils/isColourable';\n\n\nexport const Map = ({ regions=[], chamber }) =>\n    <g className=\"graph\">\n        <g className=\"graph-nodes\">\n            { regions.map((item, i) =>\n                <rect\n                    key={i}\n                    x={item.x}\n                    y={item.y}\n                    width={item.width}\n                    height={item.height}\n                    rx=\"3\"\n                    ry=\"3\"\n                    {...isColourable(item, chamber)}\n                />\n            )}\n        </g>\n    </g>\n\nexport const ColourableMap = (puzzle, chamber) =>\n    <Map {...puzzle} chamber={chamber} />\n","/*\n * Colour regions on a map such that no two touching regions have the same colour.\n */\n\nimport React from 'react';\n\nimport Icons from './Icons';\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { ColourableMap } from '../PuzzleComponents/Map';\nimport { getMapObject } from '../utils/loadPuzzle';\nimport { allItemsColoured, allConnectedItemsHaveDifferentColours } from '../utils/evaluate';\n\n\nconst puzzles1 = [\n    {\n        colourPalette: 1,\n        regions: [[0, 0, 32, 32]]\n    }, {\n        colourPalette: 2,\n        regions: [[-16, 0, 32, 32], [16, 0, 32, 32]],\n        connections: [[0, 1]]\n    }, {\n        colourPalette: 2,\n        regions: [[-32, 0, 32, 32], [0, 0, 32, 32], [32, 0, 32, 32]],\n        connections: [[0, 1], [1, 2]]\n    }, {\n        colourPalette: 3,\n        regions: [[-16, 16, 32, 32], [16, 16, 32, 32], [0, -16, 64, 32]],\n        connections: [[0, 1], [1, 2], [0, 2]]\n    }, {\n        colourPalette: 2,\n        regions: [[-16, 16, 32, 32], [16, 16, 32, 32], [-16, -16, 32, 32], [16, -16, 32, 32]],\n        connections: [[0, 1], [2, 3], [0, 2], [1, 3]]\n    }, {\n        colourPalette: 3,\n        regions: [[-16, 16, 32, 32], [16, 16, 32, 32], [-16, -16, 32, 32], [16, -16, 32, 32], [0, 0, 28, 28]],\n        connections: [[0, 1], [2, 3], [0, 2], [1, 3], [0, 4], [1, 4], [2, 4], [3, 4]]\n    }, {\n        colourPalette: 3,\n        regions: [[0, 0, 72, 72], [-12, 12, 24, 24], [12, 12, 24, 24], [-12, -12, 24, 24], [12, -12, 24, 24], [0, 0, 24, 24]],\n        connections: [[1, 2], [3, 4], [1, 3], [2, 4], [0, 1], [0, 2], [0, 3], [0, 4], [5, 1], [5, 2], [5, 3], [5, 4]]\n    }, {\n        colourPalette: 4,\n        regions: [[-16, 16, 32, 32], [16, 16, 32, 32], [0, -16, 64, 32], [0, 0, 28, 28]],\n        connections: [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3]]\n    }\n];\n\nconst puzzles2 = [\n    {\n        colourPalette: 2,\n        regions: [[0, 0, 96, 96], [0, 0, 32, 32]],\n        connections: [[0, 1]]\n    }, {\n        colourPalette: 3,\n        regions: [[-24, 0, 48, 96], [24, 0, 48, 96], [0, 0, 32, 32]],\n        connections: [[0, 1], [1, 2], [0, 2]]\n    }, {\n        colourPalette: 4,\n        regions: [[0, -32, 96, 32], [-24, 16, 48, 64], [24, 16, 48, 64], [0, 0, 32, 32]],\n        connections: [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3]]\n    }, {\n        colourPalette: 3,\n        regions: [[-24, -24, 48, 48], [24, -24, 48, 48], [-24, 24, 48, 48], [24, 24, 48, 48], [0, 0, 32, 32]],\n        connections: [[0, 1], [2, 3], [0, 2], [1, 3], [0, 4], [1, 4], [2, 4], [3, 4]]\n    }, {\n        colourPalette: 3,\n        regions: [[-16, -32, 64, 32], [32, -16, 32, 64], [-32, 16, 32, 64], [16, 32, 64, 32], [0, 0, 32, 32]],\n        connections: [[0, 1], [2, 3], [0, 2], [1, 3], [0, 4], [1, 4], [2, 4], [3, 4]]\n    }, {\n        colourPalette: 2,\n        regions: [\n            [-32, -32, 32, 32], [0, -32, 32, 32], [32, -32, 32, 32],\n            [-32, 0, 32, 32], [0, 0, 32, 32], [32, 0, 32, 32],\n            [-32, 32, 32, 32], [0, 32, 32, 32], [32, 32, 32, 32]\n        ],\n        connections: [\n            [0, 1], [1, 2], [3, 4], [4, 5], [6, 7], [7, 8],\n            [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [5, 8]\n        ]\n    }\n];\n\nconst evaluate = ({ regions, connections }) => \n    allItemsColoured(regions) &&\n    allConnectedItemsHaveDifferentColours(connections);\n\nconst PuzzleComponent = ({ puzzle }) => \n    <PuzzlePage\n        puzzles={puzzle}\n        evaluate={evaluate}\n        getPuzzleObject={getMapObject}\n        displayPuzzle={ColourableMap} />\n\nconst ColourMaps = [{\n    name: 'Colour Maps 1',\n    slug: 'colour-maps-1',\n    icon: Icons[0],\n    component: () => <PuzzleComponent puzzle={puzzles1} />,\n}, {\n    name: 'Colour Maps 2',\n    slug: 'colour-maps-2',\n    icon: Icons[1],\n    component: () => <PuzzleComponent puzzle={puzzles2} />,\n}];\n\nexport default ColourMaps;\n","import React from 'react';\n\n\nconst PermuteSequence = (\n    <g>\n        <g className=\"graph-edges\">\n            <line x1=\"-20\" y1=\"-20\" x2=\"20\" y2=\"-20\" />\n            <line x1=\"-20\" y1=\"0\" x2=\"20\" y2=\"0\" />\n            <line x1=\"-20\" y1=\"20\" x2=\"20\" y2=\"20\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"-20\" cy=\"-20\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"0\" cy=\"-20\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"20\" cy=\"-20\" r=\"6\" />\n\n            <circle className=\"colour-2\" cx=\"-20\" cy=\"0\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"0\" cy=\"0\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"20\" cy=\"0\" r=\"6\" />\n\n            <circle className=\"colour-2\" cx=\"-20\" cy=\"20\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"0\" cy=\"20\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"20\" cy=\"20\" r=\"6\" />\n        </g>\n    </g>\n);\n\nconst Permutations = (\n    <g>\n        <g className=\"graph-edges\">\n            <path d=\"M-10 -30h20\"/>\n            <path d=\"M-10 -10h20\"/>\n            <path d=\"M-10 10h20\"/>\n            <path d=\"M-10 30h20\"/>\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"-10\" cy=\"-30\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"10\" cy=\"-30\" r=\"6\" />\n\n            <circle className=\"colour-1\" cx=\"-10\" cy=\"-10\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"10\" cy=\"-10\" r=\"6\" />\n\n            <circle className=\"colour-2\" cx=\"-10\" cy=\"10\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"10\" cy=\"10\" r=\"6\" />\n\n            <circle className=\"colour-2\" cx=\"-10\" cy=\"30\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"10\" cy=\"30\" r=\"6\" />\n        </g>\n    </g>\n);\n\nconst Combinations = (\n    <g>\n        <g className=\"graph-edges\">\n            <path d=\"M-10 -20h20\"/>\n            <path d=\"M-10 0h20\"/>\n            <path d=\"M-10 20h20\"/>\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"-10\" cy=\"-20\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"10\" cy=\"-20\" r=\"6\" />\n\n            <circle className=\"colour-1\" cx=\"-10\" cy=\"0\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"10\" cy=\"0\" r=\"6\" />\n\n            <circle className=\"colour-2\" cx=\"-10\" cy=\"20\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"10\" cy=\"20\" r=\"6\" />\n        </g>\n    </g>\n);\n\nconst Derrangements = (\n    <g>\n        <g className=\"graph-edges\">\n            <line x1=\"-12\" y1=\"8\" x2=\"0\" y2=\"-12\" />\n            <line x1=\"-12\" y1=\"8\" x2=\"12\" y2=\"8\" />\n            <line x1=\"0\" y1=\"-12\" x2=\"12\" y2=\"8\" />\n            <line x1=\"0\" y1=\"-32\" x2=\"0\" y2=\"-12\" />\n            <line x1=\"-12\" y1=\"8\" x2=\"-30\" y2=\"20\" />\n            <line x1=\"12\" y1=\"8\" x2=\"30\" y2=\"20\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-12\" cy=\"8\" r=\"6\" />\n        <circle className=\"colour-2\" cx=\"0\" cy=\"-12\" r=\"6\" />\n        <circle className=\"colour-3\" cx=\"12\" cy=\"8\" r=\"6\" />\n\n        <circle className=\"colour-2\" cx=\"-30\" cy=\"20\" r=\"6\" />\n        <circle className=\"colour-3\" cx=\"0\" cy=\"-32\" r=\"6\" />\n        <circle className=\"colour-1\" cx=\"30\" cy=\"20\" r=\"6\" />\n    </g>\n</g>\n);\n\nconst Combinatorics2 = (\n    <g>\n        <g transform=\"translate(0, -24)\">\n            <line className=\"graph-edges\" x1=\"-20\" x2=\"20\" />\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-1\" cx=\"-20\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"0\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"20\" r=\"6\" />\n            </g>\n        </g>\n        <g transform=\"translate(0, -8)\">\n            <line className=\"graph-edges\" x1=\"-20\" x2=\"20\" />\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-2\" cx=\"-20\" r=\"6\" />\n                <circle className=\"colour-1\" cx=\"0\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"20\" r=\"6\" />\n            </g>\n        </g>\n        <g transform=\"translate(0, 8)\">\n            <line className=\"graph-edges\" x1=\"-20\" x2=\"20\" />\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-2\" cx=\"-20\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"0\" r=\"6\" />\n                <circle className=\"colour-1\" cx=\"20\" r=\"6\" />\n            </g>\n        </g>\n        <g transform=\"translate(0, 24)\">\n            <line className=\"graph-edges\" x1=\"-20\" x2=\"20\" />\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-1\" cx=\"-20\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"0\" r=\"6\" />\n                <circle className=\"colour-1\" cx=\"20\" r=\"6\" />\n            </g>\n        </g>\n    </g>\n);\n\n\nexport default [\n    PermuteSequence,\n    Permutations,\n    Combinations,\n    Derrangements,\n    Combinatorics2,\n];\n","/*\n * Find all the combinations for colouring a linear graph\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { getGraphSet } from '../utils/loadPuzzle';\nimport { setOfSetsEqual } from '../utils/evaluate';\nimport { GraphColumn } from '../PuzzleComponents/Sequence';\nimport { getCombinationsWithReplacement, getArrayOfN } from '../../utils/common';\n\n\n// Given a set of rows of linear graphs\n// Colour them so you have all combinations of colours\nconst puzzles = [{\n    colourPalette: 2,\n    items: [1, 2],\n    graphs: [[1, 1], [1, 2], [2, 0]],\n}, {\n    colourPalette: 2,\n    items: [1, 2],\n    graphs: [[1, 1, 1], [2, 2, 2], [1, 1, 2], [0, 0, 0]],\n}, {\n    colourPalette: 2,\n    items: [1, 2],\n    graphs: [[1, 1, 1, 1], [1, 1, 1, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],\n}, {\n    colourPalette: 3,\n    items: [1, 2, 3],\n    graphs: [[1, 1], [2, 2], [3, 3], [1, 2], [0, 0], [0, 0]],\n}];\n\n// Check the the given set of sequences matches a set of sequences.\nconst getSolutionSet = ({ colourPalette, graphs }) => {\n    const combinationLength = graphs[0].length;\n\n    // Find all combinations using this colour palette\n    const colours = getArrayOfN(colourPalette);\n    const combinations = getCombinationsWithReplacement(colours, combinationLength);\n    const combinationSet = new Set(combinations.map(combination => combination.sort().join('-')));\n    \n    return combinationSet\n};\n\nconst CombinationPuzzles = (\n    <PuzzlePage\n        puzzles={puzzles}\n        evaluate={setOfSetsEqual}\n        getPuzzleObject={getGraphSet}\n        getSolutionObject={getSolutionSet}\n        displayPuzzle={GraphColumn} />\n);\n\nexport default CombinationPuzzles;\n","/*\n * Colour regions on a map such that no two touching regions have the same colour.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { GraphRow, GraphColumn } from '../PuzzleComponents/Sequence';\nimport { getGraphSet } from '../utils/loadPuzzle';\nimport { sequenceSetMatches } from '../utils/evaluate';\nimport {\n    getArrayOfN,\n    getPermutations,\n    getPermutationsWithReplacement\n} from '../../utils/common';\n\n\n// Given a set of rows of linear graphs\n// Colour them so you have all permutations of colours with a fixed number of colours.\n// e.g. (1, 2, 2) => (1, 2, 2), (2, 1, 2), (2, 2, 1)\nconst puzzles1 = {\n    solution: puzzle => getPermutations(puzzle.graphs[0]),\n    puzzles: [{\n        colourPalette: 2,\n        graphs: [[1, 2], [2, 0]],\n    }, {\n        colourPalette: 2,\n        graphs: [[1, 2, 2], [2, 1, 2], [2, 2, 0]],\n    }, {\n        colourPalette: 2,\n        graphs: [[2, 2, 1], [1, 2, 2], [0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        graphs: [[2, 1, 2], [0, 0, 0], [0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        graphs: [[1, 2, 2, 2], [2, 1, 2, 2], [0, 0, 0, 0], [0, 0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        graphs: [[1, 1, 2, 2], [1, 2, 1, 2], [1, 2, 2, 1], [2, 1, 1, 2], [2, 1, 2, 1], [2, 0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        graphs: [[1, 1, 2, 2], [1, 0, 0, 0], [1, 0, 0, 0], [2, 0, 0, 0], [2, 0, 0, 0], [2, 0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        graphs: [[1, 1, 2, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],\n    }]\n};\n\n// Given a set of rows of linear graphs\n// Colour them so you have all permutations of colours (with replacement).\n// e.g. (1, 2) => (1, 1), (1, 2), (2, 1), (2, 2)\nconst puzzles2 = {\n    solution: puzzle =>\n        getPermutationsWithReplacement(getArrayOfN(puzzle.colourPalette), puzzle.graphs[0].length),\n    puzzles: [{\n        colourPalette: 2,\n        graphs: [[1, 1], [1, 2], [2, 1], [2, 0]],\n    }]\n};\n\n// Permutations of colours on looped graphs, so rotations count as the same thing.\n// e.g. [1,2,1]\nconst puzzles3 = [\n    {\n        colourPalette: 2,\n        loop: true,\n        graphs: [[1, 1, 1], [1, 1, 2], [1, 2, 2], [0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        loop: true,\n        graphs: [[1, 1, 2, 2], [2, 1, 2, 0]],\n    }\n];\n\nconst puzzles = [puzzles1, puzzles2, puzzles3];\n\n// Return the set of all permutation of colours based on the first pattern in the pattern array\nconst getSolutionSet = (getSolutions) => \n    (puzzle) => {\n        const solutions = getSolutions(puzzle);\n        return new Set(solutions.map(sequence => sequence.join('-')))\n    };\n\n// Display linear graphs one under another, and loop graphs in a row\nfunction displayGraphSequence({ sequence, loop }, chamber) {\n    if (loop) {\n        return GraphRow({ sequence }, chamber);\n    } else {\n        return GraphColumn({ sequence }, chamber);\n    }\n}\n\n// TODO: Evaluation for permutations with replacement on loops\n\nconst PermutationPuzzles = (n) => {\n    const puzzle = puzzles[n];\n    const solutionSet = getSolutionSet(puzzle.solution);\n    return (\n        <PuzzlePage\n            puzzles={puzzle.puzzles}\n            evaluate={sequenceSetMatches}\n            getPuzzleObject={getGraphSet}\n            getSolutionObject={solutionSet}\n            displayPuzzle={displayGraphSequence} />\n    );\n}\n\nexport default PermutationPuzzles;\n","// Derrangements - permutate the colours on a graph so that each node has a different colour from before\nimport React from 'react';\n\nimport { getRepeatArray, nTimes } from '../../utils/common';\nimport { sunletGraph } from '../utils/graphTypes';\nimport { getGraphObject } from '../utils/loadPuzzle';\nimport { graphIsChromatic, allGraphsInSequenceAreDifferent } from '../utils/evaluate';\nimport { GraphRow } from '../PuzzleComponents/Sequence';\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\n\n\n// TODO: Show graphs one by one\n\nconst puzzle1 = [{\n    colourPalette: [1, 1],\n    pattern: [1, 2],\n    nGraphs: 1,\n}, {\n    colourPalette: [1, 1, 1],\n    pattern: [1, 2, 3],\n    nGraphs: 1,\n}, {\n    colourPalette: [2, 2, 2],\n    pattern: [1, 2, 3],\n    nGraphs: 2,\n}, {\n    colourPalette: [2, 2],\n    pattern: [1, 2, 1, 2],\n    nGraphs: 1,\n}, {\n    colourPalette: [4, 2, 2],\n    pattern: [1, 2, 1, 3],\n    nGraphs: 2,\n}]\n\nconst puzzles = [puzzle1];\n\nfunction getGraphSet({ nGraphs, pattern }) {\n    const allNodes = getRepeatArray(0, pattern.length).concat(pattern);\n    const sequence = nTimes(nGraphs, () => {\n        return getGraphObject(sunletGraph(allNodes, { scale: 1.4 }))\n    });\n    sequence.gap = 0.2;\n    return { sequence };\n}\n\nconst allGraphsAreChromatic = ({ sequence }) =>\n    allGraphsInSequenceAreDifferent(sequence) &&\n    sequence.every(graphIsChromatic);\n\nconst DerrangementPuzzle = (\n    <PuzzlePage\n        puzzles={puzzles[0]}\n        evaluate={allGraphsAreChromatic}\n        getPuzzleObject={getGraphSet}\n        displayPuzzle={GraphRow} />\n);\n\nexport default DerrangementPuzzle;","import Icons from './Icons';\nimport CombinationPuzzles from './Combinations';\nimport PermutationPuzzles from './Permutations';\nimport DerrangementPuzzle from './Derrangements';\n\n\nconst puzzles = [{\n    name: 'Permutations 1',\n    slug: 'permutations-1',\n    icon: Icons[0],\n    component: () => PermutationPuzzles(0),\n}, {\n    name: 'Permutations 2',\n    slug: 'permutations-2',\n    icon: Icons[1],\n    component: () => PermutationPuzzles(1),\n}, {\n    name: 'Combinations',\n    slug: 'combinations',\n    icon: Icons[2],\n    component: () => CombinationPuzzles[0],\n}, {\n    name: 'Derrangements',\n    slug: 'derrangements',\n    icon: Icons[3],\n    component: () => DerrangementPuzzle,\n}];\n\nexport default puzzles;\n","import React from 'react';\n\n\nconst IdentityIcon1 = (\n    <>\n        <defs>\n            <g id=\"identity-1-puzzle\">\n                <g className=\"graph-edges\">\n                    <line x1=\"-15\" y1=\"13\" x2=\"0\" y2=\"-13\" />\n                    <line x1=\"-15\" y1=\"13\" x2=\"15\" y2=\"13\" />\n                    <line x1=\"0\" y1=\"-13\" x2=\"15\" y2=\"13\" />\n                </g>\n                <g className=\"graph-nodes\">\n                    <circle className=\"colour-1\" cx=\"-15\" cy=\"13\" r=\"6\" />\n                    <circle className=\"colour-2\" cx=\"0\" cy=\"-13\" r=\"6\" />\n                    <circle className=\"colour-3\" cx=\"15\" cy=\"13\" r=\"6\" />\n                </g>\n            </g>\n        </defs>\n\n        <use href=\"#identity-1-puzzle\" transform=\"translate(-24, -4)\"/>\n        <use href=\"#identity-1-puzzle\" transform=\"translate(24, -4)\"/>\n        <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n    </>\n);\n\nconst ReflectionIcon1 = (\n    <>\n        <defs>\n            <g id=\"reflection-1-puzzle\">\n                <g className=\"graph-edges\">\n                    <line x1=\"12\" y1=\"0\" x2=\"-11\" y2=\"-15\" />\n                    <line x1=\"12\" y1=\"0\" x2=\"-11\" y2=\"15\" />\n                    <line x1=\"-11\" y1=\"-15\" x2=\"-11\" y2=\"15\" />\n                </g>\n                <g className=\"graph-nodes\">\n                    <circle className=\"colour-2\" cx=\"12\" cy=\"0\" r=\"6\" />\n                    <circle className=\"colour-1\" cx=\"-11\" cy=\"15\" r=\"6\" />\n                    <circle className=\"colour-1\" cx=\"-11\" cy=\"-15\" r=\"6\" />\n                </g>\n            </g>\n        </defs>\n\n        <use href=\"#reflection-1-puzzle\" transform=\"translate(-20)\"/>\n        <use href=\"#reflection-1-puzzle\" transform=\"translate(20) scale(-1, 1)\"/>\n        <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n    </>\n);\n\nconst RotationIcon1 = (\n    <>\n        <defs>\n            <g id=\"rotation-1-puzzle\">\n                <g className=\"graph-edges\">\n                    <line x1=\"-16\" y1=\"13\" x2=\"-2\" y2=\"-13\" />\n                    <line x1=\"-16\" y1=\"13\" x2=\"12\" y2=\"13\" />\n                    <line x1=\"-2\" y1=\"-13\" x2=\"12\" y2=\"13\" />\n                </g>\n                <g className=\"graph-nodes\">\n                    <circle className=\"colour-1\" cx=\"-16\" cy=\"13\" r=\"6\" />\n                    <circle className=\"colour-2\" cx=\"-2\" cy=\"-13\" r=\"6\" />\n                    <circle className=\"colour-1\" cx=\"12\" cy=\"13\" r=\"6\" />\n                </g>\n            </g>\n        </defs>\n\n        <use href=\"#rotation-1-puzzle\" transform=\"translate(-20)\"/>\n        <use href=\"#rotation-1-puzzle\" transform=\"translate(20) rotate(180)\"/>\n        <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n    </>\n);\n\nconst TransformColourIcon1 = (\n    <>\n        <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n\n        <g transform=\"translate(-20)\">\n            <g className=\"graph-edges\">\n                <line x1=\"0\" y1=\"20\" x2=\"0\" y2=\"-16\" />\n            </g>\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-1\" cx=\"0\" cy=\"-20\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"0\" cy=\"0\" r=\"6\" />\n                <circle className=\"colour-1\" cx=\"0\" cy=\"20\" r=\"6\" />\n            </g>\n        </g>\n\n        <g transform=\"translate(20)\">\n            <g className=\"graph-edges\">\n                <line x1=\"0\" y1=\"20\" x2=\"0\" y2=\"-20\" />\n            </g>\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-2\" cx=\"0\" cy=\"-20\" r=\"6\" />\n                <circle className=\"colour-1\" cx=\"0\" cy=\"0\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"0\" cy=\"20\" r=\"6\" />\n            </g>\n        </g>\n    </>\n);\n\nexport default [IdentityIcon1, ReflectionIcon1, RotationIcon1, TransformColourIcon1];\n","/*\n * Colour all nodes on a graph such that no edges joins two nodes of the same colour.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { Graph, ColourableGraph } from '../PuzzleComponents/Graph';\nimport { getGraphAndUncolouredCopy } from '../utils/loadPuzzle';\nimport { getNodesOnCircle, getLoopOfEdges, getLineOfEdges } from '../utils/graphUtils';\nimport { graphNodesAreSameColour, samePatternButDifferent } from '../utils/evaluate';\n\n\nconst identity1 = [\n    {\n        colourPalette: 1,\n        nodes: [[0, 0, 1]]\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 2]),\n        edges: getLineOfEdges(2)\n    }, {\n        colourPalette: 2,\n        nodes: [[-1, 0, 1], [0, 0, 2], [1, 0, 1]],\n        edges: [[0, 1], [1, 2]]\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n    }, {\n        colourPalette: 4,\n        nodes: getNodesOnCircle([1, 2, 3, 4]),\n        edges: getLoopOfEdges(4)\n    }, {\n        size: 24,\n        colourPalette: 3,\n        nodes: [[-1, -1, 1], [1, -1, 1], [-0.5, 0, 2], [0.5, 0, 3], [-1, 1, 3], [1, 1, 2]],\n        edges: [[0, 2], [2, 3], [3, 1], [2, 4], [3, 5]]\n    }, {\n        size: 24,\n        colourPalette: 4,\n        nodes: [[-1.5, -1, 1], [-0.5, -1, 2], [0.5, -1, 1], [-0.5, 0, 1], [0.5, 0, 3], [-0.5, 1, 3], [0.5, 1, 4], [1.5, 1, 3]],\n        edges: [[0, 1], [1, 2], [1, 3], [3, 4], [4, 6], [5, 6], [6, 7]]\n    }\n];\n\nconst reflection1 = [\n    {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 2], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 1]),\n        edges: getLoopOfEdges(3)\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3]),\n        edges: getLoopOfEdges(3)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 1, 2]),\n        edges: getLoopOfEdges(4)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 2, 2]),\n        edges: getLoopOfEdges(4)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n    }, {\n        colourPalette: 4,\n        nodes: getNodesOnCircle([1, 2, 3, 4]),\n        edges: getLoopOfEdges(4)\n    }\n];\n\nconst rotation1 = [\n    {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 2], { dy: 0.25 }),\n        edges: getLoopOfEdges(3)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 2], { offsetAngle: 90 }),\n        edges: getLoopOfEdges(2)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 2]),\n        edges: getLoopOfEdges(2)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 2, 2]),\n        edges: getLoopOfEdges(4)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 1, 2]),\n        edges: getLoopOfEdges(4)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 2], { dy: 0.25 }),\n        edges: getLoopOfEdges(3)\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3], { dy: 0.25 }),\n        edges: getLoopOfEdges(3)\n    }, {\n        colourPalette: 4,\n        nodes: getNodesOnCircle([1, 2, 3, 4]),\n        edges: getLoopOfEdges(4)\n    }\n];\n\nconst colour1 = [\n    {\n        colourPalette: 1,\n        nodes: [[0, 0, 2]]\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 2]),\n        edges: getLineOfEdges(2)\n    }, {\n        colourPalette: 2,\n        nodes: [[-1, 0, 1], [0, 0, 2], [1, 0, 1]],\n        edges: getLineOfEdges(3)\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3]),\n        edges: getLoopOfEdges(3)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3, 2]).concat([[0, 0, 3]]),\n        edges: getLoopOfEdges(4).concat([[0, 4], [1, 4] ,[2, 4], [3, 4]])\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3, 1, 2, 3]),\n        edges: getLoopOfEdges(6)\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle([2, 3, 1, 3, 2, 1]),\n        edges: getLoopOfEdges(6)\n    }\n];\n\nconst Transformation = ({ puzzles, transform, evaluate }) => {\n    const displayGraphs = (puzzle, chamber) =>\n        <g>\n            <g transform=\"translate(-60)\">\n                <Graph {...puzzle.target} />\n            </g>\n            <g transform={ \"translate(60) \" + transform }>\n                { ColourableGraph(puzzle.blank, chamber) }\n            </g>\n\n            <line className=\"reflection-line\" y1=\"-200\" y2=\"200\" />\n        </g>\n\n    return <PuzzlePage\n        puzzles={puzzles}\n        evaluate={evaluate}\n        getPuzzleObject={getGraphAndUncolouredCopy}\n        displayPuzzle={displayGraphs} />\n};\n\nconst patternMatchGraphs = ({ blank, target }) => {\n    const seq1 = blank.nodes.map(node => node.colour);\n    const seq2 = target.nodes.map(node => node.colour);\n    return samePatternButDifferent(seq1, seq2);\n}\n\nconst Transformations = [\n    <Transformation puzzles={identity1} transform=\"\" evaluate={graphNodesAreSameColour} />,\n    <Transformation puzzles={reflection1} transform=\"scale(-1 1)\" evaluate={graphNodesAreSameColour}/>,\n    <Transformation puzzles={rotation1} transform=\"rotate(180)\" evaluate={graphNodesAreSameColour} />,\n    <Transformation puzzles={colour1} transform=\"\" evaluate={patternMatchGraphs} />,\n];\n\nexport default Transformations;\n","import Icons from './Icons';\nimport Puzzles from './Transformations';\n\n\nconst puzzles = [{\n    name: 'Identity',\n    slug: 'identity',\n    icon: Icons[0],\n    component: () => Puzzles[0],\n}, {\n    name: 'Reflection',\n    slug: 'reflection',\n    icon: Icons[1],\n    component: () => Puzzles[1],\n}, {\n    name: 'Rotation',\n    slug: 'rotation',\n    icon: Icons[2],\n    component: () => Puzzles[2],\n}, {\n    name: 'Inversion',\n    slug: 'inversion',\n    icon: Icons[3],\n    component: () => Puzzles[3],\n}];\n\nexport default puzzles;\n","/*\n * Colour all nodes on a graph such that no edges joins two nodes of the same colour.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { ColourableGraph } from '../PuzzleComponents/Graph';\nimport { getGraphObject } from '../utils/loadPuzzle';\nimport { getNodesOnCircle, getLoopOfEdges } from '../utils/graphUtils';\nimport { graphIsChromatic } from '../utils/evaluate';\n\n\nconst puzzles1 = [\n\t{\n\t\tcolourPalette: 1,\n\t\tnodes: [[0, 0]]\n\t}, {\n\t\tcolourPalette: 2,\n\t\tnodes: [[-1, 0], [1, 0]],\n\t\tedges: [[0, 1]],\n\t}, {\n\t\tcolourPalette: 2,\n\t\tnodes: [[-2, 0], [0, 0], [2, 0]],\n\t\tedges: [[0, 1], [1, 2]],\n\t}, {\n\t\tcolourPalette: 3,\n\t\tnodes: getNodesOnCircle(3),\n\t\tedges: getLoopOfEdges(3),\n\t}, {\n\t\tcolourPalette: 2,\n\t\tnodes: getNodesOnCircle(4),\n\t\tedges: getLoopOfEdges(4),\n\t}, {\n\t\tcolourPalette: 3,\n\t\tnodes: getNodesOnCircle(4),\n\t\tedges: getLoopOfEdges(4).concat([[1, 3]]),\n\t}, {\n\t\tcolourPalette: 4,\n\t\tnodes: getNodesOnCircle(4),\n\t\tedges: getLoopOfEdges(4).concat([[1, 3], [0, 2]]),\n\t}, {\n\t\tcolourPalette: 3,\n\t\tnodes: [[0, 0]].concat(getNodesOnCircle(4)),\n\t\tedges: getLoopOfEdges(1, 4).concat([[0, 1], [0, 2], [0, 3], [0, 4]]),\n\t}\n];\n\nconst rectCoords = [[-2, -1], [0, -1], [2, -1], [2, 1], [0, 1], [-2, 1]];\nconst puzzles2 = [\n    {\n        colourPalette: 2,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6),\n    }, {\n        colourPalette: 2,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[1, 4]]),\n    }, {\n        colourPalette: 2,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[0, 3]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[0, 4]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[0, 4], [2, 4]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[0, 4], [1, 4], [2, 4]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[0, 4], [1, 4], [1, 3]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: getNodesOnCircle(3).concat(getNodesOnCircle(3, { r: 2, offsetAngle: 60 })),\n        edges: getLoopOfEdges(3).concat([[0, 3], [1, 3], [1, 4], [2, 4], [0, 5], [2, 5]]),\n    }, {\n        colourPalette: 3,\n        scale: 16,\n        nodes: getNodesOnCircle(3).concat(getNodesOnCircle(3, { r: 4, offsetAngle: 60 })),\n        edges: getLoopOfEdges(3)\n            .concat(getLoopOfEdges(3, 5))\n            .concat([[0, 3], [1, 3], [1, 4], [2, 4], [0, 5], [2, 5]]),\n    }\n];\n\n// TODO: Give more colourPalette than required\nconst puzzles3 = [\n    {\n        colourPalette: 2,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6),\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[2, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 2], [2, 4]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 2], [2, 4], [0, 4]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[1, 3], [0, 4], [2, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[2, 4], [1, 3], [0, 4], [1, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 3], [1, 4], [2, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 2], [1, 3], [2, 4], [3, 5], [4, 0], [5, 1]]),\n    }\n];\n\nconst puzzles = [puzzles1, puzzles2, puzzles3];\n\nexport const ColourGraph = (n) =>\n    <PuzzlePage\n        puzzles={puzzles[n]}\n        evaluate={graphIsChromatic}\n        getPuzzleObject={getGraphObject}\n        displayPuzzle={ColourableGraph}\n    />\n","/*\n * Construct a Hamiltonian path along a graph.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { getGraphObject } from '../utils/loadPuzzle';\nimport { ColourableHamilitonianPath } from '../PuzzleComponents/Graph';\n\nimport { allItemsColoured } from '../utils/evaluate';\nimport { loopGraph } from '../utils/graphTypes';\nimport {\n    getNodesOnCircle,\n    getLoopOfEdges,\n    getLineOfEdges,\n} from '../utils/graphUtils';\n\n\nconst R3 = Math.sqrt(3);\n\nconst puzzles = [\n    {\n        graph: loopGraph(6)\n    }, {\n        graph: {\n            nodes: getNodesOnCircle(6),\n            edges: getLoopOfEdges(6).concat([[1, 4]])\n        }\n    }, {\n        graph: {\n            nodes: getNodesOnCircle(6),\n            edges: getLineOfEdges(6)\n        }\n    }, {\n        graph: {\n            nodes: getNodesOnCircle(6),\n            edges: getLineOfEdges(6).concat([[2, 5]])\n        }\n    }, {\n        graph: {\n            nodes: getNodesOnCircle(6),\n            edges: [[2, 3], [3, 4], [4, 5], [5, 0], [1, 4], [0, 3]]\n        }\n    }, {\n        graph: {\n            nodes: getNodesOnCircle(3, { r: 0.75 })\n                    .concat(getNodesOnCircle(3, { r: 2 })),\n            edges: getLoopOfEdges(3)\n                    .concat(getLoopOfEdges(3, 5))\n                    .concat([[2, 5]])\n        }\n    }, {\n        graph: {\n            nodes: getNodesOnCircle(3, { r: 0.75 })\n                    .concat(getNodesOnCircle(3, { r: 2 }))\n                    .concat([[-R3, -2], [R3, -2]]),\n            edges: getLoopOfEdges(3)\n                    .concat(getLoopOfEdges(3, 5))\n                    .concat([[0, 3], [2, 5], [3, 6], [4, 7]])\n        }\n    }, {\n        graph: {\n            nodes: getNodesOnCircle(3, { r: 0.75 })\n                    .concat(getNodesOnCircle(3, { r: 2 }))\n                    .concat([[-R3, -2], [R3, -2]]),\n            edges: getLoopOfEdges(3)\n                    .concat(getLoopOfEdges(3, 5))\n                    .concat([[2, 5], [3, 6], [4, 7], [5, 6], [5, 7]])\n        }\n    }\n];\n\n// Get a graph object with the first node coloured\nconst getGraph = ({ graph }) => {\n    graph.size = 50;\n    const graphObject = getGraphObject(graph);\n    return graphObject;\n};\n\nconst GraphTheory =\n    <PuzzlePage\n        colourPalette={1}\n        clearButton\n        puzzles={puzzles}\n        evaluate={({ nodes }) => allItemsColoured(nodes)}\n        getPuzzleObject={getGraph}\n        displayPuzzle={ColourableHamilitonianPath}\n    />\n\nexport default GraphTheory;\n","/*\n * Find the smallest dominating set.\n * Colour the vertices of a graph such that each vertex is coloured or adjacent\n * to a vertex that is coloured. The number of vertices you can colour is limited.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { getGraphObject } from '../utils/loadPuzzle';\nimport { DominatingSet } from '../PuzzleComponents/Graph';\n\nimport { allItemsColoured } from '../utils/evaluate';\nimport { getNodesOnCircle, getLoopOfEdges, connectNodeToNodes } from '../utils/graphUtils';\nimport { linearGraph, loopGraph, spokeGraph } from '../utils/graphTypes';\n\n\nconst puzzles = [\n    {\n        colourPalette: [1],\n        graph: linearGraph(3, { scale: 2, r: 10 })\n    }, {\n        colourPalette: [1],\n        graph: spokeGraph(5, { scale: 2, r: 10 })\n    }, {\n        colourPalette: [2],\n        graph: loopGraph(6, { scale: 2, r: 10 })\n    }, {\n        colourPalette: [2],\n        graph: {\n            nodes: getNodesOnCircle(6, { r: 2 }).concat([[0, 0, 0]]),\n            edges: getLoopOfEdges(6).concat(connectNodeToNodes(6, [0, 1, 3, 4])),\n            r: 10\n        }\n    }, {\n        colourPalette: [3],\n        graph: {\n            nodes: getNodesOnCircle(5, { r: 3 }).concat(getNodesOnCircle(5, { r: 1.5 })),\n            edges: getLoopOfEdges(5).concat([\n                [0, 5], [1, 6], [2, 7], [3, 8], [4, 9],\n                [5, 7], [6, 8], [7, 9], [5, 8], [6, 9]\n            ]),\n            r: 10\n        }\n    }, {\n        colourPalette: [4],\n        graph: {\n            nodes: getNodesOnCircle(6, { r: 1.5 })\n                .concat(getNodesOnCircle(3, { r: 3, offsetAngle: 30 }))\n                .concat([[0, 0, 0]]),\n            edges: getLoopOfEdges(6)\n                .concat([[0, 6], [2, 7], [4, 8]])\n                .concat(connectNodeToNodes(9, [1, 3, 5])),\n            r: 10\n        }\n    }, {\n        colourPalette: [4],\n        graph: {\n            nodes: getNodesOnCircle(8, { r: 3 }).concat(getNodesOnCircle(4, { r: 1.5 })).concat([[0, 0, 0]]),\n            edges: getLoopOfEdges(8)\n                .concat(getLoopOfEdges(8, 11))\n                .concat(connectNodeToNodes(12, [8, 9, 10, 11]))\n                .concat([\n                    [0, 8], [1, 9], [2, 9], [3, 10], [4, 10], [5, 11], [6, 11], [7, 8]\n                ]),\n            r: 10\n        }\n    }, {\n        colourPalette: [5],\n        graph: {\n            nodes: getNodesOnCircle(12, { r: 3 }).concat(getNodesOnCircle(4, { r: 1.5 })).concat([[0, 0, 0]]),\n            edges: getLoopOfEdges(12)\n                .concat(getLoopOfEdges(12, 15))\n                .concat(connectNodeToNodes(16, [12, 13, 14, 15]))\n                .concat([\n                    [0, 12], [2, 13], [3, 13], [5, 14], [6, 14], [8, 15], [9, 15], [11, 12]\n                ]),\n            r: 10\n        }\n    }\n];\n\nconst GraphTheory =\n    <PuzzlePage\n        clearButton\n        puzzles={puzzles}\n        evaluate={({ nodes }) => allItemsColoured(nodes)}\n        getPuzzleObject={({ graph }) => getGraphObject(graph)}\n        displayPuzzle={DominatingSet}\n    />\n\nexport default GraphTheory;\n","/*\n * Find the smallest dominating set.\n * Colour the vertices of a graph such that each vertex is coloured or adjacent\n * to a vertex that is coloured. The number of vertices you can colour is limited.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { getGraphObject } from '../utils/loadPuzzle';\nimport { ColourableEdgeGraph } from '../PuzzleComponents/Graph';\nimport { linearGraph, loopGraph } from '../utils/graphTypes';\nimport { getNodesOnCircle, getLoopOfEdges } from '../utils/graphUtils';\nimport { graphIsDisjoint } from '../utils/evaluate';\n\n\nconst puzzles = [\n    {\n        colourPalette: [1],\n        graph: linearGraph(2, { scale: 2, r: 10 })\n    }, {\n        colourPalette: [1],\n        graph: linearGraph(3, { scale: 2, r: 10 })\n    }, {\n        colourPalette: [2],\n        graph: loopGraph(4, { scale: 2, r: 10 })\n    }, {\n        colourPalette: [1],\n        graph: {\n            r: 10,\n            nodes: [[-2.5, -1.6], [-2.5, 1.6], [-0.8, 0], [0.8, 0], [2.5, -1.6], [2.5, 1.6]],\n            edges: [[0, 1], [0, 2], [1, 2], [2, 3], [3, 4], [3, 5], [4, 5]]\n        }\n    }, {\n        colourPalette: [1],\n        graph: {\n            r: 10,\n            nodes: getNodesOnCircle(3, { colour: 1, r: 2 }).concat([[0, 0, 1]]),\n            edges: [[0, 1], [1, 2], [0, 2], [2, 3]]\n        }\n    }, {\n        colourPalette: [2],\n        graph: {\n            r: 10,\n            nodes: [\n                [-3, -1], [-1, -1], [1, -1], [3, -1],\n                [3, 1], [1, 1], [-1, 1], [-3, 1] \n            ],\n            edges: getLoopOfEdges(8).concat([[0, 6], [1, 7], [2, 4], [3, 5]])\n        }\n    }, {\n        colourPalette: [2],\n        graph: {\n            r: 10,\n            nodes: [\n                [-3, -1], [-1, -1], [1, -1], [3, -1],\n                [3, 1], [1, 1], [-1, 1], [-3, 1] \n            ],\n            edges: getLoopOfEdges(8).concat([[0, 6], [1, 5], [2, 6], [2, 4], [3, 5]])\n        }\n    }, {\n        colourPalette: [2],\n        graph: {\n            r: 8,\n            nodes: [\n                [-2.4, -1.8], [-3, -0], [-2.4, 1.8], [-1.8, 0],\n                [ 2.4, -1.8], [ 3, -0], [ 2.4, 1.8], [ 1.8, 0],\n                [0, -0.9], [-0.6, 0], [0, 0.9], [0.6, 0] \n            ],\n            edges: [\n                [0, 1], [1, 2], [2, 3], [3, 0], [1, 3],\n                [4, 5], [5, 6], [6, 7], [7, 4], [5, 7],\n                [8, 9], [9, 10], [10, 11], [11, 8], [8, 10],\n                [3, 9], [7, 11], [0, 4], [2, 6]\n            ]\n        }\n    }\n];\n\nconst GraphTheory =\n    <PuzzlePage\n        clearButton\n        puzzles={puzzles}\n        evaluate={({ nodes }) => graphIsDisjoint(nodes)}\n        getPuzzleObject={({ graph }) => getGraphObject(graph)}\n        displayPuzzle={ColourableEdgeGraph}\n    />\n\nexport default GraphTheory;\n","/*\n * Construct a Euler path along a graph.\n * Given a starting node, move along the edges, visiting each edge only once\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { getGraphObject } from '../utils/loadPuzzle';\nimport { ColourableEulerPath } from '../PuzzleComponents/Graph';\n\nimport { allItemsColoured } from '../utils/evaluate';\nimport { loopGraph } from '../utils/graphTypes';\nimport { getNodesOnCircle, getLoopOfEdges } from '../utils/graphUtils';\n\n\nconst puzzles1 = [{\n    graph: loopGraph(4),\n}, {\n    graph: (() => {\n        const graph = loopGraph(4);\n        graph.edges.push([0, 2]);\n        return graph;\n    })(),\n}, {\n    graph: (() => {\n        const graph = loopGraph(4);\n        graph.nodes.push([0, 0]);\n        graph.edges.push([3, 4]);\n        return graph;\n    })(),\n}, {\n    graph: (() => {\n        const graph = loopGraph(4);\n        graph.nodes.push([0, -1.6]);\n        graph.edges.push([2, 4], [3, 4]);\n        return graph;\n    })(),\n}, {\n    graph: {\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[1, 4]])\n    }\n}];\n\n// Get a graph object with the first node coloured\nconst getGraph = (puzzle) => {\n    puzzle.graph.size = 50;\n    const graphObject = getGraphObject(puzzle.graph);\n    return graphObject;\n};\n\nconst EulerPath =\n    <PuzzlePage\n        colourPalette={1}\n        clearButton\n        puzzles={puzzles1}\n        evaluate={({ edges }) => allItemsColoured(edges)}\n        getPuzzleObject={getGraph}\n        displayPuzzle={ColourableEulerPath}\n    />\n\nexport default EulerPath;\n","import React from 'react';\n\n\nconst ColourGraphIcon1 = (\n    <g>\n        <g className=\"graph-edges edge-outline\">\n            <path d=\"M-20 -20h40v40h-40z\" fill=\"none\" />\n            <line x1=\"-20\" y1=\"-20\" x2=\"20\" y2=\"20\" />\n            <line x1=\"-20\" y1=\"20\" x2=\"20\" y2=\"-20\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"-20\" cy=\"-20\" r=\"7\" />\n            <circle className=\"colour-2\" cx=\"-20\" cy=\"20\" r=\"7\" />\n            <circle className=\"colour-1\" cx=\"20\" cy=\"20\" r=\"7\" />\n            <circle className=\"colour-2\" cx=\"20\" cy=\"-20\" r=\"7\" />\n            <circle className=\"colour-3\" cx=\"0\" cy=\"0\" r=\"7\" />\n        </g>\n    </g>\n);\n\nconst ColourGraphIcon2 = (\n    <g>\n        <g className=\"graph-edges edge-outline\">\n            <path d=\"M-32 -16h64v32h-64z\" fill=\"none\" />\n            <line x1=\"0\" y1=\"-16\" x2=\"0\" y2=\"16\" />\n            <line x1=\"-32\" y1=\"-16\" x2=\"0\" y2=\"16\" />\n            <line x1=\"32\" y1=\"-16\" x2=\"0\" y2=\"16\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"-32\" cy=\"-16\" r=\"7\" />\n            <circle className=\"colour-2\" cx=\"0\" cy=\"-16\" r=\"7\" />\n            <circle className=\"colour-1\" cx=\"32\" cy=\"-16\" r=\"7\" />\n            <circle className=\"colour-2\" cx=\"32\" cy=\"16\" r=\"7\" />\n            <circle className=\"colour-3\" cx=\"0\" cy=\"16\" r=\"7\" />\n            <circle className=\"colour-2\" cx=\"-32\" cy=\"16\" r=\"7\" />\n        </g>\n    </g>\n);\n\nconst ColourGraphIcon3 = (\n    <g>\n        <g className=\"graph-edges edge-outline\">\n            <path d=\"M32 0L16 27.7h-32L-32 0 -16 -27.71h32z\" />\n            <line x1=\"16\" y1=\"-27.71\" x2=\"16\" y2=\"27.71\" />\n            <line x1=\"-16\" y1=\"-27.71\" x2=\"-16\" y2=\"27.71\" />\n            <line x1=\"-32\" y1=\"0\" x2=\"32\" y2=\"0\" />\n            <line x1=\"-32\" y1=\"0\" x2=\"32\" y2=\"0\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"32\" cy=\"0\" r=\"7\" />\n            <circle className=\"colour-2\" cx=\"16\" cy=\"27.71\" r=\"7\" />\n            <circle className=\"colour-3\" cx=\"-16\" cy=\"27.71\" r=\"7\" />\n            <circle className=\"colour-2\" cx=\"-32\" cy=\"0\" r=\"7\" />\n            <circle className=\"colour-1\" cx=\"-16\" cy=\"-27.71\" r=\"7\" />\n            <circle className=\"colour-3\" cx=\"16\" cy=\"-27.71\" r=\"7\" />\n        </g>\n    </g>\n)\n\nexport default [ColourGraphIcon1, ColourGraphIcon2, ColourGraphIcon3];\n","import React from 'react';\n\n\nconst HamiltonianPath = (\n    <g>\n        <g className=\"graph-edges\">\n            <line x1=\"-30\" y1=\"20\" x2=\"0\" y2=\"-32\" />\n\n            <g className=\"colour-1\">\n                <line x1=\"-12\" y1=\"8\" x2=\"0\" y2=\"-12\" />\n                <line x1=\"-12\" y1=\"8\" x2=\"12\" y2=\"8\" />\n                <line x1=\"0\" y1=\"-12\" x2=\"12\" y2=\"8\" />\n                <line x1=\"0\" y1=\"-32\" x2=\"30\" y2=\"20\" />\n                <line x1=\"-30\" y1=\"20\" x2=\"30\" y2=\"20\" />\n                <line x1=\"0\" y1=\"-32\" x2=\"0\" y2=\"-12\" />\n            </g>\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"-12\" cy=\"8\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"0\" cy=\"-12\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"12\" cy=\"8\" r=\"6\" />\n\n            <circle className=\"colour-1\" cx=\"-30\" cy=\"20\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"0\" cy=\"-32\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"30\" cy=\"20\" r=\"6\" />\n        </g>\n    </g>\n);\n\nconst DominatingSet = (\n    <g>\n        <g className=\"graph-edges\">\n            <path className=\"colour-none\" d=\"M-20 -20h40v40h-40z\" />\n\n            <g className=\"colour-1\">\n                <line x1=\"-20\" y1=\"-20\" x2=\"20\" y2=\"20\" />\n                <line x1=\"-20\" y1=\"20\" x2=\"20\" y2=\"-20\" />\n            </g>\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-2\" cx=\"-20\" cy=\"-20\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"-20\" cy=\"20\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"20\" cy=\"20\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"20\" cy=\"-20\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"0\" cy=\"0\" r=\"6\" />\n        </g>\n    </g>\n);\n\nconst MinimumCut = (\n    <g>\n        <g className=\"graph-edges\">\n            <line x1=\"-32\" y1=\"16\" x2=\"-32\" y2=\"-16\" />\n            <line x1=\"-32\" y1=\"16\" x2=\"-12\" y2=\"0\" />\n            <line x1=\"-32\" y1=\"-16\" x2=\"-12\" y2=\"0\" />\n            <line x1=\"32\" y1=\"16\" x2=\"32\" y2=\"-16\" />\n            <line x1=\"32\" y1=\"16\" x2=\"12\" y2=\"0\" />\n            <line x1=\"32\" y1=\"-16\" x2=\"12\" y2=\"0\" />\n\n            <g className=\"colour-none\">\n                <line x1=\"-12\" y1=\"0\" x2=\"12\" y2=\"0\" />\n            </g>\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"-32\" cy=\"-16\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"-32\" cy=\"16\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"-12\" cy=\"0\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"32\" cy=\"-16\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"32\" cy=\"16\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"12\" cy=\"0\" r=\"6\" />\n        </g>\n    </g>\n)\n\nconst EulerPath = (\n    <g>\n        <g className=\"graph-edges\">\n            <path className=\"colour-1\" d=\"M-15 -8h30v30h-30v-30l15 -22l15 22\" />\n        </g>\n        <g className=\"graph-nodes colour-1\">\n            <circle cx=\"-15\" cy=\"-8\" r=\"6\" />\n            <circle cx=\"15\" cy=\"-8\" r=\"6\" />\n            <circle cx=\"-15\" cy=\"22\" r=\"6\" />\n            <circle cx=\"15\" cy=\"22\" r=\"6\" />\n            <circle cx=\"0\" cy=\"-30\" r=\"6\" />\n        </g>\n    </g>\n);\n\nexport default [\n    HamiltonianPath,\n    DominatingSet,\n    MinimumCut,\n    EulerPath,\n];\n","import { ColourGraph } from './ColourGraphs';\nimport HamiltonianPath from './HamiltonianPath';\nimport DominatingSet from './DominatingSet';\nimport MinimumCut from './MinimumCut';\nimport EulerPath from './EulerPath';\nimport ColourGraphIcons from './Icons/ColourGraphs';\nimport GraphTheoryIcons from './Icons/GraphTheory';\n\n\nconst puzzles = [{\n    name: 'Colour Graph 1',\n    slug: 'colour-graphs-1',\n    icon: ColourGraphIcons[0],\n    component: () => ColourGraph(1),\n}, {\n    name: 'Colour Graph 2',\n    slug: 'colour-graphs-2',\n    icon: ColourGraphIcons[1],\n    component: () => ColourGraph(2),\n}, {\n    name: 'Colour Graph 3',\n    slug: 'colour-graphs-3',\n    icon: ColourGraphIcons[2],\n    component: () => ColourGraph(3),\n}, {\n    name: 'Hamiltonian Path',\n    slug: 'hamiltonian-path',\n    icon: GraphTheoryIcons[0],\n    component: () => HamiltonianPath,\n}, {\n    name: 'Dominating Set',\n    slug: 'dominating-set',\n    icon: GraphTheoryIcons[1],\n    component: () => DominatingSet,\n}, {\n    name: 'Minimum Cut',\n    slug: 'minimum-cut',\n    icon: GraphTheoryIcons[2],\n    component: () => MinimumCut,\n}, {\n    name: 'Euler Path',\n    slug: 'euler-path',\n    icon: GraphTheoryIcons[3],\n    component: () => EulerPath,\n}];\n\nexport default puzzles;\n","import TutorialPuzzle from './Tutorial/Tutorial';\nimport BasicSequences from './Sequences/BasicSequences';\nimport GraphSequences from './Sequences/GraphSequences';\nimport ColourMaps from './ColourMaps/ColourMaps';\nimport CombinationPuzzles from './Combinatorics/puzzles';\nimport TransformationPuzzles from './Transformations/puzzles';\nimport GraphTheoryPuzzles from './GraphTheory/puzzles';\n\n\nconst puzzleData = [\n    TutorialPuzzle,\n    ...TransformationPuzzles,\n    ...CombinationPuzzles,\n    ...GraphTheoryPuzzles,\n    ...ColourMaps,\n    ...BasicSequences,\n    GraphSequences,\n];\n\nexport default puzzleData;\n","// Simple list of all puzzles with links to their pages\n\nimport React from 'react';\nimport { Link } from \"react-router-dom\";\nimport { puzzleLayout } from '../AppData';\n\nimport './puzzleMenu.css';\n\n\nfunction Menu() {\n    return (\n        <main className=\"puzzle-menu\">\n            { puzzleLayout.map((section, index) => {\n                return <Section key={index} name={index + 1} puzzles={section} />\n            })}\n        </main>\n    );\n}\n\nfunction Section({ name, puzzles }) {\n    return (\n        <section>\n            <h3>Section { name }</h3>\n            <ul>\n                { puzzles.map(({slug}) => (\n                    <li slug={slug} key={slug}>\n                        <Link to={slug}>{slug}</Link>\n                    </li>\n                ))}\n            </ul>\n        </section>\n    );\n}\n\nexport default Menu;\n","// Code to determine the layout of the navigation graph\n\nconst CONNECTION_LENGTH = 180;\n\n// Each item in this array represents a branch in the puzzle grid\n// The first item is the starting node, \n// The second item is an array of puzzles that branch from the starting node\n// The third item is the angle of the branch relative to the starting node's angle\n// The forth item is an optional angle between each node in the branch\nconst BRANCHES = [\n    ['tutorial', ['sequences-1', 'sequences-2', 'sequences-3'], 45, -15],\n    ['tutorial', ['identity', 'reflection', 'rotation', 'inversion'], 135, 15],\n    ['sequences-1', ['colour-graphs-1', 'colour-graphs-2', 'colour-graphs-3'], 60, 15],\n    ['colour-graphs-1', ['colour-maps-1', 'colour-maps-2'], 70, -15],\n    ['colour-graphs-2', ['hamiltonian-path', 'dominating-set', 'minimum-cut', 'euler-path'], -70, 15],\n    ['sequences-2', ['permutations-1', 'permutations-2', 'combinations', 'derrangements'], 60, -15],\n];\n\n// Array of connections between puzzles in the form\n// [<puzzle1>, <puzzle2>, <optional angle change>]\n// Creates an edge between puzzle1 and puzzle 2 in the direction of\n// puzzle1's angle + an optional change in angle\nconst PUZZLE_CONNECTIONS = [];\n\n// Function for adding connections between puzzles\n// and determining the position of icons given the angles between them\nfunction getConnections(puzzleData) {\n    const connections = [];\n\n    function getPuzzle(name) {\n        const puzzle = puzzleData.find(puzzle => puzzle.slug === name);\n        if (!puzzle) {\n            console.error(`No puzzle foud with name: ${name}`);\n        }\n        return puzzle;\n    }\n\n    function addConnection(name1, name2, angle) {\n        const puzzle1 = getPuzzle(name1);\n        const puzzle2 = getPuzzle(name2);\n\n        // If puzzle 1 doesn't have a position then set it to the origin\n        if (!puzzle1.x && !puzzle1.y) {\n            puzzle1.x = 0;\n            puzzle1.y = 0;\n            puzzle1.angle = 0;\n        }\n\n        // If puzzle 2 doesn't have a position then set it based on the connection angle\n        if (!puzzle2.x && !puzzle2.y) {\n            puzzle2.angle = (puzzle1.angle || 0) + (angle || 0);\n            const radians = puzzle2.angle * Math.PI / 180;\n            puzzle2.x = puzzle1.x + CONNECTION_LENGTH * Math.cos(radians);\n            puzzle2.y = puzzle1.y + CONNECTION_LENGTH * Math.sin(radians);\n        }\n\n        connections.push({\n            x1: puzzle1.x,\n            y1: puzzle1.y,\n            x2: puzzle2.x,\n            y2: puzzle2.y,\n        });\n    }\n\n    BRANCHES.forEach(branch => {\n        const [start, nodes, angle, dx] = branch;\n        let node1 = start;\n        for (let i = 0; i < nodes.length; i++) {\n            const node2 = nodes[i];\n            const connectionAngle = i ? (dx || 0) : angle;\n            addConnection(node1, node2, connectionAngle);\n            node1 = node2;\n        }\n    });\n\n    PUZZLE_CONNECTIONS.forEach(([name1, name2, angle]) => {\n        addConnection(name1, name2, angle);\n    });\n\n    return connections;\n}\n\nexport default getConnections;\n","/****************************************************************\n * Create a menu of puzzle icons in the form of a graph showing\n * how puzzles relate to each other.\n ****************************************************************/\nimport React, { useState } from 'react';\n\nimport { Link } from \"react-router-dom\";\nimport puzzleData from \"../Puzzles/allPuzzles\";\nimport getConnections from \"./PuzzleGraphLayout\";\n\nimport './Icons/icons.css';\nimport './PuzzleGraph.css';\n\n\nconst SIZE = 720;\n\nconst connections = getConnections(puzzleData);\n\nfunction getGraphExtent(puzzles) {\n    let minX = 0;\n    let maxX = 0;\n    let maxY = 0;\n    puzzles.forEach(({ x, y }) => {\n        if (x !== undefined) {\n            if (x < minX) { minX = x; }\n            if (x > maxX) { maxX = x; }\n            if (y > maxY) { maxY = y; }\n        }\n    });\n    return { minX, maxX, minY: 0, maxY };\n}\n\nconst extent = getGraphExtent(puzzleData);\n\nfunction Graph() {\n    const [dragging, setDragging] = useState(false);\n    const [lastPosition, setLastPosition] = useState(false);\n    const [offset, setOffset] = useState({ x: 0, y: 0 });\n\n    const minX = -extent.maxX;\n    const maxX = -extent.minX;\n    const minY = -extent.maxY;\n    const maxY = SIZE * 0.25;\n\n    function getPosition(evt) {\n        if (evt.touches) {\n            evt = evt.touches[0];\n        }\n        return { x: evt.pageX, y: evt.pageY };\n    }\n\n    function onMouseDown(evt) {\n        setDragging(true);\n        const position = getPosition(evt);\n        setLastPosition(position);\n        evt.stopPropagation();\n        evt.preventDefault();\n    }\n\n    function onMouseMove(evt) {\n        if (!dragging) { return; }\n        evt.stopPropagation();\n        evt.preventDefault();\n\n        const position = getPosition(evt);\n        const dx = position.x - lastPosition.x;\n        const dy = position.y - lastPosition.y;\n        move(dx, dy);\n        setLastPosition(position);\n    };\n\n    function onMouseUp(evt) {\n        setDragging(false);\n        evt.stopPropagation();\n        evt.preventDefault();\n    }\n\n    function move(dx, dy) {\n        let x = offset.x + dx;\n        let y = offset.y + dy;\n\n        if (x < minX) { x = minX; }\n        else if (x > maxX) { x = maxX; }\n        if (y < minY) { y = minY; }\n        else if (y > maxY) { y = maxY; }\n\n        setOffset({ x, y });\n    }\n\n    return (\n        <main\n            onMouseDown={onMouseDown}\n            onMouseMove={onMouseMove}\n            onMouseUp={onMouseUp}\n            onTouchStart={onMouseDown}\n            onTouchMove={onMouseMove}\n            onTouchEnd={onMouseUp}\n        >\n            <nav className=\"puzzle-graph\">\n                <svg viewBox={`-${SIZE / 2} -${SIZE * 0.15} ${SIZE} ${SIZE}`} width=\"100%\" height=\"100%\">\n                    <defs>\n                        <filter id=\"glow-spotlight\" x=\"-200%\" y=\"-200%\" width=\"400%\" height=\"400%\">\n                            <feGaussianBlur stdDeviation=\"2\" result=\"colouredBlur\" />\n                            <feMerge>\n                                <feMergeNode in=\"coloredBlur\"/>\n                                <feMergeNode in=\"SourceGraphic\"/>\n                            </feMerge>\n                        </filter>\n                    </defs>\n\n                    <g transform={`translate(${offset.x} ${offset.y})`}>\n                        { connections.map((cxn, index) => (\n                            <line className=\"connection\" key={index} {...cxn} />\n                        )) }\n\n                        { puzzleData.map(({ available, icon, slug, x, y }) => {\n                            if (x === undefined) { return null; }\n\n                            const className = `nav-icon ${available ? '' : 'inactive'}`;\n                            return (\n                                <Link to={slug} key={slug}>\n                                    <g className={className} transform={`translate(${x} ${y})`}>\n                                        <circle className=\"spotlight-outline\" cx=\"0\" cy=\"0\" r=\"52\" />\n                                        <circle className=\"spotlight\" cx=\"0\" cy=\"0\" r=\"48\" />\n                                        { icon }\n                                    </g>\n                                </Link>\n                            );\n                        }) }\n                    </g>\n                </svg>\n            </nav>\n\n            <svg id=\"shadow-ring\" viewBox=\"-128 -128 256 256\" preserveAspectRatio=\"xMidYMid slice\">\n                <defs>\n                    <filter id=\"shadow\">\n                        <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"15\" />\n                    </filter>\n                </defs>\n\n                <circle r=\"200\" stroke=\"black\" fill=\"none\" strokeWidth=\"240\" filter=\"url(#shadow)\"/>\n                <circle r=\"300\" stroke=\"black\" fill=\"none\" strokeWidth=\"240\" />\n            </svg>\n        </main>\n    );\n}\n\nexport default Graph;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport puzzleData from './Puzzles/allPuzzles';\nimport PuzzleMenu from './PuzzleNavigation/PuzzleMenu';\nimport PuzzleGraph from './PuzzleNavigation/PuzzleGraph';\n\nimport './base.css';\n\n\nexport default () =>\n    <Router>\n        <Switch>\n            { Object.values(puzzleData).map(({ slug, component }) =>\n                <Route key={slug} path={`/${ slug }`} component={component} />\n            )}\n            <Route path=\"/menu\" component={PuzzleMenu} />\n            <Route path=\"/\" component={PuzzleGraph} />\n        </Switch>\n    </Router>\n"],"sourceRoot":""}