{"version":3,"sources":["Icons/ColourGraphs.js","PuzzleMap.js","utils/graphUtils.js","Toolbars/Toolbar.js","Puzzles/BasePuzzle.js","Puzzles/PuzzleComponents/Graph.js","Puzzles/ColourGraphs.js","serviceWorker.js","index.js","App.js"],"names":["ColourGraphs","react_default","a","createElement","viewBox","className","cx","cy","r","x","y","width","height","fill","x1","y1","x2","y2","color","PuzzleMap","react_router_dom","to","getNodesOnCircle","colours","offset","n","Array","isArray","length","nodes","dAngle","Math","PI","angle","i","push","sin","cos","getLoopOfEdges","start","stop","undefined","edges","DELTA_ANGLE","Toolbar","_ref","puzzle","nColours","selectedColour","_loop","concat","key","onClick","setState","selectColourIndicator","COLOURS","Puzzle","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","colourPalette","children","React","Children","map","child","cloneElement","style","id","preserveAspectRatio","result","in","dx","dy","stdDeviation","in2","mode","Component","Graph","nodeColours","node","colour","clickNode","bind","assertThisInitialized","newNodeColours","slice","_this$props","edge","puzzles","ColourGraphPuzzle","index","match","params","graph","scale","arguments","radius","nodeObjects","_ref2","slicedToArray","edgeObjects","_ref3","_ref4","n1","n2","node1","node2","getGraphObject","BasePuzzle_Puzzle","Graph_Graph","Boolean","window","location","hostname","ReactDOM","render","react_router","path","exact","component","ColourGraph","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c92fcb96.chunk.js","sourcesContent":["import React from 'react';\n\nexport default () => <svg viewBox=\"-50 -50 100 100\">\n    <circle className=\"spotlight\" cx=\"0\" cy=\"0\" r=\"49\" />\n    <g className=\"graph-edges\">\n        <rect x=\"-20\" y=\"-20\" width=\"40\" height=\"40\" fill=\"none\" />\n        <line x1=\"-20\" y1=\"-20\" x2=\"20\" y2=\"20\" />\n        <line x1=\"-20\" y1=\"20\" x2=\"20\" y2=\"-20\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle color=\"rgb(20, 146, 196)\" cx=\"-20\" cy=\"-20\" r=\"8\" />\n        <circle color=\"rgb(196, 20, 96)\" cx=\"-20\" cy=\"20\" r=\"8\" />\n        <circle color=\"rgb(20, 146, 196)\" cx=\"20\" cy=\"20\" r=\"8\" />\n        <circle color=\"rgb(196, 20, 96)\" cx=\"20\" cy=\"-20\" r=\"8\" />\n        <circle color=\"rgb(147, 20, 198)\" cx=\"0\" cy=\"0\" r=\"8\" />\n    </g>\n</svg>","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nimport ColourGraphIcon from './Icons/ColourGraphs';\nimport './puzzleMap.css';\n\n\nexport default () =>\n    <main className=\"front-page\">\n        <nav className=\"puzzle-map\">\n            <div className=\"map-link\">\n                <Link to=\"/colour-graphs\"><ColourGraphIcon/></Link>\n            </div>\n        </nav>\n    </main>\n","export function getGraphObject(nodes, edges, scale=32, radius=8) {\n    const nodeObjects = nodes.map(([x, y]) => ({\n        x: x * scale,\n        y: y * scale,\n        r: radius\n    }));\n\n    const edgeObjects = edges.map(([n1, n2]) => {\n        const node1 = nodeObjects[n1];\n        const node2 = nodeObjects[n2];\n        return {\n            node1,\n            node2,\n            x1: node1.x,\n            y1: node1.y,\n            x2: node2.x,\n            y2: node2.y\n        };\n    });\n\n    return {\n        nodes: nodeObjects,\n        edges: edgeObjects\n    }\n}\n\nexport function getNodesOnCircle(colours, r, offset) {\n    var n;\n    if (Array.isArray(colours)) {\n        n = colours.length;\n    } else {\n        n = colours;\n        colours = new Array(n);\n    }\n\n    var nodes = [];\n    var dAngle = 2 * Math.PI / n;\n    var angle = (offset || 0) - 0.5 * dAngle;\n    r = r || 1\n\n    for (var i = 0; i < n; i++) {\n        nodes.push([\n            r * Math.sin(angle),\n            r * Math.cos(angle),\n            colours[i]\n        ]);\n        angle += dAngle;\n    }\n\n    return nodes;\n}\n\nexport function getLoopOfEdges(start, stop) {\n    if (stop === undefined) {\n        stop = start - 1;\n        start = 0;\n    }\n\n    var edges = [];\n    for (var i = start; i < stop; i++) {\n        edges.push([i, i + 1]);\n    }\n    edges.push([start, stop]);\n    return edges;\n}\n","import React from 'react';\n\n\nconst TOOLBAR_R = 112;\nconst DELTA_ANGLE = Math.PI / 16;\n\nexport default function ({ puzzle, nColours, selectedColour }) {\n    const r = 6;\n    let angle = Math.PI - DELTA_ANGLE * (nColours - 1) / 2;\n\n    const colours = [];\n    for (let i = 1; i <= nColours; i++) {\n        const cx = (TOOLBAR_R + r) * Math.cos(angle);\n        const cy = (TOOLBAR_R + r) * Math.sin(angle);\n        let className = `colour-palette colour-${i}`;\n        if (selectedColour === i) {\n            className += ' selected';\n        }\n\n        colours.push(\n            <circle\n                className={className}\n                key={i}\n                cx={cx}\n                cy={cy}\n                r={r}\n                onClick={() => puzzle.setState({ selectedColour: i})}\n            />\n        );\n\n        angle += DELTA_ANGLE;\n    }\n\n    let selectColourIndicator = \"selected-colour-indicator\";\n    if (selectedColour) {\n        selectColourIndicator += ` colour-${selectedColour}`;\n    }\n\n    return <g className=\"toolbar\">\n        <circle className={selectColourIndicator} r=\"109\" />\n        <g className=\"colour-pallete\">\n            { colours }\n        </g>\n    </g>;\n}\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport Toolbar from '../Toolbars/Toolbar';\n\nimport './puzzle.css';\n\n\nconst COLOURS = [\n    'rgb(30, 20, 20)',\n    'rgb(20, 146, 196)',\n    'rgb(196, 20, 96)',\n    'rgb(147, 20, 198)',\n    'rgb(20, 198, 96)',\n];\n\nexport default class Puzzle extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedColour: null\n        }\n    }\n\n    render() {\n        const colourPalette = this.props.colourPalette;\n\n        //  Pass selected colour to children\n        const children = React.Children.map(this.props.children, child =>\n            React.cloneElement(child, { selectedColour: this.state.selectedColour })\n        );\n\n        const style = this.state.selectedColour ? { color: COLOURS[this.state.selectedColour] } : {};\n        const className = this.state.selectedColour ? \"colour-selected\" : \"\";\n\n        return <main>\n            <Link to=\"/\" className=\"menu-button\">\n                <svg viewBox=\"-10 -10 20 20\">\n                    <circle r=\"9\" />\n                </svg>\n            </Link>\n\n            <svg id=\"puzzle-chamber\" viewBox=\"-128 -128 256 256\" preserveAspectRatio=\"xMidYMid slice\">\n                <defs>\n                    <filter id=\"shadow-filter\" x=\"0\" y=\"0\" width=\"120%\" height=\"120%\">\n                        <feOffset result=\"offOut\" in=\"SourceAlpha\" dx=\"2\" dy=\"2\"/>\n                        <feGaussianBlur result=\"blurOut\" in=\"offOut\" stdDeviation=\"5\" />\n                        <feBlend in=\"SourceGraphic\" in2=\"blurOut\" mode=\"normal\" />\n                    </filter>\n                </defs>\n\n                <g id=\"puzzle\" className={className} style={style}>{ children }</g>\n\n                <circle id=\"chamber-window\" r=\"145\" />\n                <Toolbar \n                    puzzle={this}\n                    nColours={colourPalette}\n                    selectedColour={this.state.selectedColour}\n                />\n            </svg>\n        </main>\n    }\n};\n","import React from 'react';\n\nimport './graph.css';\n\n\nexport default class Graph extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            nodeColours: props.nodes.map(node => node.colour)\n        };\n\n        this.clickNode = this.clickNode.bind(this);\n    }\n\n    clickNode(i, colour) {\n        const newNodeColours = this.state.nodeColours.slice();\n        newNodeColours[i] = colour;\n\n        this.setState({\n            nodeColours: newNodeColours\n        });\n    }\n\n    render() {\n        const { nodes, edges, selectedColour } = this.props;\n\n        return <g className=\"graph\">\n            <g className=\"graph-edges\">\n                { edges.map((edge, i) =>\n                    <g>\n                        <line\n                            className=\"edge-outline\"\n                            key={i}\n                            x1={edge.x1}\n                            y1={edge.y1}\n                            x2={edge.x2}\n                            y2={edge.y2}\n                        />\n                        <line\n                            key={i}\n                            x1={edge.x1}\n                            y1={edge.y1}\n                            x2={edge.x2}\n                            y2={edge.y2}\n                        />\n                    </g>\n                )}\n            </g>\n\n            <g className=\"graph-nodes\">\n                { nodes.map((node, i) => {\n                    let className = \"colourable \";\n                    if (this.state.nodeColours[i]) {\n                        className += `fill-${this.state.nodeColours[i]}`;\n                    } else {\n                        className += \"empty-region\";\n                    }\n\n                    return <circle\n                        key={i}\n                        className={className}\n                        cx={node.x}\n                        cy={node.y}\n                        r={node.r}\n                        onClick={() => this.clickNode(i, selectedColour)}\n                    />\n                })}\n            </g>\n        </g>\n    }\n};\n","import React from 'react';\nimport { getNodesOnCircle, getLoopOfEdges, getGraphObject } from '../utils/graphUtils';\n\nimport Puzzle from './BasePuzzle';\nimport Graph from './PuzzleComponents/Graph';\n\n\nconst puzzles = [\n\t/*{\n\t\t// colourPalette: 1,\n\t\t// nodes: [[0, 0]]\n\t},*/{\n\t// \tcolourPalette: 2,\n\t// \tnodes: [[-1, 0], [1, 0]],\n\t// \tedges: [[0, 1]],\n\t// }, {\n\t// \tcolourPalette: 2,\n\t// \tnodes: [[-2, 0], [0, 0], [2, 0]],\n\t// \tedges: [[0, 1], [1, 2]],\n\t// }, {\n\t// \tcolourPalette: 3,\n\t// \tnodes: getNodesOnCircle(3),\n\t// \tedges: getLoopOfEdges(3),\n\t// }, {\n\t// \tcolourPalette: 2,\n\t// \tnodes: getNodesOnCircle(4),\n\t// \tedges: getLoopOfEdges(4),\n\t// }, {\n\t// \tcolourPalette: 3,\n\t// \tnodes: getNodesOnCircle(4),\n\t// \tedges: getLoopOfEdges(4).concat([[1, 3]]),\n\t// }, {\n\t\tcolourPalette: 4,\n\t\tnodes: getNodesOnCircle(4),\n\t\tedges: getLoopOfEdges(4).concat([[1, 3], [0, 2]]),\n\t}, {\n\t\tcolourPalette: 3,\n\t\tnodes: [[0, 0]].concat(getNodesOnCircle(4)),\n\t\tedges: getLoopOfEdges(1, 4).concat([[0, 1], [0, 2], [0, 3], [0, 4]]),\n\t}\n];\n\nclass ColourGraphPuzzle extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tindex: props.match.params.n || 0\n\t\t};\n\t}\n\n\trender() {\n\t\tconst puzzle = puzzles[this.state.index];\n\t\tconst graph = getGraphObject(puzzle.nodes, puzzle.edges, 32);\n\n\t\treturn <Puzzle colourPalette={puzzle.colourPalette}>\n\t\t\t<Graph {...graph} />\n\t\t</Puzzle>\n\t}\n}\n\nexport default ColourGraphPuzzle;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport PuzzleMap from './PuzzleMap';\nimport ColourGraph from './Puzzles/ColourGraphs';\n\nimport './base.css';\nimport './puzzle.css';\nimport './Icons/icons.css';\n\n\nexport default () =>\n    <Router>\n        <Route path=\"/\" exact component={PuzzleMap} />\n        <Route path=\"/colour-graphs\" component={ColourGraph} />\n    </Router>\n"],"sourceRoot":""}