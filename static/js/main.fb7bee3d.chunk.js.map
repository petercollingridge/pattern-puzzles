{"version":3,"sources":["PuzzleMap/Icons/ColourGraphs.js","utils/common.js","Toolbars/Button.js","Toolbars/Toolbar.js","Puzzles/PuzzlePage.js","Puzzles/PuzzleComponents/Primitives.js","Puzzles/PuzzleComponents/utils.js","Puzzles/PuzzleComponents/Graph.js","Puzzles/puzzleLoaders.js","utils/graphUtils.js","utils/evaluation.js","Puzzles/ColourGraphs.js","PuzzleMap/Icons/GraphTheory.js","Puzzles/GraphTheory.js","PuzzleMap/Icons/ColourMaps.js","Puzzles/PuzzleComponents/Map.js","Puzzles/ColourMaps.js","PuzzleMap/Icons/Transformations.js","Puzzles/Transformations.js","PuzzleMap/Icons/Sequences.js","Puzzles/PuzzleComponents/Sequence.js","Puzzles/Sequences.js","PuzzleMap/Icons/Categorisation.js","Puzzles/PuzzleComponents/Categories.js","Puzzles/Categorisation.js","puzzleData.js","PuzzleMap/Icons/Icon.js","PuzzleMap/PuzzleMap.js","serviceWorker.js","index.js","App.js"],"names":["ColourGraphs","react_default","a","createElement","className","x","y","width","height","fill","x1","y1","x2","y2","cx","cy","r","d","handleKeyDown","evt","callback","key","keyCode","SVGButton","props","Object","assign","role","tabIndex","onKeyDown","onClick","Button","viewBox","Button_SVGButton","DELTA_ANGLE","Math","PI","Toolbar","_ref","puzzle","nColours","clearPuzzle","selectedColour","nButtons","angle","position","Array","map","_","i","TOOLBAR_R","cos","sin","buttons","_loop","_position","concat","push","aria-checked","setState","_position$pop","pop","color","selectColourIndicator","COLOURS","PuzzlePage","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","queryString","parse","location","search","index","parseInt","q","state","solved","clear","bind","assertThisInitialized","update","getPuzzle","nextPuzzle","backToMenu","_this$props","getPuzzleObject","puzzles","clearButton","colourPalette","nextState","history","_this$props2","evaluate","length","aria-label","Button_Button","_this$state","style","getNextPuzzleButton","id","preserveAspectRatio","result","in","dx","dy","stdDeviation","in2","mode","operator","radius","displayPuzzle","React","Component","withRouter","Line","isColourable","item","colourItem","arguments","undefined","colour","fixed","colourThisItem","Graph","_ref$edges","edges","_ref$nodes","nodes","colourNode","edge","Primitives_Line","active","node","transform","updateNodeColour","ColourableGraph","Graph_Graph","nodeIndex","targetNode","ColourablePath","graph","previousNode","path","slice","forEach","getGraphObject","_ref$size","size","_ref$r","nodeObjects","_ref2","_ref3","slicedToArray","nodeColour","Boolean","edgeObjects","_ref4","_ref5","n1","n2","node1","node2","getGraphWithPath","getGraphAndUncolouredCopy","_ref6","_ref6$nodes","_ref6$edges","_ref6$size","_ref6$r","target","blank","_ref7","_ref8","getMapObject","_ref9","_ref9$regions","regions","_ref9$connections","connections","_ref9$size","regionObjects","_ref10","_ref11","connectionObjects","_ref12","_ref13","getSequenceObject","_ref14","pattern","answer","sequence","n","getGraphSequence","_ref15","graphs","answerGraph","blankGraph","getCategoryObjects","_ref16","categories","randomRotate","categoryObjects","category","copies","type","object","rotate","floor","random","arr","j","temp","shuffle","getArray","isArray","from","getPointsOnACircle","_ref$offsetAngle","offsetAngle","_ref$dx","_ref$dy","points","dAngle","getNodesOnCircle","colours","_ref2$r","_ref2$offsetAngle","_ref2$dx","_ref2$dy","getLineOfEdges","start","stop","getLoopOfEdges","max","linearGraph","scale","startX","loopGraph","getRegularPolygonGraph","triangleGraph","squareGraph","allItemsHaveValue","items","attr","every","allItemsColoured","allConnectedItemsHaveDifferentColours","filter","cxn","graphIsChromatic","sequencesMatch","seq1","seq2","sequencesAreEquivalent","mapping1","Map","mapping2","value1","get","value2","set","graphNodesAreSameColour","samePatternButDifferent","min","sequenceHasNoMatches","Icons_GraphTheory","R3","sqrt","ColourMaps","rx","ry","_ref$regions","ColourableMap","Map_Map","Transformations","Fragment","href","identity1","reflection1","rotation1","colour1","Transformation","Puzzles_PuzzlePage","Transformations_Transformation","Icons_Sequences","Sequence","_ref$sequence","GraphSequence","t1","t2","t112","t221","t121","t211","t123","t231","t312","s1122","s2211","s2112","s1221","s1212","s2121","correctSequence","correctGraphSequence","ColourableSequence","Sequence_Sequence","Icons_Categorisation","Categories","colourCategory","_getCirclePackedInCir","R","phi","cPhi","categorySize","categoryPositions","getCirclePackedInCircle","component","puzzle1","puzzle2","puzzle3","triangleWithCenter","lowTriangle","rectangle","displayCategories","Categories_Categories","Categorisation","puzzleData","categorisation-0","slug","icon","CategorisationIcons","categorisation-1","categorisation-2","categorisation-3","graph-theory-0","GraphTheoryIcons","addData","name","icons","components","getData","ColourGraphIcons","ColourMapIcons","TransformationIcons","SequencesIcons","puzzleLayout","Icon","children","PuzzleMap","section","react_router_dom","to","window","hostname","match","ReactDOM","render","react_router","values","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb7bee3d.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst ColourGraphIcon1 = () => <g>\n    <g className=\"graph-edges\">\n        <rect x=\"-20\" y=\"-20\" width=\"40\" height=\"40\" fill=\"none\" />\n        <line x1=\"-20\" y1=\"-20\" x2=\"20\" y2=\"20\" />\n        <line x1=\"-20\" y1=\"20\" x2=\"20\" y2=\"-20\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-20\" cy=\"-20\" r=\"8\" />\n        <circle className=\"colour-2\" cx=\"-20\" cy=\"20\" r=\"8\" />\n        <circle className=\"colour-1\" cx=\"20\" cy=\"20\" r=\"8\" />\n        <circle className=\"colour-2\" cx=\"20\" cy=\"-20\" r=\"8\" />\n        <circle className=\"colour-3\" cx=\"0\" cy=\"0\" r=\"8\" />\n    </g>\n</g>\n\nconst ColourGraphIcon2 = () => <g>\n    <g className=\"graph-edges\">\n        <rect x=\"-32\" y=\"-16\" width=\"64\" height=\"32\" />\n        <line x1=\"0\" y1=\"-16\" x2=\"0\" y2=\"16\" />\n        <line x1=\"-32\" y1=\"-16\" x2=\"0\" y2=\"16\" />\n        <line x1=\"32\" y1=\"-16\" x2=\"0\" y2=\"16\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-32\" cy=\"-16\" r=\"8\" />\n        <circle className=\"colour-2\" cx=\"0\" cy=\"-16\" r=\"8\" />\n        <circle className=\"colour-1\" cx=\"32\" cy=\"-16\" r=\"8\" />\n        <circle className=\"colour-2\" cx=\"32\" cy=\"16\" r=\"8\" />\n        <circle className=\"colour-3\" cx=\"0\" cy=\"16\" r=\"8\" />\n        <circle className=\"colour-2\" cx=\"-32\" cy=\"16\" r=\"8\" />\n    </g>\n</g>\n\nconst ColourGraphIcon3 = () => <g>\n    <g className=\"graph-edges\">\n        <path d=\"M32 0L16 27.7h-32L-32 0 -16 -27.71h32z\" />\n        <line x1=\"16\" y1=\"-27.71\" x2=\"16\" y2=\"27.71\" />\n        <line x1=\"-16\" y1=\"-27.71\" x2=\"-16\" y2=\"27.71\" />\n        <line className=\"edge-outline\" x1=\"-32\" y1=\"0\" x2=\"32\" y2=\"0\" />\n        <line x1=\"-32\" y1=\"0\" x2=\"32\" y2=\"0\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"32\" cy=\"0\" r=\"8\" />\n        <circle className=\"colour-2\" cx=\"16\" cy=\"27.71\" r=\"8\" />\n        <circle className=\"colour-3\" cx=\"-16\" cy=\"27.71\" r=\"8\" />\n        <circle className=\"colour-2\" cx=\"-32\" cy=\"0\" r=\"8\" />\n        <circle className=\"colour-1\" cx=\"-16\" cy=\"-27.71\" r=\"8\" />\n        <circle className=\"colour-3\" cx=\"16\" cy=\"-27.71\" r=\"8\" />\n    </g>\n</g>\n\nexport default [ColourGraphIcon1, ColourGraphIcon2, ColourGraphIcon3];\n","export function shuffle(arr) {\n    for (let i = arr.length; i--; ) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    return arr;\n}\n\n// Click enter or space triggers a given callback\nexport const handleKeyDown = (evt, callback) => {\n    if (evt.key === 'Enter' || evt.keyCode === 32) {\n        callback();\n    }\n};\n","import React from 'react';\nimport { handleKeyDown } from '../utils/common';\n\n\nexport const SVGButton = (props) =>\n    <circle\n        r=\"9\"\n        role=\"button\"\n        tabIndex=\"0\"\n        onKeyDown={evt => handleKeyDown(evt, props.onClick)}\n        {...props} />\n\n\nexport const Button = (props) =>\n    <svg viewBox=\"-15 -15 31 31\">\n        <SVGButton r=\"9\" {...props} />\n    </svg>\n","import React from 'react';\nimport { SVGButton } from './Button';\n\n\nconst TOOLBAR_R = 136;\nconst DELTA_ANGLE = Math.PI / 18;\n\nexport default function ({\n    puzzle,\n    nColours,\n    clearPuzzle,\n    selectedColour\n}) {\n    const r = 8;\n    const positionR = TOOLBAR_R + r;\n    const nButtons = nColours + (clearPuzzle ? 1 : 0);\n    let angle = Math.PI - DELTA_ANGLE * (nButtons - 1) / 2;\n\n    // Array of button positions\n    const position = Array(nButtons)\n        .fill()\n        .map((_, i) => ({\n            x: positionR * Math.cos(angle + i * DELTA_ANGLE),\n            y: positionR * Math.sin(angle + i * DELTA_ANGLE)\n        }));\n\n    const buttons = [];\n    for (let i = 1; i <= nColours; i++) {\n        const { x, y } = position[i - 1];\n        const setColour = () => puzzle.setState({ selectedColour: i });\n\n        let className = `colour-palette colour-${i}`;\n        if (selectedColour === i) {\n            className += ' selected';\n        }\n\n        buttons.push(\n            <SVGButton\n                className={className}\n                role=\"radio\"\n                aria-checked={selectedColour === i}\n                key={i}\n                cx={x}\n                cy={y}\n                r={r}\n                onClick={setColour}\n            />\n        );\n    }\n\n    if (clearPuzzle) {\n        const { x, y } = position.pop();\n        buttons.push(<SVGButton\n            className=\"colour-palette\"\n            color=\"white\"\n            key=\"clear-button\"\n            cx={x}\n            cy={y}\n            r={r}\n            onClick={clearPuzzle}\n        />);\n    }\n\n    let selectColourIndicator = \"selected-colour-indicator\";\n    if (selectedColour) {\n        selectColourIndicator += ` colour-${selectedColour}`;\n    }\n\n    return <g className=\"toolbar\">\n        <circle className={selectColourIndicator} r=\"132\" />\n        <g className=\"colour-palette\" role=\"radiogroup\">\n            { buttons }\n        </g>\n    </g>;\n}\n","import React from 'react';\nimport { withRouter } from 'react-router';\nimport { parse } from 'query-string';\n\nimport Toolbar from '../Toolbars/Toolbar';\nimport { Button } from '../Toolbars/Button';\n\nimport './puzzle.css';\nimport './puzzleChamber.css';\n\n\nconst COLOURS = [\n    'rgb(170, 170, 170)',\n    'rgb(20, 146, 196)',\n    'rgb(196, 20, 96)',\n    'rgb(20, 198, 96)',\n    'rgb(220, 220, 20)',\n];\n\nclass PuzzlePage extends React.Component {\n    constructor(props) {\n        super(props);\n   \n        const queryString = parse(props.location.search);\n        const index = parseInt(queryString.q) || 0;\n\n        this.state = {\n            index,\n\t\t\tsolved: false,\n            selectedColour: null,\n        }\n\n        this.clear = this.clear.bind(this);\n        this.update = this.update.bind(this);\n        this.getPuzzle = this.getPuzzle.bind(this);\n        this.nextPuzzle = this.nextPuzzle.bind(this);\n        this.backToMenu = this.backToMenu.bind(this);\n    }\n\n    componentDidMount() {\n        // Load the first puzzle\n        this.getPuzzle(this.state.index);\n    }\n\n    getPuzzle(index) {\n        const { getPuzzleObject, puzzles } = this.props;\n        const puzzle = puzzles[index];\n\n        if (puzzle) {\n            this.setState({\n                puzzle: getPuzzleObject(puzzle),\n                clearButton: puzzle.clearButton,\n                colourPalette: puzzle.colourPalette,\n            });\n        }\n    }\n\n    nextPuzzle() {\n        const nextState = this.state.index + 1;\n        this.setState({\n            index: nextState,\n            solved: false,\n            selectedColour: null\n        });\n        this.getPuzzle(nextState);\n    }\n\n    backToMenu() {\n        this.props.history.push(\"/\")\n    }\n\n    clear() {\n        const { getPuzzleObject, puzzles } = this.props;\n        const puzzle = puzzles[this.state.index];\n\n        this.setState({\n            puzzle: getPuzzleObject(puzzle)\n        });\n    }\n\n    // Child element has updated so evaluate to see if puzzle has been solved\n    update(puzzle) {\n        const solved = this.props.evaluate(puzzle);\n        this.setState({ puzzle, solved });\n    }\n\n    getNextPuzzleButton() {\n        // Only show button if the puzzle has been solved\n        if (!this.state.solved) { return null; }\n\n        if (this.state.index < this.props.puzzles.length - 1) {\n            // Button to go to the next puzzle\n            return <div className=\"menu-button next-puzzle-button\" aria-label=\"Next puzzle\">\n                <Button onClick={this.nextPuzzle}/>\n            </div>\n        } else {\n            // Button to go back to the home page\n            return <div className=\"menu-button next-puzzle-button\" aria-label=\"Puzzle completed\" role=\"link\">\n                <Button onClick={this.backToMenu}/>\n            </div>\n        }\n    }\n\n    render() {\n        const { index, puzzle, selectedColour } = this.state;\n        if (!puzzle) { return null; }\n\n        const colourPalette = this.state.colourPalette || this.props.colourPalette;\n        const clearPuzzle = (this.state.clearButton || this.props.clearButton) ? this.clear : null;\n\n        // Determine what the selected colour is if we have selected one\n        const style = {\n            color: COLOURS[selectedColour || 0]\n        };\n        const className = selectedColour ? \"colour-selected\" : \"\";\n\n        return <main>\n            <nav>\n                <div className=\"menu-button back-button\" aria-label=\"Back to menu\" role=\"link\">\n                    <Button onClick={this.backToMenu}/>\n                </div>\n\n                { this.getNextPuzzleButton() }\n            </nav>\n\n            <svg id=\"puzzle-chamber\" viewBox=\"-128 -128 256 256\" preserveAspectRatio=\"xMidYMid meet\">\n                <defs>\n                    <filter id=\"shadow-filter\">\n                        <feOffset result=\"offOut\" in=\"SourceAlpha\" dx=\"2\" dy=\"2\"/>\n                        <feGaussianBlur result=\"blurOut\" in=\"offOut\" stdDeviation=\"5\" />\n                        <feBlend in=\"SourceGraphic\" in2=\"blurOut\" mode=\"normal\" />\n                    </filter>\n                    <filter id=\"glow-filter\" x=\"-250%\" y=\"-250%\" width=\"500%\" height=\"500%\">\n                        <feMorphology in=\"mask\" result=\"dilated\" operator=\"dilate\" radius=\"1\" />\n                        <feGaussianBlur stdDeviation=\"3\" result=\"colouredBlur\" />\n                        <feMerge>\n                            <feMergeNode in=\"coloredBlur\"/>\n                            <feMergeNode in=\"SourceGraphic\"/>\n                        </feMerge>\n                    </filter>\n                </defs>\n\n                <rect className=\"background\" x=\"-200\" y=\"-200\" width=\"400\" height=\"400\" />\n\n                <g id=\"puzzle\" key={index} className={className} style={style}>\n                    { this.props.displayPuzzle(puzzle, selectedColour, this.update) }\n                </g>\n\n                <circle id=\"chamber-window\" r=\"212\" />\n                <Toolbar \n                    puzzle={this}\n                    nColours={colourPalette}\n                    clearPuzzle={clearPuzzle}\n                    selectedColour={selectedColour}\n                />\n            </svg>\n        </main>\n    }\n};\n\nexport default withRouter(PuzzlePage);\n","import React from 'react';\n\n\nexport const Line = ({ className, x1, y1, x2, y2 }) =>\n    <line className={className} x1={x1} y1={y1} x2={x2} y2={y2} />\n","import { handleKeyDown } from '../../utils/common';\n\n\n// Given a node, return props to make it colourable\nexport function isColourable(item, i, colourItem, className=\"\") {\n    if (item.colour) {\n        className += ` fill-${item.colour}`;\n    } else {\n        className += \" no-fill\";\n    }\n\n    if (item.fixed || !colourItem) {\n        return { className };\n    }\n\n    className += \" colourable\";\n\n    const colourThisItem = () => colourItem(i);\n\n    return {\n        className,\n        tabIndex: 0,\n        onClick: colourThisItem,\n        onKeyDown: (evt) => handleKeyDown(evt, colourThisItem)\n    };\n}\n","import React from 'react';\nimport { Line } from './Primitives';\nimport { isColourable } from './utils';\n\n\nexport const Graph = ({ edges=[], nodes=[], colourNode }) =>\n    <g className=\"graph\">\n        <g className=\"graph-edges\">\n            { edges.map((edge, i) =>\n                <g key={i}>\n                    <Line className=\"edge-outline\" {...edge} />\n                    <Line className={edge.active ? `stroke-${ edge.active }`: null} {...edge} />\n                </g>\n            )}\n        </g>\n\n        <g className=\"graph-nodes\">\n            { nodes.map((node, i) => \n                <g key={i} transform={`translate(${ node.x } ${ node.y })`}>\n                    <circle className=\"node-outline\" r={node.r} />\n                    <circle r={node.r} {...isColourable(node, i, colourNode)} />\n                </g>\n            )}\n        </g>\n    </g>\n\n// Colour node with the given colour, unless it already is that colour, in which remove\nconst updateNodeColour = (node, colour) => {\n    if (node.colour !== colour) {\n        node.colour = colour;\n    } else if (!node.fixed) {\n        node.colour = 0;\n    }\n}\n\n// <puzzle> is an object representing the puzzle and what the update function uses to determine\n//  whether the puzzle has been solved\n// <selectedColour> is colour currently select by the user, so what a node will be coloured when clicked\n// <update> is the puzzle's update function which allows the puzzle's state to be updated and then evaluated\nexport const ColourableGraph = (puzzle, colour, update) => {\n    // Function that takes a node index, to colour the node in a graph, and update it\n    const colourNode = nodeIndex => {\n        const targetNode = puzzle.nodes[nodeIndex];\n        updateNodeColour(targetNode, colour);\n        update(puzzle);\n    };\n\n    return <Graph {...puzzle} colourNode={colourNode} />\n};\n\n// Same as a colourable graph, except you can only colour points next to the one you last coloured\n// TODO: need to remember path, in case have to undo it\nexport const ColourablePath = (graph, colour, update) => {\n    // Function that takes a node index, to colour the node in a graph, and update it\n    const colourNode = nodeIndex => {\n        if (!colour) { return; }\n\n        let targetNode = graph.nodes[nodeIndex];\n        updateNodeColour(targetNode, colour);\n\n        if (targetNode.colour) {\n            // Colour the edge of the path\n            const previousNode = graph.path.slice(-1)[0];\n            if (previousNode) {\n                previousNode.edges[nodeIndex].active = colour;\n            }\n            // Add new node to the path\n            graph.path.push(targetNode);\n        } else {\n            // Remove the node we clicked on\n            graph.path.pop();\n            const previousNode = graph.path.slice(-1)[0];\n            if (previousNode) {\n                previousNode.fixed = false;\n                previousNode.edges[nodeIndex].active = false;\n            }\n            // The active node is now the previous node in the path\n            targetNode = previousNode;\n        }\n\n        // Update nodes\n        if (targetNode) {\n            for (let i = 0; i < graph.nodes.length; i++) {\n                const node = graph.nodes[i];\n                if (node === targetNode) { continue; }\n                \n                // Nodes  connected to the targetNode are open, the others are fixed\n                if (!node.colour) {\n                    if (node.edges[targetNode.index]) {\n                        node.fixed = false;\n                    } else {\n                        node.fixed = true;\n                    }\n                }\n            }\n        } else {\n            // No nodes left in the path, so all nodes are active\n            graph.nodes.forEach(node => node.fixed = false);\n        }\n\n        update(graph);\n    };\n\n    return <Graph {...graph} colourNode={colourNode} />\n};","/***\n * These functions take the raw puzzle data and return an object that can used to\n * display the puzzle and determine when the correct answer is found\n***/\n\nimport { shuffle } from '../utils/common';\n\n// Given arrays of node coordinates and edge coordinates, return an object of nodes and edges\nexport function getGraphObject({ nodes=[], edges=[], size=32, r=9, colour }) {\n    const nodeObjects = nodes.map(([x, y, nodeColour], index) => ({\n        r,\n        index,\n        x: x * size,\n        y: y * size,\n        colour: nodeColour || colour,\n        fixed: Boolean(nodeColour || colour),\n        edges: {}\n    }));\n\n    const edgeObjects = edges.map(([n1, n2]) => {\n        const node1 = nodeObjects[n1];\n        const node2 = nodeObjects[n2];\n        const edge = {\n            node1,\n            node2,\n            x1: node1.x,\n            y1: node1.y,\n            x2: node2.x,\n            y2: node2.y\n        };\n\n        // Edges map another node to the edge object\n        node1.edges[node2.index] = edge;\n        node2.edges[node1.index] = edge;\n\n        return edge;\n    });\n\n    return {\n        nodes: nodeObjects,\n        edges: edgeObjects\n    };\n}\n\n// A graph object with a path array to store an array of nodes forming a path\nexport function getGraphWithPath(props) {\n    const graph = getGraphObject(props);\n    graph.path = [];\n    return graph;\n}\n\n// Given arrays of node coordinates and edge coordinates, return two objects of nodes and edges,\n// one includes the node colours and one is empty\nexport function getGraphAndUncolouredCopy({ nodes=[], edges=[], size=32, r=8 }) {\n    const target = getGraphObject({ nodes, edges, size, r });\n\n    // Remove the colours from the nodes\n    const blankNodes = nodes.map(([x, y]) => [x, y]);\n    const blankGraph = getGraphObject({ nodes: blankNodes, edges, size, r });\n\n    return { target, blank: blankGraph };\n}\n\nexport function getMapObject({ regions=[], connections=[], size=1 }) {\n    const regionObjects = regions.map(([x, y, width, height]) => ({\n        x: (x - width / 2) * size,\n        y: (y - height / 2) * size,\n        width: width * size,\n        height: height * size,\n    }));\n\n    const connectionObjects = connections.map(([n1, n2]) => ({\n        node1: regionObjects[n1],\n        node2: regionObjects[n2],\n    }));\n\n    // Create a graph of the map in order to evaluate the solution\n    return {\n        regions: regionObjects,\n        connections: connectionObjects\n    };\n}\n\nexport function getSequenceObject({ pattern, answer }) {\n    //  Get a sequence of node objects\n    const sequence = pattern.map(colour => ({\n        colour,\n        fixed: colour > 0\n    }));\n\n    // Target sequence is the starting sequence with any 0s replaced by the answer items\n    let n = 0;\n    const target = pattern.map(colour => {\n        if (colour > 0) {\n            return { colour };\n        } else {\n            return { colour: answer[n++] };\n        }\n    });\n\n    return { sequence, target };\n}\n\nexport function getGraphSequence({ graphs, answer }) {\n    const sequence = [];\n    const target = [];\n\n    let n = 0;\n    graphs.forEach(graph => {\n        if (graph) {\n            sequence.push(getGraphObject(graph));\n            target.push(getGraphObject(graph));\n        } else {\n            // Target sequence is the starting sequence with any nulls replaced by the answer graphs\n            const answerGraph = getGraphObject(answer[n]);\n            target.push(answerGraph);\n            \n            // Displayed sequence show answer as a blank graph\n            const blankGraph = getGraphObject(answer[n]);\n            blankGraph.nodes.forEach(node => {\n                node.fixed = false;\n                node.colour = 0;\n            });\n\n            sequence.push(blankGraph);\n            target.push(answerGraph);\n            n++;\n        }\n    });\n\n    return { sequence, target };\n}\n\n// Return an array of category object which have a colour, and an object to display\nexport function getCategoryObjects({ categories, randomRotate }) {\n    const categoryObjects = [];\n    \n    categories.forEach(category => {\n        const copies = category.copies || 1;\n\n        for (let i = 0; i < copies; i++) {\n            categoryObjects.push({\n                category: category.type,\n                object: category.item,\n                rotate: randomRotate ? Math.floor(Math.random() * 12) * 30 : 0\n            });\n        }\n    });\n\n    return shuffle(categoryObjects);\n}\n","// If arr is not an array return an empty array with the length\nfunction getArray(arr) {\n    if (Array.isArray(arr)) {\n        return arr;\n    }\n    return Array.from({ length: arr });\n}\n\nexport function getPointsOnACircle(n, {r=1, offsetAngle=0, dx=0, dy=0}={}) {\n    const points = [];\n    const dAngle = 2 * Math.PI / n;\n    let angle = (offsetAngle * Math.PI / 180 || 0) - 0.5 * dAngle;\n\n    for (let i = 0; i < n; i++) {\n        points.push([\n            dx + r * Math.sin(angle),\n            dy + r * Math.cos(angle),\n        ]);\n        angle += dAngle;\n    }\n\n    return points;\n}\n\nexport function getNodesOnCircle(colours, {r=1, offsetAngle=0, dx=0, dy=0}={}) {\n    colours = getArray(colours);\n    const n = colours.length;\n    const points = getPointsOnACircle(n, { r, offsetAngle, dx, dy });\n\n    // Combine coordinates with colours\n    const nodes = points.map(([x, y], i) => [x, y, colours[i]]);\n\n    return nodes;\n}\n\nexport function getLineOfEdges(start, stop) {\n    if (stop === undefined) {\n        stop = start - 1;\n        start = 0;\n    }\n\n    var edges = [];\n    for (var i = start; i < stop; i++) {\n        edges.push([i, i + 1]);\n    }\n\n    return edges;\n}\n\nexport function getLoopOfEdges(start, stop) {\n    if (stop === undefined) {\n        stop = Math.max(0, start - 1);\n        start = 0;\n    }\n\n    const edges = getLineOfEdges(start, stop);\n    if (start !== stop) {\n        edges.push([stop, start]);\n    }\n\n    return edges;\n}\n\nexport function linearGraph(colours, scale=1) {\n    colours = getArray(colours);\n    const n = colours.length;\n    const startX = - (n - 1) * scale / 2;\n    const nodes = colours.map((colour, i) => [startX + i * scale, 0, colour])\n    const edges = getLineOfEdges(n);\n\n    return { nodes, edges };\n}\n\nexport function loopGraph(colours, scale=1) {\n    colours = getArray(colours);\n    const nodes = getNodesOnCircle(colours, { r: scale });\n    const edges = getLoopOfEdges(colours.length);\n\n    return { nodes, edges };\n}\n\nfunction getRegularPolygonGraph(size, colours, scale=1) {\n    // Can pass in a single colour to set all nodes to that colour\n    if (!Array.isArray(colours)) {\n        colours = Array.from({ length: size }).map(_ => colours);\n    }\n\n    return {\n        nodes: getNodesOnCircle(colours, { r: scale }),\n        edges: getLoopOfEdges(size)\n    };\n}\n\nexport function triangleGraph(colours, scale=1) {\n    return getRegularPolygonGraph(3, colours, scale);\n}\n\nexport function squareGraph(colours, scale=1) {\n    return getRegularPolygonGraph(4, colours, scale);\n}\n","// Test whether all items are bigger than 0 or have an attrubute with value bigger than 0\nexport const allItemsHaveValue = (items=[], attr) =>\n    attr ?\n        items.every(item => item[attr] > 0) :\n        items.every(item => item > 0);\n\nexport const allItemsColoured = (items=[]) => allItemsHaveValue(items, 'colour');\n\nexport const extractAttribute = (items=[], attr) => items.map(item => item[attr]);\n\nexport function allConnectedItemsHaveDifferentColours(cxns=[]) {\n    const failingCxns = cxns.filter(cxn => cxn.node1.colour === cxn.node2.colour);\n    return failingCxns.length === 0;\n}\n\nexport const graphIsChromatic = ({ nodes, edges }) => \n    allItemsHaveValue(nodes, 'colour') &&\n    allConnectedItemsHaveDifferentColours(edges);\n\nexport const sequencesMatch = (seq1, seq2, attr) => {\n    if (seq1.length !== seq2.length) { return false; }\n    for (let i = 0; i < seq1.length; i++) {\n        const value1 = attr ? seq1[i][attr] : seq1[i];\n        const value2 = attr ? seq2[i][attr] : seq2[i];\n        if (value1 !== value2) {\n            return false;\n        }\n    }\n    return true;\n};\n\nexport const sequenceHasNoMatches = (seq1, seq2) => {\n    const n = Math.min(seq1.length, seq2.length);\n\n    for (let i = 0; i < n; i++) {\n        if (seq1[i] === seq2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test whether there is a consistent mapping between the values in one array to the value the other\nexport const sequencesAreEquivalent = (seq1, seq2) => {\n    if (seq1.length !== seq2.length) { \n        return false;\n    }\n\n    const mapping1 = new Map();\n    const mapping2 = new Map();\n\n    for (let i = 0; i < seq1.length; i++) {\n        const value1 = mapping1.get(seq1[i]);\n        const value2 = mapping2.get(seq2[i]);\n\n        if (value1 === undefined) {\n            mapping1.set(seq1[i], seq2[i]);\n        } else if (value1 !== seq2[i]) {\n            return false;\n        }\n\n        if (value2 === undefined) {\n            mapping2.set(seq2[i], seq1[i]);\n        } else if (value2 !== seq1[i]) {\n            return false;\n        }\n        \n    }\n\n    return true;\n};\n\n// Test whether the nodes of two graphs are the same colour\nexport const graphNodesAreSameColour = ({ blank, target }) => \n    allItemsColoured(blank.nodes) &&\n    sequencesMatch(blank.nodes, target.nodes, 'colour');\n\n// Test whether the nodes of two graphs have the same pattern,\n// i.e. there is a consistent mapping from the colours in one graph to the colour in the target\nexport const graphNodesHaveSamePattern = ({ blank, target }) =>\n    allItemsColoured(blank.nodes) &&\n    sequencesAreEquivalent(blank.nodes, target.nodes);\n\nexport const samePatternButDifferent = (seq1, seq2) =>\n    allItemsHaveValue(seq1) &&\n    allItemsHaveValue(seq2) &&\n    sequenceHasNoMatches(seq1, seq2) &&\n    sequencesAreEquivalent(seq1, seq2);\n","/*\n * Colour all nodes on a graph such that no edges joins two nodes of the same colour.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from './PuzzlePage';\nimport { ColourableGraph } from './PuzzleComponents/Graph';\nimport { getGraphObject } from './puzzleLoaders';\nimport { getNodesOnCircle, getLoopOfEdges } from '../utils/graphUtils';\nimport { graphIsChromatic } from '../utils/evaluation';\n\n\nconst puzzles1 = [\n\t{\n\t\tcolourPalette: 1,\n\t\tnodes: [[0, 0]]\n\t}, {\n\t\tcolourPalette: 2,\n\t\tnodes: [[-1, 0], [1, 0]],\n\t\tedges: [[0, 1]],\n\t}, {\n\t\tcolourPalette: 2,\n\t\tnodes: [[-2, 0], [0, 0], [2, 0]],\n\t\tedges: [[0, 1], [1, 2]],\n\t}, {\n\t\tcolourPalette: 3,\n\t\tnodes: getNodesOnCircle(3),\n\t\tedges: getLoopOfEdges(3),\n\t}, {\n\t\tcolourPalette: 2,\n\t\tnodes: getNodesOnCircle(4),\n\t\tedges: getLoopOfEdges(4),\n\t}, {\n\t\tcolourPalette: 3,\n\t\tnodes: getNodesOnCircle(4),\n\t\tedges: getLoopOfEdges(4).concat([[1, 3]]),\n\t}, {\n\t\tcolourPalette: 4,\n\t\tnodes: getNodesOnCircle(4),\n\t\tedges: getLoopOfEdges(4).concat([[1, 3], [0, 2]]),\n\t}, {\n\t\tcolourPalette: 3,\n\t\tnodes: [[0, 0]].concat(getNodesOnCircle(4)),\n\t\tedges: getLoopOfEdges(1, 4).concat([[0, 1], [0, 2], [0, 3], [0, 4]]),\n\t}\n];\n\nconst puzzles2 = [\n    {\n        colourPalette: 2,\n        scale: 24,\n        nodes: [[-2, -1], [0, -1], [2, -1], [2, 1], [0, 1], [-2, 1]],\n        edges: getLoopOfEdges(6),\n    }, {\n        colourPalette: 2,\n        scale: 24,\n        nodes: [[-2, -1], [0, -1], [2, -1], [2, 1], [0, 1], [-2, 1]],\n        edges: getLoopOfEdges(6).concat([[1, 4]]),\n    }, {\n        colourPalette: 2,\n        scale: 24,\n        nodes: [[-2, -1], [0, -1], [2, -1], [2, 1], [0, 1], [-2, 1]],\n        edges: getLoopOfEdges(6).concat([[0, 3]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: [[-2, -1], [0, -1], [2, -1], [2, 1], [0, 1], [-2, 1]],\n        edges: getLoopOfEdges(6).concat([[0, 4]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: [[-2, -1], [0, -1], [2, -1], [2, 1], [0, 1], [-2, 1]],\n        edges: getLoopOfEdges(6).concat([[0, 4], [2, 4]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: [[-2, -1], [0, -1], [2, -1], [2, 1], [0, 1], [-2, 1]],\n        edges: getLoopOfEdges(6).concat([[0, 4], [1, 4], [2, 4]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: [[-2, -1], [0, -1], [2, -1], [2, 1], [0, 1], [-2, 1]],\n        edges: getLoopOfEdges(6).concat([[0, 4], [1, 4], [1, 3]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: getNodesOnCircle(3).concat(getNodesOnCircle(3, { r: 2, offsetAngle: 60 })),\n        edges: getLoopOfEdges(3).concat([[0, 3], [1, 3], [1, 4], [2, 4], [0, 5], [2, 5]]),\n    }, {\n        colourPalette: 3,\n        scale: 16,\n        nodes: getNodesOnCircle(3).concat(getNodesOnCircle(3, { r: 4, offsetAngle: 60 })),\n        edges: getLoopOfEdges(3)\n            .concat(getLoopOfEdges(3, 5))\n            .concat([[0, 3], [1, 3], [1, 4], [2, 4], [0, 5], [2, 5]]),\n    }\n];\n\n// TODO: Give more colourPalette than required\nconst puzzles3 = [\n    {\n        colourPalette: 2,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6),\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[2, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 2], [2, 4]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 2], [2, 4], [0, 4]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[1, 3], [0, 4], [2, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[2, 4], [1, 3], [0, 4], [1, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 3], [1, 4], [2, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 2], [1, 3], [2, 4], [3, 5], [4, 0], [5, 1]]),\n    }\n];\n\nconst puzzles = [puzzles1, puzzles2, puzzles3];\n\nexport const ColourGraph = (n) =>\n    <PuzzlePage\n        puzzles={puzzles[n]}\n        evaluate={graphIsChromatic}\n\t\tgetPuzzleObject={getGraphObject}\n\t\tdisplayPuzzle={ColourableGraph}\n    />\n","import React from 'react';\n\n\nconst GraphTheory1 = () => <g>\n    <g className=\"graph-edges\">\n        <line x1=\"-12\" y1=\"8\" x2=\"0\" y2=\"-12\" />\n        <line x1=\"-12\" y1=\"8\" x2=\"12\" y2=\"8\" />\n        <line x1=\"0\" y1=\"-12\" x2=\"12\" y2=\"8\" />\n\n        <line x1=\"-30\" y1=\"20\" x2=\"0\" y2=\"-32\" />\n        <line x1=\"-30\" y1=\"20\" x2=\"30\" y2=\"20\" />\n        <line x1=\"0\" y1=\"-32\" x2=\"30\" y2=\"20\" />\n\n        <line x1=\"0\" y1=\"-32\" x2=\"0\" y2=\"-12\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-12\" cy=\"8\" r=\"5\" />\n        <circle className=\"colour-1\" cx=\"0\" cy=\"-12\" r=\"5\" />\n        <circle className=\"colour-1\" cx=\"12\" cy=\"8\" r=\"5\" />\n\n        <circle className=\"colour-1\" cx=\"-30\" cy=\"20\" r=\"5\" />\n        <circle className=\"colour-1\" cx=\"0\" cy=\"-32\" r=\"5\" />\n        <circle className=\"colour-1\" cx=\"30\" cy=\"20\" r=\"5\" />\n    </g>\n</g>\n\nexport default [GraphTheory1];\n","/*\n * Construct a Hamiltonian path along a graph.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from './PuzzlePage';\nimport { getGraphWithPath } from './puzzleLoaders';\nimport { ColourablePath } from './PuzzleComponents/Graph';\n\nimport { allItemsColoured } from '../utils/evaluation';\nimport { getPointsOnACircle, getLoopOfEdges, getLineOfEdges } from '../utils/graphUtils';\n\n\nconst R3 = Math.sqrt(3);\nconst hamiltonianPath = [\n\t{\n        nodes: getPointsOnACircle(6),\n        edges: getLoopOfEdges(6)\n    }, {\n        nodes: getPointsOnACircle(6),\n        edges: getLoopOfEdges(6).concat([[1, 4]])\n    }, {\n        nodes: getPointsOnACircle(6),\n        edges: getLineOfEdges(6)\n    }, {\n        nodes: getPointsOnACircle(6),\n        edges: getLineOfEdges(6).concat([[2, 5]])\n    }, {\n        nodes: getPointsOnACircle(6),\n        edges: [[2, 3], [3, 4], [4, 5], [5, 0], [1, 4], [0, 3]]\n    }, {\n        nodes: getPointsOnACircle(3, { r: 0.75 })\n                .concat(getPointsOnACircle(3, { r: 2 })),\n        edges: getLoopOfEdges(3)\n                .concat(getLoopOfEdges(3, 5))\n                .concat([[2, 5]])\n    }, {\n        nodes: getPointsOnACircle(3, { r: 0.75 })\n                .concat(getPointsOnACircle(3, { r: 2 }))\n                .concat([[-R3, -2], [R3, -2]]),\n        edges: getLoopOfEdges(3)\n                .concat(getLoopOfEdges(3, 5))\n                .concat([[0, 3], [2, 5], [3, 6], [4, 7]])\n    }, {\n        nodes: getPointsOnACircle(3, { r: 0.75 })\n                .concat(getPointsOnACircle(3, { r: 2 }))\n                .concat([[-R3, -2], [R3, -2]]),\n        edges: getLoopOfEdges(3)\n                .concat(getLoopOfEdges(3, 5))\n                .concat([[2, 5], [3, 6], [4, 7], [5, 6], [5, 7]])\n    }\n];\n\nconst puzzles = [hamiltonianPath];\n\nexport const GraphTheory = (n) =>\n    <PuzzlePage\n        colourPalette={1}\n        clearButton\n        puzzles={puzzles[n]}\n        evaluate={({ nodes }) => allItemsColoured(nodes)}\n\t\tgetPuzzleObject={getGraphWithPath}\n\t\tdisplayPuzzle={ColourablePath}\n    />\n\n","import React from 'react';\n\n\nconst ColourMapIcon1 = () =>\n    <g className=\"graph-nodes\">\n        <rect className=\"colour-1\" x=\"-28\" y=\"-28\" width=\"28\" height=\"28\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"0\" y=\"-28\" width=\"28\" height=\"28\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"-28\" y=\"0\" width=\"28\" height=\"28\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"0\" y=\"0\" width=\"28\" height=\"28\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-3\" x=\"-12\" y=\"-12\" width=\"24\" height=\"24\" rx=\"2\" ry=\"2\" />\n    </g>\n\nconst ColourMapIcon2 = () =>\n    <g className=\"graph-nodes\">\n        <rect className=\"colour-1\" x=\"-30\" y=\"-30\" width=\"30\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"0\" y=\"-30\" width=\"30\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"-30\" y=\"-10\" width=\"20\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-3\" x=\"-10\" y=\"-10\" width=\"20\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"10\" y=\"-10\" width=\"20\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"-30\" y=\"10\" width=\"30\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"0\" y=\"10\" width=\"30\" height=\"20\" rx=\"2\" ry=\"2\" />\n    </g>\n\nexport default [ColourMapIcon1, ColourMapIcon2];\n","import React from 'react';\nimport { isColourable } from './utils';\n\n\nexport const Map = ({ regions=[], colourItem }) =>\n    <g className=\"graph\">\n        <g className=\"graph-nodes\">\n            { regions.map((item, i) =>\n                <rect\n                    key={i}\n                    x={item.x}\n                    y={item.y}\n                    width={item.width}\n                    height={item.height}\n                    rx=\"3\"\n                    ry=\"3\"\n                    {...isColourable(item, i, colourItem)}\n                />\n            )}\n        </g>\n    </g>\n","/*\n * Colour regions on a map such that no two touching regions have the same colour.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from './PuzzlePage';\nimport { Map } from './PuzzleComponents/Map';\nimport { getMapObject } from './puzzleLoaders';\nimport { allItemsColoured, allConnectedItemsHaveDifferentColours } from '../utils/evaluation';\n\n\nconst puzzles1 = [\n    {\n        colourPalette: 1,\n        regions: [[0, 0, 32, 32]]\n    }, {\n        colourPalette: 2,\n        regions: [[-16, 0, 32, 32], [16, 0, 32, 32]],\n        connections: [[0, 1]]\n    }, {\n        colourPalette: 2,\n        regions: [[-32, 0, 32, 32], [0, 0, 32, 32], [32, 0, 32, 32]],\n        connections: [[0, 1], [1, 2]]\n    }, {\n        colourPalette: 3,\n        regions: [[-16, 16, 32, 32], [16, 16, 32, 32], [0, -16, 64, 32]],\n        connections: [[0, 1], [1, 2], [0, 2]]\n    }, {\n        colourPalette: 2,\n        regions: [[-16, 16, 32, 32], [16, 16, 32, 32], [-16, -16, 32, 32], [16, -16, 32, 32]],\n        connections: [[0, 1], [2, 3], [0, 2], [1, 3]]\n    }, {\n        colourPalette: 3,\n        regions: [[-16, 16, 32, 32], [16, 16, 32, 32], [-16, -16, 32, 32], [16, -16, 32, 32], [0, 0, 28, 28]],\n        connections: [[0, 1], [2, 3], [0, 2], [1, 3], [0, 4], [1, 4], [2, 4], [3, 4]]\n    }, {\n        colourPalette: 3,\n        regions: [[0, 0, 72, 72], [-12, 12, 24, 24], [12, 12, 24, 24], [-12, -12, 24, 24], [12, -12, 24, 24], [0, 0, 24, 24]],\n        connections: [[1, 2], [3, 4], [1, 3], [2, 4], [0, 1], [0, 2], [0, 3], [0, 4], [5, 1], [5, 2], [5, 3], [5, 4]]\n    }, {\n        colourPalette: 4,\n        regions: [[-16, 16, 32, 32], [16, 16, 32, 32], [0, -16, 64, 32], [0, 0, 28, 28]],\n        connections: [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3]]\n    }\n];\n\nconst puzzles2 = [\n    {\n        colourPalette: 2,\n        regions: [[0, 0, 96, 96], [0, 0, 32, 32]],\n        connections: [[0, 1]]\n    }, {\n        colourPalette: 3,\n        regions: [[-24, 0, 48, 96], [24, 0, 48, 96], [0, 0, 32, 32]],\n        connections: [[0, 1], [1, 2], [0, 2]]\n    }, {\n        colourPalette: 4,\n        regions: [[0, -32, 96, 32], [-24, 16, 48, 64], [24, 16, 48, 64], [0, 0, 32, 32]],\n        connections: [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3]]\n    }, {\n        colourPalette: 3,\n        regions: [[-24, -24, 48, 48], [24, -24, 48, 48], [-24, 24, 48, 48], [24, 24, 48, 48], [0, 0, 32, 32]],\n        connections: [[0, 1], [2, 3], [0, 2], [1, 3], [0, 4], [1, 4], [2, 4], [3, 4]]\n    }, {\n        colourPalette: 3,\n        regions: [[-16, -32, 64, 32], [32, -16, 32, 64], [-32, 16, 32, 64], [16, 32, 64, 32], [0, 0, 32, 32]],\n        connections: [[0, 1], [2, 3], [0, 2], [1, 3], [0, 4], [1, 4], [2, 4], [3, 4]]\n    }, {\n        colourPalette: 2,\n        regions: [\n            [-32, -32, 32, 32], [0, -32, 32, 32], [32, -32, 32, 32],\n            [-32, 0, 32, 32], [0, 0, 32, 32], [32, 0, 32, 32],\n            [-32, 32, 32, 32], [0, 32, 32, 32], [32, 32, 32, 32]\n        ],\n        connections: [\n            [0, 1], [1, 2], [3, 4], [4, 5], [6, 7], [7, 8],\n            [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [5, 8]\n        ]\n    }\n];\n\nconst puzzles = [puzzles1, puzzles2];\n\nconst ColourableMap = (puzzle, selectedColour, update) => {\n    const colourItem = index => {\n        puzzle.regions[index].colour = selectedColour;\n        update(puzzle);\n    }\n\n    return <Map {...puzzle} colourItem={colourItem}/>\n};\n\nconst evaluate = ({ regions, connections }) => \n    allItemsColoured(regions) &&\n    allConnectedItemsHaveDifferentColours(connections);\n\nexport const ColourMap = (n) =>\n\t<PuzzlePage\n\t\tpuzzles={puzzles[n]}\n\t\tevaluate={evaluate}\n\t\tgetPuzzleObject={getMapObject}\n\t\tdisplayPuzzle={ColourableMap} />\n","import React from 'react';\n\n\nconst IdentityIcon1 = () => <React.Fragment>\n    <defs>\n        <g id=\"identity-1-puzzle\">\n            <g className=\"graph-edges\">\n                <line x1=\"-15\" y1=\"13\" x2=\"0\" y2=\"-13\" />\n                <line x1=\"-15\" y1=\"13\" x2=\"15\" y2=\"13\" />\n                <line x1=\"0\" y1=\"-13\" x2=\"15\" y2=\"13\" />\n            </g>\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-1\" cx=\"-15\" cy=\"13\" r=\"5\" />\n                <circle className=\"colour-2\" cx=\"0\" cy=\"-13\" r=\"5\" />\n                <circle className=\"colour-3\" cx=\"15\" cy=\"13\" r=\"5\" />\n            </g>\n        </g>\n    </defs>\n\n    <use href=\"#identity-1-puzzle\" transform=\"translate(-24, -4)\"/>\n    <use href=\"#identity-1-puzzle\" transform=\"translate(24, -4)\"/>\n    <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n</React.Fragment>\n\nconst ReflectionIcon1 = () => <React.Fragment>\n    <defs>\n        <g id=\"reflection-1-puzzle\">\n            <g className=\"graph-edges\">\n                <line x1=\"12\" y1=\"0\" x2=\"-11\" y2=\"-15\" />\n                <line x1=\"12\" y1=\"0\" x2=\"-11\" y2=\"15\" />\n                <line x1=\"-11\" y1=\"-15\" x2=\"-11\" y2=\"15\" />\n            </g>\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-2\" cx=\"12\" cy=\"0\" r=\"5\" />\n                <circle className=\"colour-1\" cx=\"-11\" cy=\"15\" r=\"5\" />\n                <circle className=\"colour-1\" cx=\"-11\" cy=\"-15\" r=\"5\" />\n            </g>\n        </g>\n    </defs>\n\n    <use href=\"#reflection-1-puzzle\" transform=\"translate(-20)\"/>\n    <use href=\"#reflection-1-puzzle\" transform=\"translate(20) scale(-1, 1)\"/>\n    <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n</React.Fragment>\n\nconst RotationIcon1 = () => <React.Fragment>\n    <defs>\n        <g id=\"rotation-1-puzzle\">\n            <g className=\"graph-edges\">\n                <line x1=\"-16\" y1=\"13\" x2=\"-2\" y2=\"-13\" />\n                <line x1=\"-16\" y1=\"13\" x2=\"12\" y2=\"13\" />\n                <line x1=\"-2\" y1=\"-13\" x2=\"12\" y2=\"13\" />\n            </g>\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-1\" cx=\"-16\" cy=\"13\" r=\"5\" />\n                <circle className=\"colour-2\" cx=\"-2\" cy=\"-13\" r=\"5\" />\n                <circle className=\"colour-1\" cx=\"12\" cy=\"13\" r=\"5\" />\n            </g>\n        </g>\n    </defs>\n\n    <use href=\"#rotation-1-puzzle\" transform=\"translate(-20)\"/>\n    <use href=\"#rotation-1-puzzle\" transform=\"translate(20) rotate(180)\"/>\n    <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n</React.Fragment>\n\nconst TransformColourIcon1 = () => <React.Fragment>\n    <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n\n    <g transform=\"translate(-20)\">\n        <g className=\"graph-edges\">\n            <line x1=\"0\" y1=\"16\" x2=\"0\" y2=\"-16\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"0\" cy=\"-16\" r=\"5\" />\n            <circle className=\"colour-2\" cx=\"0\" cy=\"0\" r=\"5\" />\n            <circle className=\"colour-1\" cx=\"0\" cy=\"16\" r=\"5\" />\n        </g>\n    </g>\n\n    <g transform=\"translate(20)\">\n        <g className=\"graph-edges\">\n            <line x1=\"0\" y1=\"16\" x2=\"0\" y2=\"-16\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-2\" cx=\"0\" cy=\"-16\" r=\"5\" />\n            <circle className=\"colour-1\" cx=\"0\" cy=\"0\" r=\"5\" />\n            <circle className=\"colour-2\" cx=\"0\" cy=\"16\" r=\"5\" />\n        </g>\n    </g>\n</React.Fragment>\n\nexport default [IdentityIcon1, ReflectionIcon1, RotationIcon1, TransformColourIcon1];\n","/*\n * Colour all nodes on a graph such that no edges joins two nodes of the same colour.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from './PuzzlePage';\nimport { Graph } from './PuzzleComponents/Graph';\nimport { getGraphAndUncolouredCopy } from './puzzleLoaders';\nimport { getNodesOnCircle, getLoopOfEdges, getLineOfEdges } from '../utils/graphUtils';\nimport { graphNodesAreSameColour, samePatternButDifferent } from '../utils/evaluation';\n\n\nconst identity1 = [\n\t{\n\t\tcolourPalette: 1,\n        nodes: [[0, 0, 1]]\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2]),\n        edges: getLineOfEdges(2)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: [[-1, 0, 1], [0, 0, 2], [1, 0, 1]],\n        edges: [[0, 1], [1, 2]]\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 4,\n        nodes: getNodesOnCircle([1, 2, 3, 4]),\n        edges: getLoopOfEdges(4)\n\t}, {\n        size: 24,\n        colourPalette: 3,\n        nodes: [[-1, -1, 1], [1, -1, 1], [-0.5, 0, 2], [0.5, 0, 3], [-1, 1, 3], [1, 1, 2]],\n        edges: [[0, 2], [2, 3], [3, 1], [2, 4], [3, 5]]\n    }, {\n        size: 24,\n        colourPalette: 4,\n        nodes: [[-1.5, -1, 1], [-0.5, -1, 2], [0.5, -1, 1], [-0.5, 0, 1], [0.5, 0, 3], [-0.5, 1, 3], [0.5, 1, 4], [1.5, 1, 3]],\n        edges: [[0, 1], [1, 2], [1, 3], [3, 4], [4, 6], [5, 6], [6, 7]]\n    }\n];\n\nconst reflection1 = [\n\t{\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 2], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 1]),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3]),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 1, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 2, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 4,\n        nodes: getNodesOnCircle([1, 2, 3, 4]),\n        edges: getLoopOfEdges(4)\n\t}\n];\n\nconst rotation1 = [\n\t{\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 2], { dy: 0.25 }),\n\t\tedges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2], { offsetAngle: 90 }),\n\t\tedges: getLoopOfEdges(2)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2]),\n\t\tedges: getLoopOfEdges(2)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 2, 2]),\n\t\tedges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 1, 2]),\n\t\tedges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 2], { dy: 0.25 }),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3], { dy: 0.25 }),\n\t\tedges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 4,\n        nodes: getNodesOnCircle([1, 2, 3, 4]),\n        edges: getLoopOfEdges(4)\n\t}\n];\n\nconst colour1 = [\n\t{\n\t\tcolourPalette: 1,\n        nodes: [[0, 0, 2]]\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2]),\n        edges: getLineOfEdges(2)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: [[-1, 0, 1], [0, 0, 2], [1, 0, 1]],\n        edges: getLineOfEdges(3)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3]),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3, 2]).concat([[0, 0, 3]]),\n        edges: getLoopOfEdges(4).concat([[0, 4], [1, 4] ,[2, 4], [3, 4]])\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3, 1, 2, 3]),\n        edges: getLoopOfEdges(6)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([2, 3, 1, 3, 2, 1]),\n        edges: getLoopOfEdges(6)\n\t}\n];\n\nconst ColourableGraph = (puzzle, selectedColour, update) => {\n    const colourNode = nodeIndex => {\n        puzzle.blank.nodes[nodeIndex].colour = selectedColour;\n        update(puzzle);\n    }\n\n    return <Graph {...puzzle.blank} colourNode={colourNode}/>\n};\n\nconst Transformation = ({ puzzles, transform, evaluate }) => {\n\tconst displayGraphs = (puzzle, selectedColour, update) => <g>\n        <g transform=\"translate(-60)\">\n            <Graph {...puzzle.target} />\n        </g>\n        <g transform={ \"translate(60) \" + transform }>\n            { ColourableGraph(puzzle, selectedColour, update) }\n        </g>\n\n        <line className=\"reflection-line\" y1=\"-200\" y2=\"200\" />\n    </g>\n\n\treturn <PuzzlePage\n\t\tpuzzles={puzzles}\n\t\tevaluate={evaluate}\n\t\tgetPuzzleObject={getGraphAndUncolouredCopy}\n\t\tdisplayPuzzle={displayGraphs} />\n};\n\nconst patternMatchGraphs = ({ blank, target }) => {\n\tconst seq1 = blank.nodes.map(node => node.colour);\n\tconst seq2 = target.nodes.map(node => node.colour);\n\treturn samePatternButDifferent(seq1, seq2);\n}\n\nconst puzzles = [\n\t<Transformation puzzles={identity1} transform=\"\" evaluate={graphNodesAreSameColour} />,\n\t<Transformation puzzles={reflection1} transform=\"scale(-1 1)\" evaluate={graphNodesAreSameColour}/>,\n\t<Transformation puzzles={rotation1} transform=\"rotate(180)\" evaluate={graphNodesAreSameColour} />,\n\t<Transformation puzzles={colour1} transform=\"\" evaluate={patternMatchGraphs} />,\n];\n\nexport const Transformations = (n) => puzzles[n];\n","import React from 'react';\n\n\nconst SequencesIcon1 = () => \n    <g className=\"graph-nodes\">\n        <rect className=\"colour-1\" x=\"-37.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"-22.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"-7.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"7.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"22.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n    </g>\n\nconst SequencesIcon2 = () => \n    <g className=\"graph-nodes\">\n        {[1, 2, 1, 0, 1, 2, 1].map((colour, index) =>\n            <rect\n                key={index}\n                className={\"colour-\" + colour}\n                x={-42 + index * 12}\n                y=\"-7.5\"\n                width=\"12\" height=\"12\" rx=\"2\" ry=\"2\" />\n        )}\n    </g>\n\nconst SequencesIcon3 = () => <React.Fragment>\n    <defs>\n        <g id=\"triangle\" className=\"graph-edges\">\n            <line x1=\"-15\" y1=\"13\" x2=\"0\" y2=\"-13\" />\n            <line x1=\"-15\" y1=\"13\" x2=\"15\" y2=\"13\" />\n            <line x1=\"0\" y1=\"-13\" x2=\"15\" y2=\"13\" />\n        </g>\n        <g id=\"triangle-1\">\n            <use href=\"#triangle\" />\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-1\" cx=\"-15\" cy=\"13\" r=\"7\" />\n                <circle className=\"colour-2\" cx=\"0\" cy=\"-13\" r=\"7\" />\n                <circle className=\"colour-1\" cx=\"15\" cy=\"13\" r=\"7\" />\n            </g>\n        </g>\n        <g id=\"triangle-2\">\n            <use href=\"#triangle\" />\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-2\" cx=\"-15\" cy=\"13\" r=\"7\" />\n                <circle className=\"colour-1\" cx=\"0\" cy=\"-13\" r=\"7\" />\n                <circle className=\"colour-2\" cx=\"15\" cy=\"13\" r=\"7\" />\n            </g>\n        </g>\n    </defs>\n\n    <use href=\"#triangle-1\" transform=\"translate(-34, -4) scale(0.45)\"/>\n    <use href=\"#triangle-2\" transform=\"translate(-11, -4) scale(0.45)\"/>\n    <use href=\"#triangle-1\" transform=\"translate(11, -4) scale(0.45)\"/>\n    <use href=\"#triangle-2\" transform=\"translate(34, -4) scale(0.45)\"/>\n</React.Fragment>\n\nexport default [\n    SequencesIcon1,\n    SequencesIcon2,\n    SequencesIcon3,\n];\n","import React from 'react';\nimport { Graph } from './Graph';\nimport { isColourable } from './utils';\n\n\nexport const Sequence = ({ sequence=[], colourItem }) => {\n    const size = Math.min(24, 200 / sequence.length);\n    const startX = -(sequence.length * size) / 2;\n\n    return <g className=\"sequence\">\n        { sequence.map((item, i) => {\n            return <rect\n                key={i}\n                x={startX + i * size }\n                y={-size / 2}\n                width={size - 1}\n                height={size - 1}\n                rx=\"3\"\n                ry=\"3\"\n                {...isColourable(item, i, colourItem)}\n            />\n        })}\n    </g>\n};\n\nexport const GraphSequence = (puzzle, selectedColour, update) => {\n    const sequence = puzzle.sequence;\n\n    let size = Math.min(120, 240 / sequence.length);\n    const scale = Math.min(1, size / 90);\n    size /= scale;\n    const startX = -size * (sequence.length - 1) / 2;\n\n    return <g className=\"sequence\"  transform={`scale(${ scale })`}>\n        { sequence.map((graph, i) => {\n            const colourNode = nodeIndex => {\n                graph.nodes[nodeIndex].colour = selectedColour;\n                update(puzzle);\n            };\n\n            return <g key={i} transform={`translate(${ startX + i * size })`}>\n                <Graph {...graph} colourNode={colourNode} />\n            </g>\n        })}\n    </g>\n};\n","/*\n * Colour regions on a map such that no two touching regions have the same colour.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from './PuzzlePage';\nimport { Sequence, GraphSequence } from './PuzzleComponents/Sequence';\nimport { getSequenceObject, getGraphSequence } from './puzzleLoaders';\nimport { sequencesMatch } from '../utils/evaluation';\nimport { triangleGraph, squareGraph } from '../utils/graphUtils';\n\n\n// Sequence of coloured blocks with uncoloured blocks at the end\nconst puzzles1 = [\n    {\n        colourPalette: 1,\n        pattern: [1, 1, 1, 0],\n        answer: [1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 1, 1, 1, 0, 0],\n        answer: [1, 1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 1, 2, 1, 2, 0, 0],\n        answer: [1, 2]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 1, 2, 3, 0, 0, 0],\n        answer: [1, 2, 3]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 1, 2, 2, 1, 1, 0, 0],\n        answer: [2, 2]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 2, 1, 2, 2, 0, 0, 0],\n        answer: [1, 2, 2]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 3, 1, 2, 3, 3, 0, 0, 0, 0],\n        answer: [1, 2, 3, 3]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 0, 0],\n        answer: [1, 2, 1, 1]\n    }\n];\n\n// Sequence of coloured blocks with uncoloured blocks in the middle of the sequence\nconst puzzles2 = [\n    {\n        colourPalette: 1,\n        pattern: [1, 1, 0, 1, 1],\n        answer: [1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 1, 0, 1, 2, 1],\n        answer: [2]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 0, 2, 3],\n        answer: [1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 1, 2, 2, 1, 0, 0, 2],\n        answer: [1, 2]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 2, 1, 2, 0, 0, 2, 2],\n        answer: [2, 1]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1],\n        answer: [3]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 0, 0, 3, 1, 2, 3, 2, 1],\n        answer: [2, 1]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 1, 0, 0, 0, 1, 2, 3, 1, 1, 2, 3],\n        answer: [2, 3, 1]\n    }\n];\n\n// Sequence of coloured graphs with uncoloured one at the end\nconst t1 = triangleGraph(1);\nconst t2 = triangleGraph(2);\nconst t112 = triangleGraph([1, 1, 2]);\nconst t221 = triangleGraph([2, 2, 1]);\nconst t121 = triangleGraph([1, 2, 1]);\nconst t211 = triangleGraph([2, 1, 1]);\nconst t123 = triangleGraph([1, 2, 3]);\nconst t231 = triangleGraph([2, 3, 1]);\nconst t312 = triangleGraph([3, 1, 2]);\n\nconst s1122 = squareGraph([1, 1, 2, 2]);\nconst s2211 = squareGraph([2, 2, 1, 1]);\nconst s2112 = squareGraph([2, 1, 1, 2]);\nconst s1221 = squareGraph([1, 2, 2, 1]);\nconst s1212 = squareGraph([1, 2, 1, 2]);\nconst s2121 = squareGraph([2, 1, 2, 1]);\n\nconst puzzles3 = [\n    {\n        colourPalette: 1,\n        graphs: [t1, t1, t1, null],\n        answer: [t1]\n    }, {\n        colourPalette: 2,\n        graphs: [t1, t2, t1, t2, null],\n        answer: [t1]\n    }, {\n        colourPalette: 2,\n        graphs: [t112, t221, t112, t221, null],\n        answer: [t112]\n    }, {\n        colourPalette: 2,\n        graphs: [s1122, s2211, s1122, s2211, null],\n        answer: [s1122]\n    }, {\n        colourPalette: 2,\n        graphs: [s1212, s2121, s1212, s2121, s1212, null],\n        answer: [s2121]\n    }, {\n        colourPalette: 2,\n        graphs: [s1122, s1221, s2211, null],\n        answer: [s2112]\n    }, {\n        colourPalette: 2,\n        graphs: [t112, t121, t211, t112, t121, null],\n        answer: [t211]\n    }, {\n        colourPalette: 3,\n        graphs: [t123, t231, t312, t123, null],\n        answer: [t312]\n    }\n];\n\nconst puzzles = [puzzles1, puzzles2, puzzles3];\n\nconst correctSequence = ({ sequence, target }) =>\n    sequencesMatch(sequence, target, 'colour');\n\nconst correctGraphSequence = ({ sequence, target }) =>\n    sequence.every((graph, index) =>\n        sequencesMatch(graph.nodes, target[index].nodes, 'colour')\n    );\n\nconst ColourableSequence = (puzzle, selectedColour, update) => {\n    const colourItem = index => {\n        if (puzzle.sequence[index].colour === selectedColour) {\n            puzzle.sequence[index].colour = 0;\n        } else {\n            puzzle.sequence[index].colour = selectedColour;\n        }\n        update(puzzle);\n    }\n\n    return <Sequence {...puzzle} colourItem={colourItem}/>\n};\n\nexport const Sequences = (n) => {\n    if (n < 2) {\n        return <PuzzlePage\n            puzzles={puzzles[n]}\n            evaluate={correctSequence}\n            getPuzzleObject={getSequenceObject}\n            displayPuzzle={ColourableSequence} />\n    } else {\n        return <PuzzlePage\n            puzzles={puzzles[n]}\n            evaluate={correctGraphSequence}\n            getPuzzleObject={getGraphSequence}\n            displayPuzzle={GraphSequence} />\n    }\n}\n","import React from 'react';\n\n\nconst Categorisation1 = () => <g>\n    <g className=\"categories\">\n        <circle className=\"colour-1\" cx=\"-24\" cy=\"0\" r=\"23\" />\n        <circle className=\"colour-2\" cx=\"24\" cy=\"0\" r=\"23\" />\n    </g>\n    <g className=\"graph-edges\">\n        <line x1=\"30\" y1=\"0\" x2=\"18\" y2=\"0\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-24\" cy=\"0\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"32\" cy=\"0\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"16\" cy=\"0\" r=\"4\" />\n    </g>\n</g>\n\nconst Categorisation2 = () => <g>\n    <g className=\"categories\">\n        <circle className=\"colour-1\" cx=\"-24\" cy=\"0\" r=\"23\" />\n        <circle className=\"colour-2\" cx=\"24\" cy=\"0\" r=\"23\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-24\" cy=\"0\" r=\"8\" />\n        <circle className=\"colour-2\" cx=\"24\" cy=\"0\" r=\"8\" />\n    </g>\n</g>\n\nconst Categorisation3 = () => <g>\n    <g className=\"categories\">\n        <circle className=\"colour-1\" cx=\"-20\" cy=\"-20\" r=\"19\" />\n        <circle className=\"colour-2\" cx=\"20\" cy=\"-20\" r=\"19\" />\n        <circle className=\"colour-2\" cx=\"-20\" cy=\"20\" r=\"19\" />\n        <circle className=\"colour-3\" cx=\"20\" cy=\"20\" r=\"19\" />\n    </g>\n    <g className=\"graph-edges\">\n        <line x1=\"-25\" y1=\"-20\" x2=\"-15\" y2=\"-20\" />\n        <line x1=\"25\" y1=\"-20\" x2=\"15\" y2=\"-20\" />\n        <line x1=\"-25\" y1=\"20\" x2=\"-15\" y2=\"20\" />\n        <line x1=\"25\" y1=\"20\" x2=\"15\" y2=\"20\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-28\" cy=\"-20\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"-12\" cy=\"-20\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"28\" cy=\"-20\" r=\"4\" />\n        <circle className=\"colour-2\" cx=\"12\" cy=\"-20\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"-28\" cy=\"20\" r=\"4\" />\n        <circle className=\"colour-2\" cx=\"-12\" cy=\"20\" r=\"4\" />\n        <circle className=\"colour-2\" cx=\"28\" cy=\"20\" r=\"4\" />\n        <circle className=\"colour-2\" cx=\"12\" cy=\"20\" r=\"4\" />\n    </g>\n</g>\n\nconst Categorisation4 = () => <g>\n    <g transform=\"translate(0 -26)\">\n        <g className=\"categories\">\n            <circle className=\"colour-2\" r=\"22\" />\n        </g>\n        <g className=\"graph-edges\">\n            <line x1=\"0\" y1=\"-12\" x2=\"-11\" y2=\"6\" />\n            <line x1=\"0\" y1=\"-12\" x2=\"11\" y2=\"6\" />\n            <line x1=\"-11\" y1=\"6\" x2=\"11\" y2=\"6\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"0\" cy=\"-12\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"-11\" cy=\"6\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"11\" cy=\"6\" r=\"4\" />\n        </g>\n    </g>\n\n    <g transform=\"translate(-23 13)\">\n        <g className=\"categories\">\n            <circle className=\"colour-1\" r=\"22\" />\n        </g>\n        <g className=\"graph-edges\">\n            <line x1=\"-15\" x2=\"15\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"-15\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"0\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"15\" r=\"4\" />\n        </g>\n    </g>\n\n    <g transform=\"translate(23 13)\">\n        <g className=\"categories\">\n            <circle className=\"colour-1\" r=\"22\" />\n        </g>\n        <g className=\"graph-edges\">\n            <line x1=\"0\" y1=\"-12\" x2=\"-11\" y2=\"6\" />\n            <line x1=\"0\" y1=\"-12\" x2=\"11\" y2=\"6\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"0\" cy=\"-12\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"-11\" cy=\"6\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"11\" cy=\"6\" r=\"4\" />\n        </g>\n    </g>\n</g>\n\nexport default [Categorisation1, Categorisation2, Categorisation3, Categorisation4];\n","import React from 'react';\nimport { getPointsOnACircle } from '../../utils/graphUtils';\nimport { isColourable } from './utils';\n\n\nconst getCirclePackedInCircle = (R, n) => {\n    const phi = Math.PI * (0.5 - 1 / n);\n    const cPhi = Math.cos(phi);\n    const r = R / (1 + cPhi);\n    const points = getPointsOnACircle(n, { r });\n\n    return {\n        scale: cPhi / (1 + cPhi),\n        categorySize: r * cPhi,\n        categoryPositions: points\n    };\n};\n\nexport const Categories = ({ size, categories, colourCategory }) => {\n    const { scale, categorySize, categoryPositions } = getCirclePackedInCircle(size, categories.length);\n\n    return <g>\n        { categories.map((category, i) => {\n            let transform = `translate(${ categoryPositions[i][0] } ${ categoryPositions[i][1] })`;\n            if (category.rotate) {\n                transform += ` rotate(${ category.rotate })`;\n            }\n\n            return <g key={i} transform={transform}>\n                <circle\n                    {...isColourable(category, i, colourCategory, 'category')}\n                    r={categorySize * 0.95}\n                    />\n                <g className=\"no-pointer\" transform={`scale(${ scale * 2 } ${ scale * 2 })`}>\n                    { category.component }\n                </g>\n            </g>\n        })}\n    </g>\n}\n","import React from 'react';\n\nimport PuzzlePage from './PuzzlePage';\nimport { Graph } from './PuzzleComponents/Graph';\nimport { Categories } from './PuzzleComponents/Categories';\nimport { getCategoryObjects, getGraphObject } from './puzzleLoaders';\nimport {\n    linearGraph,\n    loopGraph,\n    getPointsOnACircle,\n    getNodesOnCircle,\n    getLineOfEdges,\n    getLoopOfEdges\n} from '../utils/graphUtils';\nimport { sequencesAreEquivalent } from '../utils/evaluation';\n\n\n// Graphs are all the same colour and need to be match by shape\nconst puzzle1 = [\n    {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: { nodes: [[0, 0, 1]] }},\n            { type: 2, item: linearGraph([1, 1]) },\n        ]\n    }, {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, copies: 3, item: linearGraph([1, 1, 1]) },\n            { type: 2, copies: 2, item: loopGraph([1, 1, 1], 0.8) }\n        ]\n    }, {\n        colourPalette: 3,\n        randomRotate: true,\n        categories: [\n            { type: 1, copies: 2, item: linearGraph([1, 1, 1]) },\n            { type: 2, copies: 2, item: loopGraph([1, 1, 1], 0.8) },\n            { type: 3, copies: 2, item: {\n                nodes: [[0.5, 0.5], [-0.5, 0.5], [0.5, -0.5]],\n                edges: [[0, 1], [0, 2]],\n                colour: 1\n            }}\n        ]\n    }, {\n        colourPalette: 3,\n        randomRotate: true,\n        categories: [\n            { type: 1, copies: 2, item: loopGraph([1, 1, 1, 1], 0.8) },\n            {\n                type: 2,\n                copies: 3,\n                item: {\n                    nodes: getPointsOnACircle(4, { r: 0.8 }),\n                    edges: getLineOfEdges(4),\n                    colour: 1\n                }\n            }, {\n                type: 3,\n                item: {\n                    nodes: getPointsOnACircle(4, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [0, 3]],\n                    colour: 1\n                }\n            },\n        ]\n    }, {\n        colourPalette: 3,\n        randomRotate: true,\n        categories: [\n            {\n                type: 1,\n                copies: 2,\n                item: {\n                    nodes: getPointsOnACircle(4, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [0, 3]],\n                    colour: 1\n                }\n            }, {\n                type: 2,\n                copies: 2,\n                item: {\n                    nodes: getPointsOnACircle(4, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [2, 3]],\n                    colour: 1\n                }\n            }, {\n                type: 3,\n                copies: 2,\n                item: {\n                    nodes: getPointsOnACircle(4, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [0, 3], [2, 3]],\n                    colour: 1\n                }\n            },\n        ]\n    }, {\n        colourPalette: 4,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 1, 1, 1], 0.8) },\n            {\n                type: 2,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(5, { r: 0.8 }),\n                    edges: getLineOfEdges(5),\n                    colour: 1\n                }\n            }, {\n                type: 3 ,\n                copies: 2,\n                item: {\n                    nodes: getPointsOnACircle(5, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [0, 3], [0, 4]],\n                    colour: 1\n                }\n            }, {\n                type: 4,\n                item: {\n                    nodes: getPointsOnACircle(5, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [0, 3], [3, 4]],\n                    colour: 1\n                }\n            }\n        ]\n    }, {\n        colourPalette: 3,\n        randomRotate: true,\n        categories: [\n            {\n                type: 1,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(6, { r: 0.9 }),\n                    edges: ([[0, 1], [1, 2], [2, 5], [4, 5], [3, 4]]),\n                    colour: 1\n                }\n            }, {\n                type: 2,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(6, { r: 0.9 }),\n                    edges: ([[0, 1], [1, 2], [2, 4], [4, 5], [3, 4]]),\n                    colour: 1\n                }\n            }, {\n                type: 3,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(6, { r: 0.9 }),\n                    edges: ([[0, 1], [1, 2], [1, 4], [4, 5], [3, 4]]),\n                    colour: 1\n                }\n            }\n        ]\n    }, {\n        colourPalette: 4,\n        randomRotate: true,\n        categories: [\n            {\n                type: 1,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(6),\n                    edges: getLoopOfEdges(6).concat([[0, 3], [0, 4], [1, 5]]),\n                    colour: 1\n                }\n            }, {\n                type: 2,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(6),\n                    edges: getLoopOfEdges(6).concat([[0, 3], [0, 4], [1, 4]]),\n                    colour: 1\n                }\n            }, {\n                type: 3,\n                copies: 1, \n                item: {\n                    nodes: getPointsOnACircle(6),\n                    edges: getLoopOfEdges(6).concat([[0, 3], [0, 4], [2, 4]]),\n                    colour: 1\n                }\n            }, {\n                type: 4,\n                copies: 1, \n                item: {\n                    nodes: getPointsOnACircle(6),\n                    edges: getLoopOfEdges(6).concat([[0, 2], [0, 4], [1, 5]]),\n                    colour: 1\n                }\n            }\n        ]\n    }\n]\n\n// Graphs are all the same shape and orientation and need to be matched by colour\nconst puzzle2 = [\n\t{\n        colourPalette: 2,\n        categories: [\n            { type: 1, item: { nodes: [[0, 0, 1]] }},\n            { type: 2, item: { nodes: [[0, 0, 2]] }},\n        ]\n    }, {\n\t\tcolourPalette: 2,\n        categories: [\n            { type: 1, item: linearGraph([1, 1]) },\n            { type: 1, item: linearGraph([1, 1]) },\n            { type: 2, item: linearGraph([2, 2]) },\n            { type: 2, item: linearGraph([2, 2]) },\n        ]\n    }, {\n\t\tcolourPalette: 3,\n        categories: [\n            { type: 1, item: linearGraph([1, 1]) },\n            { type: 2, item: linearGraph([1, 2]) },\n            { type: 2, item: linearGraph([1, 2]) },\n            { type: 3, item: linearGraph([2, 2]) },\n        ]\n    }, {\n        colourPalette: 2,\n        categories: [\n            { type: 1, item: linearGraph([1, 2, 1]) },\n            { type: 1, item: linearGraph([1, 2, 1]) },\n            { type: 2, item: linearGraph([2, 1, 2]) },\n            { type: 2, item: linearGraph([2, 1, 2]) },\n        ]\n    }, {\n        colourPalette: 3,\n        categories: [\n            { type: 1, item: linearGraph([1, 1, 2]) },\n            { type: 1, item: linearGraph([1, 1, 2]) },\n            { type: 2, item: linearGraph([1, 2, 1]) },\n            { type: 3, item: linearGraph([2, 1, 1]) },\n            { type: 3, item: linearGraph([2, 1, 1]) },\n        ]\n    }, {\n        colourPalette: 3,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 2], 0.75) },\n            { type: 1, item: loopGraph([1, 1, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 2, 1], 0.75) },\n            { type: 2, item: loopGraph([1, 2, 1], 0.75) },\n            { type: 3, item: loopGraph([2, 1, 1], 0.75) },\n            { type: 3, item: loopGraph([2, 1, 1], 0.75) },\n        ]\n    }, {\n        colourPalette: 3,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 2, 2], 0.75) },\n            { type: 1, item: loopGraph([1, 1, 2, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 2, 1, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 2, 1, 2], 0.75) },\n            { type: 3, item: loopGraph([2, 1, 2, 1], 0.75) },\n            { type: 3, item: loopGraph([2, 1, 2, 1], 0.75) },\n        ]\n    }, {\n        colourPalette: 4,\n        categories: [\n            { type: 1, item: loopGraph([1, 2, 3, 1, 2, 3], 0.75) },\n            { type: 2, item: loopGraph([3, 2, 1, 3, 2, 1], 0.75) },\n            { type: 2, item: loopGraph([3, 2, 1, 3, 2, 1], 0.75) },\n            { type: 3, item: loopGraph([1, 2, 3, 2, 3, 1], 0.75) },\n            { type: 3, item: loopGraph([1, 2, 3, 2, 3, 1], 0.75) },\n            { type: 4, item: loopGraph([3, 2, 1, 2, 3, 1], 0.75) },\n        ]\n    }\n];\n\n// Graphs are all the same shape but rotated and need to be matched by colour\nconst puzzle3 = [\n    {\n        colourPalette: 3,\n        categories: [\n            { type: 1, item: linearGraph([1, 1]) },\n            { type: 2, item: linearGraph([1, 2]) },\n            { type: 2, item: linearGraph([2, 1]) },\n            { type: 3, item: linearGraph([2, 2]) },\n        ]\n    }, {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: linearGraph([1, 2, 1]) },\n            { type: 1, item: linearGraph([1, 2, 1]) },\n            { type: 1, item: linearGraph([1, 2, 1]) },\n            { type: 2, item: linearGraph([2, 1, 2]) },\n            { type: 2, item: linearGraph([2, 1, 2]) },\n            { type: 2, item: linearGraph([2, 1, 2]) },\n        ]\n    }, {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 2, 2], 0.75) },\n            { type: 1, item: loopGraph([1, 2, 2], 0.75) },\n            { type: 1, item: loopGraph([1, 2, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 1, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 1, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 1, 2], 0.75) },\n        ]\n    }, {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 2, 2], 0.75) },\n            { type: 1, item: loopGraph([1, 1, 2, 2], 0.75) },\n            { type: 1, item: loopGraph([1, 1, 2, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 2, 1, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 2, 1, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 2, 1, 2], 0.75) },\n        ]\n    }, {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 2, 3], 0.75) },\n            { type: 1, item: loopGraph([1, 2, 3], 0.75) },\n            { type: 2, item: loopGraph([1, 3, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 3, 2], 0.75) },\n        ]\n    }, {\n        colourPalette: 3,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 2, 3], 0.75) },\n            { type: 1, item: loopGraph([1, 1, 2, 3], 0.75) },\n            { type: 2, item: loopGraph([1, 1, 3, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 1, 3, 2], 0.75) },\n            { type: 3, item: loopGraph([1, 2, 1, 3], 0.75) },\n            { type: 3, item: loopGraph([1, 2, 1, 3], 0.75) },\n        ]\n    }, {\n        colourPalette: 4,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 2, 3, 4], 0.75) },\n            { type: 1, item: loopGraph([1, 2, 3, 4], 0.75) },\n            { type: 2, item: loopGraph([1, 4, 3, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 4, 3, 2], 0.75) },\n            { type: 3, item: loopGraph([1, 3, 2, 4], 0.75) },\n            { type: 4, item: loopGraph([1, 2, 4, 3], 0.75) },\n        ]\n    }, {\n        colourPalette: 4,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 2, 3, 1, 2, 3], 0.75) },\n            { type: 2, item: loopGraph([1, 3, 2, 1, 3, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 3, 2, 1, 3, 2], 0.75) },\n            { type: 3, item: loopGraph([1, 2, 3, 2, 3, 1], 0.75) },\n            { type: 4, item: loopGraph([1, 2, 1, 3, 2, 3], 0.75) },\n            { type: 4, item: loopGraph([1, 2, 1, 3, 2, 3], 0.75) },\n        ]\n    }\n];\n\nconst triangleWithCenter = getNodesOnCircle([1, 1, 1], { r: 1.2 }).concat([[0, 0, 1]]);\nconst lowTriangle = [[0, -1, 1], [-1, 0.5, 1], [0, 0.5, 1], [1, 0.5, 1]];\nconst rectangle = [[-0.5, -1.25, 1], [-0.5, 1.25, 1], [0.5, 1.25, 1], [0.5, -1.25, 1]]\n\n// Graphs have the same set of connections, but nodes are moved\nconst puzzle4 = [\n    {\n        // Triangles vs straight lines big and smalle\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: linearGraph([1, 1, 1], 0.8) },\n            { type: 1, item: linearGraph([1, 1, 1], 1.5) },\n            { type: 2, item: loopGraph([1, 1, 1], 0.7) },\n            { type: 2, item: loopGraph([1, 1, 1], 1.4) },\n        ]\n    }, {\n        // Triangles vs straight lines\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: linearGraph([1, 1, 1]) },\n            { type: 2, item: loopGraph([1, 1, 1]) },\n            { type: 1,\n                item: {\n                    nodes: [[0.7, 0.7, 1], [-0.7, 0.7, 1], [-0.7, -0.7, 1]],\n                    edges: getLineOfEdges(3)\n                }\n            },\n            { type: 2,\n                item: {\n                    nodes: [[0.7, 0.7, 1], [-0.7, 0.7, 1], [-0.7, -0.7, 1]],\n                    edges: getLoopOfEdges(3)\n                }\n            }\n        ]\n    }, {\n        // Three node- vs four node-triangles\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 1]) },\n            { type: 1,\n                item: {\n                    nodes: [[0, -0.5], [1.25, 0.5], [-1.25, 0.5]],\n                    edges: getLoopOfEdges(3),\n                    colour: 1\n                }\n            },\n            { type: 2,\n                item: {\n                    nodes: [[0, -0.5], [1.25, 0.5], [0, 0.5], [-1.25, 0.5]],\n                    edges: getLoopOfEdges(4),\n                    colour: 1\n                }\n            },\n            { type: 2,\n                item: {\n                    nodes: getPointsOnACircle(3).concat([[0, 0.5]]),\n                    edges: [[0, 3], [3, 1], [1, 2], [2, 0]],\n                    colour: 1\n                }\n            }\n        ]\n    }, {\n        // Quadrilaterals vs stars\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 1, 1]) },\n            { type: 1,\n                item: {\n                    nodes: lowTriangle,\n                    edges: getLoopOfEdges(4)\n                }\n            }, {\n                type: 2,\n                item: {\n                    nodes: lowTriangle,\n                    edges: [[0, 2], [1, 2], [2, 3]]\n                }\n            }, {\n                type: 2,\n                item: {\n                    nodes: triangleWithCenter,\n                    edges: [[0, 3], [1, 3], [2, 3]]\n                }\n            }\n        ]\n    }, {\n        // Quadrilaterals vs straight lines\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: linearGraph([1, 1, 1, 1]) },\n            { type: 2, item: loopGraph([1, 1, 1, 1]) },\n            {\n                type: 1,\n                item: {\n                    nodes: getNodesOnCircle([1, 1, 1, 1]),\n                    edges: getLineOfEdges(4)\n                }\n            }, {\n                type: 1,\n                item: {\n                    nodes: [[-0.5, -1], [-0.5, 0], [0.5, 0], [0.5, 1]],\n                    edges: getLineOfEdges(4),\n                    colour: 1\n                }\n            }, {\n                type: 2,\n                item: {\n                    nodes: triangleWithCenter,\n                    edges: getLoopOfEdges(4)\n                }\n            }\n        ]\n    }, {\n        // Quadrilaterals vs straight lines with a rectangle\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            {\n                type: 1,\n                item: {\n                    nodes: rectangle,\n                    edges: getLineOfEdges(4)\n                }\n            }, {\n                type: 1,\n                item: {\n                    nodes: rectangle,\n                    edges: [[0, 3], [0, 2], [2, 1]]\n                }\n            }, {\n                type: 1,\n                item: {\n                    nodes: rectangle,\n                    edges: [[1, 2], [2, 3], [3, 0]]\n                }\n            }, {\n                type: 2,\n                item: {\n                    nodes: rectangle,\n                    edges: getLoopOfEdges(4),\n                }\n            }, {\n                type: 2,\n                item: {\n                    nodes: rectangle,\n                    edges: [[0, 2], [2, 1], [1, 3], [3, 0]],\n                }\n            }\n        ]\n    }, {\n        // Stars vs triangles with hanging point\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            {\n                type: 1,\n                item: {\n                    nodes: triangleWithCenter,\n                    edges: [[0, 1], [1, 2], [0, 3], [0, 2]]\n                }\n            }, {\n                type: 2,\n                item: {\n                    nodes: triangleWithCenter,\n                    edges: [[0, 3], [1, 3], [2, 3]]\n                }\n            }, {\n                type: 2,\n                item: {\n                    nodes: lowTriangle,\n                    edges: [[0, 1], [0, 2], [0, 3]]\n                }\n            }, {\n                type: 1,\n                item: {\n                    nodes: lowTriangle,\n                    edges: [[0, 1], [0, 2], [0, 3], [1, 2]]\n                }\n            }, {\n                type: 1,\n                item: {\n                    nodes: lowTriangle,\n                    edges: [[0, 1], [0, 2], [1, 2], [2, 3]]\n                }\n            }\n        ]\n    }, {\n        // Quadrilateral with one diagonal vs two\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            {\n                type: 1,\n                item: {\n                    nodes: getNodesOnCircle(4),\n                    edges: getLoopOfEdges(4).concat([[0, 2], [1, 3]]),\n                    colour: 1\n                }\n            },\n            {\n                type: 1,\n                item: {\n                    nodes: triangleWithCenter,\n                    edges: [[0, 1], [1, 2], [2, 0], [3, 0], [3, 1], [3, 2]]\n                }\n            },\n            {\n                type: 2,\n                item: {\n                    nodes: getNodesOnCircle(4),\n                    edges: getLoopOfEdges(4).concat([[0, 2]]),\n                    colour: 1\n                }\n            },\n            {\n                type: 2,\n                item: {\n                    nodes: triangleWithCenter,\n                    edges: getLoopOfEdges(4).concat([[0, 2]]),\n                    colour: 1\n                }\n            },\n            {\n                type: 2,\n                item: {\n                    nodes: getPointsOnACircle(3).concat([[0, 0.5]]),\n                    edges: [[0, 3], [3, 1], [1, 2], [2, 0], [3, 2]],\n                    colour: 1\n                }\n            }\n        ]\n    }\n];\n\nconst puzzles = [puzzle1, puzzle2, puzzle3, puzzle4];\n\nconst displayCategories = (categories, selectedColour, update) => {\n    categories.forEach(item => {\n        item.component = <Graph {...getGraphObject(item.object)} />\n    });\n\n    const colourCategory = index => {\n        if (categories[index].colour === selectedColour) {\n            categories[index].colour = 0;\n        } else {\n            categories[index].colour = selectedColour;\n        }\n        update(categories);\n    };\n\n    return <Categories size=\"128\" categories={categories} colourCategory={colourCategory} />\n};\n\nconst evaluate = puzzle =>\n    sequencesAreEquivalent(puzzle.map(item => item.category), puzzle.map(item => item.colour));\n\nexport const Categorisation = (n) =>\n    <PuzzlePage\n        puzzles={puzzles[n]}\n        evaluate={evaluate}\n        getPuzzleObject={getCategoryObjects}\n        displayPuzzle={displayCategories} />\n","import ColourGraphIcons from './PuzzleMap/Icons/ColourGraphs';\nimport { ColourGraph } from './Puzzles/ColourGraphs';\n\nimport GraphTheoryIcons from './PuzzleMap/Icons/GraphTheory';\nimport { GraphTheory } from './Puzzles/GraphTheory';\n\nimport ColourMapIcons from './PuzzleMap/Icons/ColourMaps';\nimport { ColourMap } from './Puzzles/ColourMaps';\n\nimport TransformationIcons from './PuzzleMap/Icons/Transformations';\nimport { Transformations } from './Puzzles/Transformations';\n\nimport SequencesIcons from './PuzzleMap/Icons/Sequences';\nimport { Sequences } from './Puzzles/Sequences';\n\nimport CategorisationIcons from './PuzzleMap/Icons/Categorisation';\nimport { Categorisation } from './Puzzles/Categorisation';\n\n\n// Mapping puzzle names to URLS, icons and components\nexport const puzzleData = {\n    'categorisation-0': {\n        slug: 'categorisation-0',\n        icon: CategorisationIcons[0](),\n        component: () => Categorisation(0),\n    },\n    'categorisation-1': {\n        slug: 'categorisation-1',\n        icon: CategorisationIcons[1](),\n        component: () => Categorisation(1),\n    },\n    'categorisation-2': {\n        slug: 'categorisation-2',\n        icon: CategorisationIcons[2](),\n        component: () => Categorisation(2),\n    },\n    'categorisation-3': {\n        slug: 'categorisation-3',\n        icon: CategorisationIcons[3](),\n        component: () => Categorisation(3),\n    },\n    'graph-theory-0': {\n        slug: 'graph-theory-0',\n        icon: GraphTheoryIcons[0](),\n        component: () => GraphTheory(0), \n    }\n};\n\naddData('colour-graphs', 'colour-graphs', ColourGraphIcons, ColourGraph, 3);\naddData('colour-maps', 'colour-maps', ColourMapIcons, ColourMap, 2);\naddData('transformations', 'transformations', TransformationIcons, Transformations, 4);\naddData('sequences', 'sequences', SequencesIcons, Sequences, 3);\n\nfunction addData(name, slug, icons, components, n) {\n    for (let i = 0; i < n; i++) {\n        puzzleData[`${ name }-${ i }`] = {\n            slug: `${ slug }-${ i }`,\n            icon: icons[i](),\n            component: () => components(i)\n        }\n    }\n}\n\nfunction getData(name, n) {\n    return Array\n        .from({ length: n })\n        .map((_, index) => puzzleData[`${ name }-${ index }`]);\n}\n\n// Puzzle data grouped into categories\nexport const puzzleLayout = [\n    getData('sequences', 3),\n    getData('categorisation', 4),\n    getData('transformations', 4),\n    getData('colour-graphs', 3),\n    getData('colour-maps', 2),\n    getData('graph-theory', 1),\n];\n","import React from 'react';\nimport './icons.css';\n\nexport default (props) =>\n    <svg viewBox=\"-55 -55 110 110\">\n        <defs>\n            <filter id=\"glow-spotlight\" x=\"-200%\" y=\"-200%\" width=\"400%\" height=\"400%\">\n                <feGaussianBlur stdDeviation=\"2\" result=\"colouredBlur\" />\n                <feMerge>\n                    <feMergeNode in=\"coloredBlur\"/>\n                    <feMergeNode in=\"SourceGraphic\"/>\n                </feMerge>\n            </filter>\n        </defs>\n        <circle className=\"spotlight\" cx=\"0\" cy=\"0\" r=\"49\" />\n        <circle className=\"spotlight-outline\" cx=\"0\" cy=\"0\" r=\"49\" />\n        { props.children }\n    </svg>\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nimport { puzzleLayout } from '../puzzleData';\nimport Icon from './Icons/Icon';\nimport './puzzleMap.css';\n\n\nexport default () =>\n    <main className=\"front-page\">\n        <nav className=\"puzzle-map\">\n            {\n                puzzleLayout.map((section, i) =>\n                    <div className=\"puzzle-section\" key={i}>{\n                        section.map(\n                            ({ slug, icon }) => <Link className=\"map-link\" key={slug} to={slug}>\n                                <Icon>{ icon }</Icon>\n                            </Link>\n                        )\n                    }</div>\n                )\n            }\n        </nav>\n    </main>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { puzzleData } from './puzzleData';\nimport PuzzleMap from './PuzzleMap/PuzzleMap';\n\nimport './base.css';\n\n\nexport default () =>\n    <Router>\n        <Switch>\n            {\n                Object.values(puzzleData).map(({ slug, component }) =>\n                    <Route key={slug} path={`/${ slug }`} component={component} />\n                )\n            }\n            <Route path=\"/\" component={PuzzleMap} />\n        </Switch>\n    </Router>\n"],"sourceRoot":""}