{"version":3,"sources":["Puzzles/Tutorial/Icon.js","utils/common.js","Puzzles/utils/graphUtils.js","Puzzles/utils/graphTypes.js","Puzzles/utils/loadPuzzle.js","Puzzles/utils/evaluate.js","PuzzleChamber/Toolbars/ButtonSet.js","PuzzleChamber/Toolbars/Button.js","PuzzleChamber/Toolbars/ColourToolbar.js","PuzzleChamber/Toolbars/PuzzlePreviewToolbar.js","PuzzleChamber/PuzzleChamber.js","Puzzles/PuzzleComponents/Primitives.js","Puzzles/utils/isColourable.js","Puzzles/PuzzleComponents/Graph.js","Puzzles/Tutorial/Tutorial.js","Puzzles/Sequences/Icons.js","Puzzles/PuzzleComponents/Sequence.js","Puzzles/Sequences/BasicSequences.js","Puzzles/Sequences/GraphSequences.js","Puzzles/Combinatorics/Icons.js","Puzzles/Combinatorics/Combinations.js","Puzzles/Combinatorics/Permutations.js","Puzzles/Combinatorics/Derrangements.js","Puzzles/Combinatorics/puzzles.js","Puzzles/Transformations/Icons.js","Puzzles/Transformations/Transformations.js","Puzzles/Transformations/puzzles.js","Puzzles/GraphTheory/ColourGraphs.js","PuzzleNavigation/Icons/ColourGraphs.js","Puzzles/GraphTheory/loadPuzzles.js","Puzzles/allPuzzles.js","PuzzleNavigation/PuzzleMenu.js","PuzzleNavigation/PuzzleGraphLayout.js","PuzzleNavigation/PuzzleGraph.js","serviceWorker.js","index.js","App.js"],"names":["TutorialIcon","react_default","a","createElement","className","r","sum","arr","func","i","length","getArrayOfN","n","push","nTimes","Array","from","map","getArray","value","isArray","_","getCombinationsWithReplacement","size","result","_loop2","firstItem","slice","forEach","seq","concat","handleKeyDown","evt","callback","key","keyCode","getNodesOnCircle","colours","_ref2","arguments","undefined","_ref2$r","_ref2$offsetAngle","offsetAngle","_ref2$dx","dx","_ref2$dy","dy","_ref","_ref$r","_ref$offsetAngle","_ref$dx","_ref$dy","points","dAngle","Math","PI","angle","sin","cos","getPointsOnACircle","_ref3","_ref4","Object","slicedToArray","getGraphBBox","_ref5","nodes","x1","x2","y1","y2","x","y","node","width","height","getLineOfEdges","start","stop","edges","getLoopOfEdges","max","getRegularPolygonGraph","scale","triangleGraph","squareGraph","linearGraph","params","_params$scale","colour","props","objectWithoutProperties","startX","assign","loopGraph","_params$scale2","sunletGraph","innerColours","outerColours","p","graph","index","getGraphObject","_ref$nodes","_ref$edges","_ref$size","nodeObjects","nodeColour","fixed","Boolean","edgeObjects","n1","n2","node1","node2","edge","getGraphAndUncolouredCopy","_ref6","_ref6$nodes","_ref6$edges","_ref6$size","_ref6$r","target","blank","_ref7","_ref8","colourNumberToColourObject","getSequenceObject","_ref14","pattern","answer","sequence","getGraphSet","_ref16","graphs","graphType","loop","getGraphSequence","_ref17","answerGraph","blankGraph","allItemsHaveValue","items","attr","every","item","allItemsColoured","extractAttribute","graphToStringOfNodes","join","graphToStringOfSortedNodes","sort","sequenceSetMatches","targetSet","sequenceSet","Set","toConsumableArray","has","graphIsChromatic","cxns","matches","cxn","flashing","allConnectedItemsHaveDifferentColours","sequencesMatch","seq1","seq2","sequencesAreEquivalent","mapping1","Map","mapping2","value1","get","value2","set","graphNodesAreSameColour","samePatternButDifferent","min","sequenceHasNoMatches","TOOLBAR_R","DELTA_ANGLE","ButtonSet","buttons","startAngle","positionR","positions","baseAngle","direction","getPositionsAroundCircle","role","component","position","Component","cx","cy","SVGButton","tabIndex","onKeyDown","onClick","ColourButton","count","puzzle","selectedColour","state","button","Button_SVGButton","aria-checked","setState","showColourCounter","Button","viewBox","ColourToolbar","clearPuzzle","colourCount","color","Toolbars_ButtonSet","PuzzlePreviewToolbar","puzzles","maxIndex","getPuzzle","COLOURS","PuzzlePage","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","queryString","parse","location","search","parseInt","q","solved","clear","bind","assertThisInitialized","update","nextPuzzle","backToMenu","_this$props","getPuzzleObject","getSolutionObject","colourPalette","solution","clearButton","nextState","history","_this$state","evaluate","aria-label","Button_Button","_this$state2","style","selectColourIndicator","getNextPuzzleButton","id","preserveAspectRatio","in","stdDeviation","in2","mode","operator","radius","displayPuzzle","Toolbars_ColourToolbar","Toolbars_PuzzlePreviewToolbar","React","withRouter","Line","isColourable","chamber","_ref$className","_ref$onColour","onColour","inactive","colourUses","colourThisItem","Edge","hidden","edgeColour","Primitives_Line","Graph","_ref2$edges","_ref2$nodes","transform","ColourableGraph","Graph_Graph","Tutorial","name","slug","icon","PuzzleChamber","available","Icons","rx","ry","href","getSize","Sequence","_ref$sequence","_ref$y","ColourableSequence","Sequence_Sequence","GraphRow","GAP","gap","totalWidth","gapSize","bbox","GraphColumn","totalHeight","puzzles1","puzzles2","correctSequence","PuzzleComponent","BasicSequences","BasicSequences_PuzzleComponent","t1","t2","t112","t221","t121","t211","t123","t231","t312","s1122","s2211","s2112","s1221","s1212","s2121","correctGraphSequence","GraphSequences","Combinatorics_Icons","d","CombinationPuzzles","combinationLength","combinations","combination","permute","remainingItems","previousItem","curr","next","splice","getPermutations","getPermutationsWithReplacement","_loop","displayGraphSequence","PermutationPuzzles","getSolutions","solutionSet","solutions","nGraphs","DerrangementPuzzle","graphStrings","j","allGraphsInSequenceAreDifferent","allNodes","getRepeatArray","Transformations_Icons","Fragment","identity1","reflection1","rotation1","colour1","Transformation","Transformations","Transformations_Transformation","Puzzles","rectCoords","ColourGraph","ColourGraphs","fill","ColourGraphIcons","puzzleData","TutorialPuzzle","TransformationPuzzles","GraphTheoryPuzzles","Section","react_router_dom","to","Menu","puzzleLayout","section","CONNECTION_LENGTH","PUZZLE_CONNECTIONS","getConnections","find","console","error","connections","name1","name2","puzzle1","puzzle2","radians","SIZE","extent","minX","maxX","maxY","minY","getGraphExtent","_useState","useState","_useState2","dragging","setDragging","_useState3","_useState4","lastPosition","setLastPosition","_useState5","_useState6","offset","setOffset","getPosition","touches","pageX","pageY","onMouseDown","stopPropagation","preventDefault","onMouseMove","onMouseUp","onTouchStart","onTouchMove","onTouchEnd","stroke","strokeWidth","filter","window","hostname","match","ReactDOM","render","react_router","values","path","PuzzleMenu","PuzzleGraph","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d36430e.chunk.js","sourcesContent":["import React from 'react';\n\n\nexport const TutorialIcon = (\n    <g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" r=\"8\" />\n        </g>\n    </g>\n);\n","export function sum(arr, func) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += func ? func(arr[i]) : arr[i];\n    }\n    return sum;\n}\n\nexport function shuffle(arr) {\n    for (let i = arr.length; i--; ) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    return arr;\n}\n\n// Get an array of [1, 2, 3, ..., n]\nexport function getArrayOfN(n) {\n    const arr = [];\n    for (let i = 1; i <= n; i++) {\n        arr.push(i)\n    }\n    return arr;\n}\n\n// Get an array of values from calling function <func> n times\nexport function nTimes(n, func) {\n    return Array.from({ length: n }).map(func);\n}\n\n// If arr is not an array return an empty array with that length\n// If arr is a number, then return an array with n items with the given value\n// Allows colours to be a number or an array of numbers\nexport function getArray(arr, value) {\n    if (Array.isArray(arr)) {\n        return arr;\n    }\n    return nTimes(arr, (_) => value);\n}\n\n// Returns an array of <item> repeated <n> times\nexport function getRepeatArray(item, n) {\n    const arr = [];\n    for (let i = 0; i < n; i++) {\n        arr.push(item);\n    }\n    return arr;\n}\n\nexport function getPermutations(arr) {\n    const result = [];\n  \n    const permute = (remainingItems, seq) => {\n        if (remainingItems.length === 0) {\n            result.push(seq)\n        } else {\n            let previousItem = false;\n            for (let i = 0; i < remainingItems.length; i++) {\n                const curr = remainingItems.slice();\n                const next = curr.splice(i, 1);\n                if (next[0] !== previousItem) {\n                    permute(curr, seq.concat(next));\n                    previousItem = next[0];\n                }\n            }\n        }\n   }\n  \n   // Copy arr and then sort it\n   permute(arr.slice().sort(), []);\n  \n   return result;\n}\n\n// Return all possible sequences of colours\n// e.g. ([1, 2], 2) => (1, 1), (1, 2), (2, 1), (2, 2)\nexport function getPermutationsWithReplacement(colours, size) {\n    if (size <= 0) { return [[]]; }\n\n    const result = [];\n    for (let i = 0; i < colours.length; i++) {\n        const firstItem = colours[i];\n        const subSequence = getPermutationsWithReplacement(colours, size - 1);\n        subSequence.forEach((seq) => {\n            result.push([firstItem].concat(seq));\n        });\n    }\n\n    return result;\n}\n\nexport function getCombinationsWithReplacement(arr, size) {\n    if (size === 0) { return [[]]; }\n    const result = [];\n\n    for (let i = 0; i < arr.length; i++) {\n        const firstItem = arr[i];\n        const subSequence = getCombinationsWithReplacement(arr.slice(i), size - 1);\n        subSequence.forEach((seq) => {\n            result.push([firstItem].concat(seq));\n        });\n    }\n\n    return result;\n}\n\n// Click enter or space triggers a given callback\nexport const handleKeyDown = (evt, callback) => {\n    if (evt.key === 'Enter' || evt.keyCode === 32) {\n        callback();\n    }\n};\n\nexport function hashCode(str) {\n    let hash = 0, i, chr;\n    for (i = 0; i < str.length; i++) {\n        chr = str.charCodeAt(i);\n        hash = ((hash << 5) - hash) + chr;\n        hash |= 0;\n    }\n    return hash;\n}","import { getArray } from '../../utils/common';\n\n\nexport function getPointsOnACircle(n, {r=1, offsetAngle=0, dx=0, dy=0}={}) {\n    const points = [];\n    const dAngle = 2 * Math.PI / n;\n    let angle = (offsetAngle * Math.PI / 180 || 0) - 0.5 * dAngle;\n\n    for (let i = 0; i < n; i++) {\n        points.push([\n            dx + r * Math.sin(angle),\n            dy + r * Math.cos(angle),\n        ]);\n        angle += dAngle;\n    }\n\n    return points;\n}\n\nexport function getNodesOnCircle(colours, {r=1, offsetAngle=0, dx=0, dy=0}={}) {\n    colours = getArray(colours);\n    const n = colours.length;\n    const points = getPointsOnACircle(n, { r, offsetAngle, dx, dy });\n\n    // Combine coordinates with colours\n    const nodes = points.map(([x, y], i) => [x, y, colours[i]]);\n\n    return nodes;\n}\n\nexport function getGraphBBox({ nodes }) {\n    if (nodes.length === 0) {\n        return { x1: 0, x2: 0, y1: 0, y2: 0 };\n    }\n\n    let x1 = nodes[0].x - nodes[0].r;\n    let x2 = nodes[0].x + nodes[0].r;\n    let y1 = nodes[0].y - nodes[0].r;\n    let y2 = nodes[0].y + nodes[0].r;\n\n    for (let i = 0; i < nodes.length; i++) {\n        const node = nodes[i];\n        if (node.x - node.r < x1) {\n            x1 = node.x - node.r;\n        }\n        if (node.x + node.r > x2) {\n            x2 = node.x + node.r;\n        }\n        if (node.y - node.r < y1) {\n            y1 = node.y - node.r;\n        }\n        if (node.y + node.r > y2) {\n            y2 = node.y + node.r;\n        }\n    }\n\n    return { x1, y1, width: x2 - x1, height: y2 - y1 };\n}\n\n// Given a <start> and <stop> value, return an array of arrays,\n// where each sub-array is a pair of consequtive values between <start> and <stop>\n// e.g. (3, 6) => [[3, 4], [4, 5], [5, 6]]\nexport function getLineOfEdges(start, stop) {\n    if (stop === undefined) {\n        stop = start - 1;\n        start = 0;\n    }\n\n    var edges = [];\n    for (var i = start; i < stop; i++) {\n        edges.push([i, i + 1]);\n    }\n\n    return edges;\n}\n\nexport function getLoopOfEdges(start, stop) {\n    if (stop === undefined) {\n        stop = Math.max(0, start - 1);\n        start = 0;\n    }\n\n    const edges = getLineOfEdges(start, stop);\n    // Link start to stop, unless they are the same or one different (a linear graph of 2)\n    if (stop - start > 1) {\n        edges.push([stop, start]);\n    }\n    return edges;\n}\n\nexport function connectNodeToNodes(node1, nodes) {\n    return nodes.map(node => [node1, node]);\n}\n\n// Given a graph, add a node along each existing edge\nexport function subdivideGraph(graph) {\n    const newEdges = [];\n    const nodes = graph.nodes;\n    let n = nodes.length;\n\n    graph.edges.forEach(([n1, n2]) => {\n        const node1 = nodes[n1];\n        const node2 = nodes[n2];\n        nodes.push([(node1[0] + node2[0]) / 2, (node1[1] + node2[1]) / 2, node1[2]]);\n        newEdges.push([n1, n], [n2, n]);\n        n++;\n    })\n\n    graph.edges = newEdges;\n\n    return graph;\n}\n\nfunction getRegularPolygonGraph(size, colours, scale=1) {\n    // Can pass in a single colour to set all nodes to that colour\n    if (!Array.isArray(colours)) {\n        colours = Array.from({ length: size }).map(_ => colours);\n    }\n\n    return {\n        nodes: getNodesOnCircle(colours, { r: scale }),\n        edges: getLoopOfEdges(size)\n    };\n}\n\nexport function triangleGraph(colours, scale=1) {\n    return getRegularPolygonGraph(3, colours, scale);\n}\n\nexport function squareGraph(colours, scale=1) {\n    return getRegularPolygonGraph(4, colours, scale);\n}\n","import { nTimes, getArray } from '../../utils/common';\nimport {\n    getLineOfEdges,\n    getLoopOfEdges,\n    getNodesOnCircle,\n    subdivideGraph,\n} from './graphUtils';\n\n\nexport function linearGraph(colours, params={}) {\n    const { scale=1, colour, ...props } = params;\n    colours = getArray(colours, colour);\n    \n    const n = colours.length;\n    const startX = (1 - n) * scale / 2;\n    const nodes = colours.map((colour, i) => [startX + i * scale, 0, colour])\n    const edges = getLineOfEdges(n);\n\n    return Object.assign(props, { nodes, edges });\n}\n\nexport function loopGraph(colours, params={}) {\n    const { scale=1, colour, ...props } = params;\n    colours = getArray(colours, colour);\n\n    const nodes = getNodesOnCircle(colours, { r: scale });\n    const edges = getLoopOfEdges(colours.length);\n\n    return Object.assign(props, { nodes, edges });\n}\n\nexport function gridGraph(nColumns, nRows, params={}) {\n    const scale = params.scale || 1;\n    const nodes = [];\n    const edges = [];\n\n    const startX = -scale * (nColumns - 1) / 2;\n    const startY = -scale * (nRows - 1) / 2;\n\n    let nodeIndex = 0;\n    for (let i = 0; i < nColumns; i++) {\n        for (let j = 0; j < nRows; j++) {\n            nodes.push([\n                startX + i * scale,\n                startY + j * scale,\n            ]);\n\n            if (i) {\n                edges.push([nodeIndex, nodeIndex - nRows]);\n            }\n            if (j) {\n                edges.push([nodeIndex, nodeIndex - 1]);\n            }\n            nodeIndex++;\n        }\n    }\n\n    return { nodes, edges };\n}\n\nexport function starGraph(colours, params={}) {\n    const { scale=1, colour, ...props } = params;\n    colours = getArray(colours, colour);\n\n    const firstNode = colours.shift();\n    const nodes = [[0, 0, firstNode]].concat(getNodesOnCircle(colours, { r: scale }));\n    const edges = colours.map((_, index) => [0, index + 1]);\n\n    return Object.assign(props, { nodes, edges });\n}\n\nexport function spokeGraph(colours, params={}) {\n    const graph = starGraph(colours, params);\n    graph.edges = graph.edges.concat(getLoopOfEdges(1, colours - 1))\n    return graph;\n}\n\n// AKA helm graph\n// A loop graph, with a spoke coming out of every vertex\n// Colours can be an integer that determines the nodes in the inner loop\n// Or an array of colours for all nodes\nexport function sunletGraph(colours, params={}) {\n    let n, innerColours, outerColours;\n\n    if (Array.isArray(colours)) {\n        n = colours.length / 2;\n        innerColours = colours.slice(0, n);\n        outerColours = colours.slice(n);\n    } else {\n        // colours is the number of nodes, so get two arrays of that length, full of 1s\n        n = colours;\n        innerColours = getArray(n, 1);\n        outerColours = getArray(n, 1);\n    }\n\n    // Determine radius of inner shape so its side length is the same as the remaining radial spoke length\n    const scale = params.scale || 1;\n    const p = 1 / (1  + 2 * Math.sin(Math.PI / n));\n    params.scale = scale * p;\n\n    const graph = loopGraph(innerColours, params);\n    graph.nodes = graph.nodes.concat(getNodesOnCircle(outerColours, { r: scale }));\n    graph.edges = graph.edges.concat(nTimes(n, (_, index) => [index, index + n]));\n\n    return graph;\n}\n\nexport function prismGraph(n, params={}) {\n    const graph = sunletGraph(n, params);\n    graph.edges = graph.edges.concat(getLoopOfEdges(n, 2 * n - 1));\n    return graph;\n}\n\nexport function antiPrismGraph(n, params={}) {\n    const p = 1 / (1  + 2 * Math.sin(Math.PI / n));\n    const scale = params.scale || 1;\n    params.scale = scale * p;\n\n    const graph = loopGraph(n, params);\n    graph.nodes = graph.nodes.concat(getNodesOnCircle(n, { r: scale, offsetAngle: 180 / n }));\n    graph.edges = graph.edges.concat(nTimes(n, (_, index) => [index, n + index]));\n    graph.edges = graph.edges.concat(nTimes(n, (_, index) => [index, n + ((index + n - 1) % n)]));\n    graph.edges = graph.edges.concat(getLoopOfEdges(n, 2 * n - 1));\n    return graph;\n}\n\nexport function gearGraph(n, params={}) {\n    const graph = subdivideGraph(loopGraph(n, params));\n    graph.nodes.push([0, 0, undefined]);\n    graph.edges = graph.edges.concat(nTimes(n, (_, index) => [index, 2 * n]))\n    return graph;\n}\n\nfunction getRegularPolygonGraph(size, colours, scale=1) {\n    // Can pass in a single colour to set all nodes to that colour\n    if (!Array.isArray(colours)) {\n        colours = Array.from({ length: size }).map(_ => colours);\n    }\n\n    return {\n        nodes: getNodesOnCircle(colours, { r: scale }),\n        edges: getLoopOfEdges(size)\n    };\n}\n\nexport function triangleGraph(colours, scale=1) {\n    return getRegularPolygonGraph(3, colours, scale);\n}\n\nexport function squareGraph(colours, scale=1) {\n    return getRegularPolygonGraph(4, colours, scale);\n}\n","/***\n * These functions take the raw puzzle data and return an object that can used to\n * display the puzzle and determine when the correct answer is found\n***/\n\nimport { shuffle, getCombinationsWithReplacement } from '../../utils/common';\nimport { linearGraph, loopGraph } from './graphTypes';\n\n// Given arrays of node coordinates and edge coordinates, return an object of nodes and edges\nexport function getGraphObject({ nodes=[], edges=[], size=32, r=8, colour }) {\n    const nodeObjects = nodes.map(([x, y, nodeColour], index) => ({\n        r,\n        index,\n        x: x * size,\n        y: y * size,\n        colour: nodeColour || colour,\n        fixed: Boolean(nodeColour || colour),\n        edges: {}\n    }));\n\n    const edgeObjects = edges.map(([n1, n2]) => {\n        const node1 = nodeObjects[n1];\n        const node2 = nodeObjects[n2];\n        const edge = {\n            node1,\n            node2,\n            x1: node1.x,\n            y1: node1.y,\n            x2: node2.x,\n            y2: node2.y\n        };\n\n        // Edges map another node to the edge object\n        node1.edges[node2.index] = edge;\n        node2.edges[node1.index] = edge;\n\n        return edge;\n    });\n\n    return {\n        nodes: nodeObjects,\n        edges: edgeObjects\n    };\n}\n\n// Given arrays of node coordinates and edge coordinates, return two objects of nodes and edges,\n// one includes the node colours and one is empty\nexport function getGraphAndUncolouredCopy({ nodes=[], edges=[], size=32, r=8 }) {\n    const target = getGraphObject({ nodes, edges, size, r });\n\n    // Remove the colours from the nodes\n    const blankNodes = nodes.map(([x, y]) => [x, y]);\n    const blankGraph = getGraphObject({ nodes: blankNodes, edges, size, r });\n\n    return { target, blank: blankGraph };\n}\n\nexport function getMapObject({ regions=[], connections=[], size=1 }) {\n    const regionObjects = regions.map(([x, y, width, height]) => ({\n        x: (x - width / 2) * size,\n        y: (y - height / 2) * size,\n        width: width * size,\n        height: height * size,\n    }));\n\n    const connectionObjects = connections.map(([n1, n2]) => ({\n        node1: regionObjects[n1],\n        node2: regionObjects[n2],\n    }));\n\n    // Create a graph of the map in order to evaluate the solution\n    return {\n        regions: regionObjects,\n        connections: connectionObjects\n    };\n}\n\n// Convert a number to n object with a colour attribute equal to that number and a fixed attribute\nconst colourNumberToColourObject = colour => ({\n    colour,\n    fixed: colour > 0\n});\n\nexport function getSequenceObject({ pattern, answer }) {\n    //  Get a sequence of node objects\n    const sequence = pattern.map(colourNumberToColourObject);\n\n    // Target sequence is the starting sequence with any 0s replaced by the answer items\n    let n = 0;\n    const target = pattern.map(colour => {\n        if (colour > 0) {\n            return { colour };\n        } else {\n            return { colour: answer[n++] };\n        }\n    });\n\n    return { sequence, target };\n}\n\nexport function getCombinationObject({ pattern, items }) {\n    //  Get an array of linear graphs\n    const sequences = pattern.map(sequence => getGraphObject(linearGraph(sequence)));\n\n    // Find all combinations based on the length of the first item in the pattern\n    const combinations = getCombinationsWithReplacement(items, pattern[0].length);\n    const combinationSet = new Set(combinations.map(combination => combination.join('-')))\n\n    return { sequences, target: combinationSet };\n}\n\n// Given an array of arrays of numbers, return an array of graph objects\n// These can be linear graphs or looped graphs\nexport function getGraphSet({ graphs, loop }) {\n    const graphType = loop ? loopGraph : linearGraph;\n    const sequence = graphs.map(graph => getGraphObject(graphType(graph)));\n    return { sequence };\n}\n\n// TODO: Combine with getGraphSet\nexport function getGraphSequence({ sequence, answer }) {\n    const graphs = [];\n    const target = [];\n\n    let n = 0;\n    sequence.forEach(graph => {\n        if (graph) {\n            graphs.push(getGraphObject(graph));\n            target.push(getGraphObject(graph));\n        } else {\n            // Target sequence is the starting sequence with any nulls replaced by the answer graphs\n            const answerGraph = getGraphObject(answer[n]);\n            target.push(answerGraph);\n            \n            // Displayed sequence show answer as a blank graph\n            const blankGraph = getGraphObject(answer[n]);\n            blankGraph.nodes.forEach(node => {\n                node.fixed = false;\n                node.colour = 0;\n            });\n\n            graphs.push(blankGraph);\n            target.push(answerGraph);\n            n++;\n        }\n    });\n\n    return { sequence: graphs, target };\n}\n\n// Return an array of category object which have a colour, and an object to display\nexport function getCategoryObjects({ categories, randomRotate, itemProps={} }) {\n    const categoryObjects = [];\n    \n    categories.forEach(category => {\n        const copies = category.copies || 1;\n        const item = Object.assign(category.item, itemProps);\n\n        for (let i = 0; i < copies; i++) {\n            categoryObjects.push({\n                category: category.type,\n                colour: category.colour || 0,\n                object: item,\n                rotate: randomRotate ? Math.floor(Math.random() * 12) * 30 : 0\n            });\n        }\n    });\n\n    return shuffle(categoryObjects);\n}\n","// Test whether all items are bigger than 0 or have an attrubute with value bigger than 0\nexport const allItemsHaveValue = (items=[], attr) =>\n    attr ?\n        items.every(item => item[attr] > 0) :\n        items.every(item => item > 0);\n\nexport const allItemsColoured = (items=[]) => allItemsHaveValue(items, 'colour');\n\nexport const extractAttribute = (items=[], attr) => items.map(item => item[attr]);\n\n// Convert a graph into a string of node colours, separates by hypens, e.g. 1-1-2\nconst graphToStringOfNodes = graph => extractAttribute(graph.nodes, 'colour').join('-');\n\nconst graphToStringOfSortedNodes = graph => extractAttribute(graph.nodes, 'colour').sort().join('-');\n\n// Check that two sets of sets contain sam set of sets\n// e.g. ((1, 1), (1, 2)) = ((2, 1), (1,1))\nexport function setOfSetsEqual({ sequence }, targetSet) {\n    const sequenceSet = new Set(sequence.map(graphToStringOfSortedNodes));\n\n    // Check the this set of sequences matches the set of permutations\n    return (sequenceSet.size === targetSet.size)\n        && [...sequenceSet].every(value => targetSet.has(value));\n}\n\n// Check the the given set of sequences matches a set of sequences.\nexport function sequenceSetMatches({ sequence }, targetSet) {\n    // Check all the sequences are fully coloured\n    if (!sequence.every(graph => allItemsColoured(graph.nodes))) {\n        return false;\n    }\n\n    // Get a set of sequence values,\n    // where a sequence value is a string of numbers separated by hypens, e.g. 1-2\n    const sequenceSet = new Set(sequence.map(graphToStringOfNodes));\n\n    // Check the this set of sequences matches the set of permutations\n    return (sequenceSet.size === targetSet.size)\n        && [...sequenceSet].every(value => targetSet.has(value));\n};\n\nexport function allGraphsInSequenceAreDifferent(sequence) {\n    const graphStrings = sequence.map(graphToStringOfNodes);\n    const n = graphStrings.length;\n    for (let i = 0; i < n - 1; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (graphStrings[i] === graphStrings[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nexport function allConnectedItemsHaveDifferentColours(cxns=[]) {\n    // Colour any edge that connects two nodes of the same colour\n    let matches = 0;\n    cxns.forEach((cxn) => {\n        if (cxn.node1.colour && cxn.node1.colour === cxn.node2.colour) {\n            cxn.colour = cxn.node1.colour;\n            cxn.flashing = true;\n            matches++;\n        } else {\n            cxn.colour = null;\n            cxn.flashing = false;\n        }\n    });\n    return matches === 0;\n}\n\nexport const graphIsChromatic = ({ nodes, edges }) => \n    allConnectedItemsHaveDifferentColours(edges) &&\n    allItemsColoured(nodes);\n\nexport const sequencesMatch = (seq1, seq2, attr) => {\n    if (seq1.length !== seq2.length) { return false; }\n    for (let i = 0; i < seq1.length; i++) {\n        const value1 = attr ? seq1[i][attr] : seq1[i];\n        const value2 = attr ? seq2[i][attr] : seq2[i];\n        if (value1 !== value2) {\n            return false;\n        }\n    }\n    return true;\n};\n\nexport const sequenceHasNoMatches = (seq1, seq2) => {\n    const n = Math.min(seq1.length, seq2.length);\n\n    for (let i = 0; i < n; i++) {\n        if (seq1[i] === seq2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test whether there is a consistent mapping between the values in one array to the value the other\nexport const sequencesAreEquivalent = (seq1, seq2) => {\n    if (seq1.length !== seq2.length) { \n        return false;\n    }\n\n    const mapping1 = new Map();\n    const mapping2 = new Map();\n\n    for (let i = 0; i < seq1.length; i++) {\n        const value1 = mapping1.get(seq1[i]);\n        const value2 = mapping2.get(seq2[i]);\n\n        if (value1 === undefined) {\n            mapping1.set(seq1[i], seq2[i]);\n        } else if (value1 !== seq2[i]) {\n            return false;\n        }\n\n        if (value2 === undefined) {\n            mapping2.set(seq2[i], seq1[i]);\n        } else if (value2 !== seq1[i]) {\n            return false;\n        }\n        \n    }\n\n    return true;\n};\n\n// Test whether the nodes of two graphs are the same colour\nexport const graphNodesAreSameColour = ({ blank, target }) => \n    allItemsColoured(blank.nodes) &&\n    sequencesMatch(blank.nodes, target.nodes, 'colour');\n\n// Test whether the nodes of two graphs have the same pattern,\n// i.e. there is a consistent mapping from the colours in one graph to the colour in the target\nexport const graphNodesHaveSamePattern = ({ blank, target }) =>\n    allItemsColoured(blank.nodes) &&\n    sequencesAreEquivalent(blank.nodes, target.nodes);\n\nexport const samePatternButDifferent = (seq1, seq2) =>\n    allItemsHaveValue(seq1) &&\n    allItemsHaveValue(seq2) &&\n    sequenceHasNoMatches(seq1, seq2) &&\n    sequencesAreEquivalent(seq1, seq2);\n\n\nexport const graphIsDisjoint = (nodes) => {\n    nodes.forEach(node => node.visited = false);\n    \n    // Begin with the first node\n    const frontier = [nodes[0]];\n    nodes[0].visited = true;\n    let nodeCount = 1;\n\n    while(frontier.length > 0) {\n        const node = frontier.pop();\n        const edges = node.edges;\n\n        for (const nextNodeId in edges) {\n            // If edge not cut and node hasn't been visited\n            if (!edges[nextNodeId].colour) {\n                const nextNode = nodes[nextNodeId];\n                if (!nextNode.visited) {\n                    frontier.push(nextNode)\n                    nextNode.visited = true;\n                    nodeCount++;\n                }\n            }\n        }\n    }\n\n    return nodeCount < nodes.length;\n}","import React from 'react';\nimport { nTimes } from '../../utils/common';\n\n\n// Size of chamber\nconst TOOLBAR_R = 136;\n\n// Angle between button\nconst DELTA_ANGLE = Math.PI / 18;\n\nfunction getPositionsAroundCircle(n, r, baseAngle=0) {\n    const direction = baseAngle < 0 ? 1 : -1;\n    const startAngle = baseAngle - direction * (DELTA_ANGLE * (n - 1) / 2);\n\n    // Array of button positions\n    return nTimes(n, (_, i) => {\n        const angle = startAngle + direction * i * DELTA_ANGLE;\n        return {\n            angle,\n            x: r * Math.cos(angle),\n            y: r * Math.sin(angle)\n        }\n    });\n}\n\nfunction ButtonSet({ buttons, startAngle }) {\n    const r = 8;\n    const positionR = TOOLBAR_R + r;\n    const positions = getPositionsAroundCircle(buttons.length, positionR, startAngle);\n\n    return (\n        <g className=\"toolbar\" role=\"radiogroup\">\n            {\n                buttons.map(({ component, ...props }, index) => {\n                    const position = positions[index];\n                    const Component = component;\n                    props.angle = position.angle;\n                    return (\n                        <Component\n                            key={index}\n                            role=\"radio\"\n                            cx={position.x}\n                            cy={position.y}\n                            r={r}\n                            {...props}\n                        />\n                    );\n                })\n            }\n        </g>\n    );\n}\n\nexport default ButtonSet;\n","import React from 'react';\nimport { handleKeyDown, nTimes } from '../../utils/common';\n\n\nexport const SVGButton = (props) =>\n    <circle\n        r=\"9\"\n        role=\"button\"\n        tabIndex=\"0\"\n        onKeyDown={evt => handleKeyDown(evt, props.onClick)}\n        {...props} />\n\n// Get an array of dots around the colour button to show how many times we can use it\nconst showColourCounter = (n, colour, x, y, angle, r) => {\n    if (!n) { return null; }\n    const dAngle = Math.PI * 2 / (3 * n);\n    angle += dAngle * (n - 1) / 2;\n\n    return nTimes(n, (_, index) => (\n        <circle\n            key={index}\n            className={`fill-${ colour }`}\n            r={r * 0.3}\n            cx={x + (r * 1.6) * Math.cos(angle - index * dAngle)}\n            cy={y + (r * 1.6) * Math.sin(angle - index * dAngle)}\n        />\n    ));\n}\n\nexport const ColourButton = ({\n    colour,\n    count,\n    angle,\n    puzzle,\n    ...props,\n}) => {\n    const selectedColour = puzzle.state.selectedColour;\n    const setColour = () => puzzle.setState({ selectedColour: colour });\n\n    const button = (\n        <SVGButton\n            className={`colour-palette colour-${ colour }`}\n            aria-checked={selectedColour === colour}\n            r=\"8\"\n            onClick={setColour}\n            {...props}\n        />\n    );\n\n    if (count > 0) {\n        return (\n            <g key={colour}>\n                { button }\n                { showColourCounter(count, colour, props.cx, props.cy, angle, props.r) }\n         </g>\n        );\n    } else {\n        return button;\n    }\n};\n\nexport const Button = (props) =>\n    <svg viewBox=\"-15 -15 31 31\">\n        <SVGButton r=\"9\" {...props} />\n    </svg>\n","import React from 'react';\n\nimport ButtonSet from './ButtonSet';\nimport { SVGButton, ColourButton } from './Button';\n\n\nfunction ColourToolbar({ puzzle, colours, clearPuzzle, startAngle }) {\n    const buttons = colours.map((colourCount, index) => ({\n        component: ColourButton,\n        colour: index + 1,\n        count: colourCount,\n        puzzle,\n    }));\n\n    if (clearPuzzle) {\n        buttons.push({\n            component: SVGButton,\n            key: \"clear-button\",\n            color: \"white\",\n            className: \"colour-palette\",\n            onClick: clearPuzzle\n        });\n    }\n\n    return <ButtonSet buttons={buttons} startAngle={startAngle} />;\n}\n\nexport default ColourToolbar;\n","import React from 'react';\n\nimport ButtonSet from './ButtonSet';\nimport { SVGButton } from './Button';\n\n\nfunction PuzzlePreviewToolbar({ puzzle, startAngle }) {\n    const puzzles = puzzle.props.puzzles;\n    const buttons = puzzles.map((_, index) => {\n        let className = 'puzzle-preview';\n        let onClick;\n        if (index === puzzle.state.index) {\n            className += ' selected';\n        } else if (index <= puzzle.state.maxIndex) {\n            className += ' puzzle-done';\n            onClick = () => puzzle.getPuzzle(index);\n        }\n        return {\n            component: SVGButton,\n            color: \"white\",\n            className,\n            puzzle,\n            onClick,\n        };\n    });\n\n    return <ButtonSet buttons={buttons} startAngle={startAngle} />;\n};\n\nexport default PuzzlePreviewToolbar;\n","import React from 'react';\nimport { withRouter } from 'react-router';\nimport { parse } from 'query-string';\n\nimport { getArray } from '../utils/common';\nimport ColourToolbar from './Toolbars/ColourToolbar';\nimport PuzzlePreviewToolbar from './Toolbars/PuzzlePreviewToolbar';\nimport { Button } from './Toolbars/Button';\n\nimport './puzzle.css';\nimport './puzzleChamber.css';\n\n\nconst COLOURS = [\n    'rgb(170, 170, 170)',\n    'rgb(20, 146, 196)',\n    'rgb(196, 20, 96)',\n    'rgb(20, 198, 96)',\n    'rgb(220, 220, 20)',\n];\n\nclass PuzzlePage extends React.Component {\n    constructor(props) {\n        super(props);\n   \n        const queryString = parse(props.location.search);\n        const index = parseInt(queryString.q) || 0;\n\n        this.state = {\n            index,\n            maxIndex: index,\n            solved: false,\n            selectedColour: null,\n        }\n\n        this.clear = this.clear.bind(this);\n        this.update = this.update.bind(this);\n        this.getPuzzle = this.getPuzzle.bind(this);\n        this.nextPuzzle = this.nextPuzzle.bind(this);\n        this.backToMenu = this.backToMenu.bind(this);\n    }\n\n    componentDidMount() {\n        // Load the first puzzle\n        this.getPuzzle(this.state.index);\n    }\n\n    getPuzzle(index) {\n        this.setState({ index });\n        const { getPuzzleObject, puzzles } = this.props;\n        const getSolutionObject = this.props.getSolutionObject || (puzzle => puzzle);\n        const puzzle = puzzles[index];\n\n        // If colourPalette is a number then convert it into an array of -1s\n        // to indicate that each colour can be used infinitely\n        const colourPalette = getArray(this.props.colourPalette || puzzle.colourPalette, -1);\n\n        if (puzzle) {\n            this.setState({\n                puzzle: getPuzzleObject(puzzle),\n                solution: getSolutionObject(puzzle),\n                clearButton: puzzle.clearButton,\n                colourPalette,\n            });\n        }\n    }\n\n    nextPuzzle() {\n        const nextState = this.state.index + 1;\n        const maxIndex = Math.max(nextState, this.state.maxIndex);\n        this.setState({\n            maxIndex,\n            solved: false,\n            selectedColour: null\n        });\n        this.getPuzzle(nextState);\n    }\n\n    backToMenu() {\n        this.props.history.push(\"/\")\n    }\n\n    clear() {\n        this.getPuzzle(this.state.index);\n    }\n\n    // Child element has updated so evaluate to see if puzzle has been solved\n    update() {\n        const { puzzle, solution } = this.state;\n        const solved = this.props.evaluate(puzzle, solution);\n        this.setState({ puzzle, solved });\n    }\n\n    getNextPuzzleButton() {\n        // Only show button if the puzzle has been solved\n        if (!this.state.solved) { return null; }\n\n        if (this.state.index < this.props.puzzles.length - 1) {\n            // Button to go to the next puzzle\n            return <div className=\"menu-button next-puzzle-button\" aria-label=\"Next puzzle\">\n                <Button onClick={this.nextPuzzle}/>\n            </div>\n        } else {\n            // Button to go back to the home page\n            return <div className=\"menu-button next-puzzle-button\" aria-label=\"Puzzle completed\" role=\"link\">\n                <Button onClick={this.backToMenu}/>\n            </div>\n        }\n    }\n\n    render() {\n        const { index, puzzle, selectedColour } = this.state;\n        if (!puzzle) { return null; }\n\n        const colourPalette = this.state.colourPalette || this.props.colourPalette;\n        const clearPuzzle = (this.state.clearButton || this.props.clearButton) ? this.clear : null;\n\n        // Determine what the selected colour is if we have selected one\n        const style = {\n            color: COLOURS[selectedColour || 0]\n        };\n        const className = selectedColour ? \"colour-selected\" : \"\";\n\n        let selectColourIndicator = \"selected-colour-indicator\";\n        if (selectedColour) {\n            selectColourIndicator += ` colour-${selectedColour}`;\n        }\n\n        return <main>\n            <nav>\n                <div className=\"menu-button back-button\" aria-label=\"Back to menu\" role=\"link\">\n                    <Button onClick={this.backToMenu}/>\n                </div>\n\n                { this.getNextPuzzleButton() }\n            </nav>\n\n            <svg id=\"puzzle-chamber\" viewBox=\"-128 -128 256 256\" preserveAspectRatio=\"xMidYMid meet\">\n                <defs>\n                    <filter id=\"shadow-filter\">\n                        <feOffset result=\"offOut\" in=\"SourceAlpha\" dx=\"2\" dy=\"2\"/>\n                        <feGaussianBlur result=\"blurOut\" in=\"offOut\" stdDeviation=\"5\" />\n                        <feBlend in=\"SourceGraphic\" in2=\"blurOut\" mode=\"normal\" />\n                    </filter>\n                    <filter id=\"glow-filter\" x=\"-250%\" y=\"-250%\" width=\"500%\" height=\"500%\">\n                        <feMorphology in=\"mask\" result=\"dilated\" operator=\"dilate\" radius=\"1\" />\n                        <feGaussianBlur stdDeviation=\"3\" result=\"colouredBlur\" />\n                        <feMerge>\n                            <feMergeNode in=\"coloredBlur\"/>\n                            <feMergeNode in=\"SourceGraphic\"/>\n                        </feMerge>\n                    </filter>\n                </defs>\n\n                <rect className=\"background\" x=\"-200\" y=\"-200\" width=\"400\" height=\"400\" />\n\n                <g id=\"puzzle\" key={index} className={className} style={style}>\n                    { this.props.displayPuzzle(puzzle, this) }\n                </g>\n\n                <circle id=\"chamber-window\" r=\"212\" />\n                <circle className={selectColourIndicator} r=\"132\" />\n\n                <ColourToolbar \n                    puzzle={this}\n                    colours={colourPalette}\n                    clearPuzzle={clearPuzzle}\n                    selectedColour={selectedColour}\n                    startAngle={-Math.PI}\n                />\n\n                <PuzzlePreviewToolbar puzzle={this} />\n\n            </svg>\n        </main>\n    }\n};\n\nexport default withRouter(PuzzlePage);\n","import React from 'react';\n\n\nexport const Line = ({ className, x1, y1, x2, y2 }) =>\n    <line className={className} x1={x1} y1={y1} x2={x2} y2={y2} />\n","import { handleKeyDown } from '../../utils/common';\n\n\n// Given a node, return props to make it colourable\nexport function isColourable(item, chamber, {className=\"\", onColour=null}={}) {\n    if (item.colour) {\n        className += ` fill-${item.colour}`;\n    } else if (item.inactive) {\n        className += \" inactive\";\n    } else {\n        className += \" no-fill\";\n    }\n\n    if (item.fixed || item.inactive) {\n        return { className };\n    }\n\n    className += \" colourable\";\n\n    const colour = chamber.state.selectedColour;\n    const colourUses = chamber.state.colourPalette.slice();\n\n    const colourThisItem = () => {\n        if (!colour) { return; }\n\n        if (item.colour === colour) {\n            // Remove exisiting colour\n            item.colour = 0;\n            colourUses[colour - 1]++;\n        } else if (colourUses[colour - 1] !== 0) {\n            // If item is already coloured, add that colour back\n            if (item.colour) {\n                colourUses[item.colour - 1]++;\n            }\n            // Colour item\n            item.colour = colour;\n            colourUses[colour - 1]--;\n        }\n\n        if (onColour) { onColour(item); }\n        chamber.setState({ colourPalette: colourUses })\n        chamber.update();\n    };\n\n    return {\n        className,\n        tabIndex: 0,\n        onClick: colourThisItem,\n        onKeyDown: (evt) => handleKeyDown(evt, colourThisItem)\n    };\n}\n","/****************************************************************\n * Graph object consisting of node and edges.\n * Both nodes and edges may be coloured or colourable.\n*****************************************************************/\nimport React from 'react';\nimport { Line } from './Primitives';\nimport { isColourable } from '../utils/isColourable';\n\n\n// A connection between two nodes\nfunction Edge(props) {\n    if (props.hidden) { return null; }\n    const flashing = props.flashing ? 'flashing' : '';\n    const edgeColour = props.colour ? `stroke-${ props.colour }`: '';\n    return (\n        <g className={flashing}>\n            <Line className=\"edge-outline\" {...props} />\n            <Line className={edgeColour} {...props} />\n        </g>\n    );\n}\n\nfunction ColourableEdge({ chamber, onColour, edge }) {\n    const dx = edge.x2 - edge.x1;\n    const dy = edge.y2 - edge.y1;\n    const angle = Math.atan2(dy, dx) * 180 / Math.PI;\n    const length = Math.sqrt(dx * dx + dy * dy);\n\n    return (\n        <rect\n            transform={`translate(${edge.x1} ${edge.y1}) rotate(${angle})`}\n            y={-3}\n            width={length}\n            height={6}\n            {...isColourable(edge, chamber, { onColour })}\n        />\n    );\n}\n\n// Display a graph in which the nodes have the potential to be coloured\nexport const Graph = ({ edges=[], nodes=[], chamber, onColour }) =>\n    <g className=\"graph\">\n        <g className=\"graph-edges\">\n            { edges.map((edge, i) => <Edge key={i} {...edge} /> )}\n        </g>\n        <g className=\"graph-nodes\">\n            { nodes.map((node, i) => \n                <g key={i} transform={`translate(${ node.x } ${ node.y })`}>\n                    <circle className=\"node-outline\" r={node.r} />\n                    <circle r={node.r} {...isColourable(node, chamber, { onColour })} />\n                </g>\n            )}\n        </g>\n    </g>\n\n// A graph where the edges can be selected\nexport const EdgeGraph = ({ edges=[], nodes=[], chamber, onColour }) => {\n    return <g className=\"graph\">\n        <g className=\"graph-edges\">\n            { edges.map((edge, i) => <ColourableEdge key={i} chamber={chamber} onColour={onColour} edge={edge} />) }\n        </g>\n        <g className=\"graph-nodes\">\n            { nodes.map((node, i) => {\n                let className = node.colour ? `fill-${node.colour}` : 'no-fill';\n                if (node.current) { className += ' current'; }\n                return (\n                    <g key={i} transform={`translate(${node.x} ${node.y})`}>\n                        <circle className=\"node-outline\" r={node.r} />\n                        <circle className={className} r={node.r} />\n                    </g>\n                );\n            }\n            )}\n        </g>\n    </g>\n}\n\nexport const ColourableGraph = (graph, chamber) => <Graph {...graph} chamber={chamber} />\n\nexport const ColourableEdgeGraph = (graph, chamber) => <EdgeGraph {...graph} chamber={chamber} />\n\n// Colour an Euler path - visiting every nodes once\n// A colourable graph where one node starts coloured and you can colour its edges\n// Colouring an edge will colour the next node and let you colour its edges\nexport const ColourableHamilitonianPath = (graph, chamber) => {\n    const colour = chamber.state.selectedColour;\n\n    const updateNodes = () => {\n        if (!graph.path) { return; }\n\n        const selectedNode = graph.path[graph.path.length - 1];\n        if (selectedNode) {\n            graph.nodes.forEach(node => {\n                if (node === selectedNode) {\n                    node.inactive = false;\n                } else if (node.edges[selectedNode.index] && !node.colour) {\n                    // Nodes that are next to the selected node and aren't coloured can be coloured\n                    node.inactive = false;\n                } else {\n                    node.inactive = true;\n                }\n            });\n        } else {\n            // No nodes left in the path, so all nodes are active\n            graph.nodes.forEach(node => node.fixed = false);\n        }\n    }\n\n    const onColour = selectedNode => {\n        const nodeIndex = selectedNode.index;\n\n        if (selectedNode.colour) {\n            selectedNode.current = true;\n\n            if (!graph.path) { graph.path = []; }\n\n            // Colour the edge of the path\n            const previousNode = graph.path.slice(-1)[0];\n            if (previousNode) {\n                previousNode.edges[nodeIndex].colour = colour;\n            }\n\n            // Add new node to the path\n            graph.path.push(selectedNode);\n        } else {\n            // Remove the node we clicked on\n            graph.path.pop();\n            const previousNode = graph.path.slice(-1)[0];\n            if (previousNode) {\n                previousNode.edges[nodeIndex].colour = 0;\n            }\n            // The active node is now the previous node in the path\n            selectedNode = previousNode;\n        }\n\n        updateNodes();\n    };\n\n    updateNodes();\n    return <Graph {...graph} chamber={chamber} onColour={onColour} />\n};\n\n// Colour an Euler path - visiting every edge once, but vertices more than once\n// A colourable graph where you start by colouring one node, then and you can colour its edges\n// Colouring an edge will colour the next node and let you colour its edges\nexport function ColourableEulerPath(graph, chamber) {\n    // Inactive edges are those not next to the current nodes\n    function labelInactiveEdges() {\n        graph.edges.forEach(edge => {\n            edge.inactive = (!edge.node1.current && !edge.node2.current) ||\n                (edge.colour && edge !== graph.path[graph.path.length - 1]);\n        });\n    }\n\n    // Function that updates graph state when an edge is coloured,\n    // making the next node in the path current and activating the others.\n    const onColourEdge = edge => {\n        // Update path depending on whether we are colouring or decolouring an edge\n        if (edge.colour) {\n            graph.path.push(edge);\n        } else {\n            graph.path.pop();\n        }\n\n        if (edge.node1.current) {\n            edge.node1.colour = edge.colour;\n            edge.node1.current = false;\n            edge.node2.current = true;\n        } else {\n            edge.node2.colour = edge.colour;\n            edge.node2.current = false;\n            edge.node1.current = true;\n        }\n        labelInactiveEdges();\n    };\n\n    const onColourNode = node => {\n        node.colour = 0;\n        node.current = true;\n        graph.path = [];\n        labelInactiveEdges();\n    };\n\n    if (graph.nodes.some(node => node.current)) {\n        return <EdgeGraph {...graph} chamber={chamber} onColour={onColourEdge} />;\n    } else {\n        // Need to select a node first\n        return <Graph {...graph} chamber={chamber} onColour={onColourNode} />;\n    }\n}\n\n// A colourable graph, where colouring a node also colours any adjacent nodes\nexport const DominatingSet = (graph, chamber) => {\n    const onColour = node => {\n        const nodeIndex = node.index;\n        const targetNode = graph.nodes[nodeIndex];\n        const neighbours = Object.keys(targetNode.edges);\n\n        if (targetNode.colour) {\n            // Colour neighbours\n            neighbours.forEach(n => {\n                // Colour node if it is not coloured\n                if (!graph.nodes[n].colour) {\n                    graph.nodes[n].colour = 2;\n                }\n                // Colour edge\n                targetNode.edges[n].active = 2;\n            })\n        } else {\n            // Remove colour from neighbour unless they are next to other coloured nodes\n            neighbours.forEach(n => {\n                targetNode.edges[n].active = 0;\n                const node = graph.nodes[n];\n                if (node.colour === 2) {\n                    // Check neighbours for nodes that are coloured\n                    if (Object.keys(node.edges).every(n2 => graph.nodes[n2].colour !== 1)) {\n                        node.colour = 0;\n                    } \n                } else if (node.colour === 1) {\n                    // This node is next to a different coloured node, so colour with colour 2\n                    targetNode.colour = 2;\n                    targetNode.edges[n].active = 2;\n                }\n            })\n        }\n    }\n\n    return <Graph {...graph} chamber={chamber} onColour={onColour} />\n};\n","import React from 'react';\n\nimport { TutorialIcon } from './Icon';\nimport { getGraphSet } from '../utils/loadPuzzle';\nimport { graphIsChromatic } from '../utils/evaluate';\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { ColourableGraph } from '../PuzzleComponents/Graph';\n\n\nconst puzzle = [{\n    colourPalette: 1,\n    graphs: [[0]]\n}, {\n    colourPalette: 2,\n    graphs: [[1, 2], [0, 0]]\n}];\n\nconst PuzzleComponent = () => <PuzzlePage\n        puzzles={puzzle}\n        evaluate={graphIsChromatic}\n        getPuzzleObject={getGraphSet}\n        displayPuzzle={ColourableGraph}\n    />\n\nconst Tutorial = {\n    name: 'Tutorial',\n    slug: 'tutorial',\n    icon: TutorialIcon,\n    component: PuzzleComponent,\n    available: true,\n};\n\nexport default Tutorial;\n","import React from 'react';\n\n\nconst SequencesIcon1 = (\n    <g className=\"graph-nodes\">\n        <rect className=\"colour-1\" x=\"-37.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"-22.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"-7.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"7.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"22.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n    </g>\n);\n\nconst SequencesIcon2 = (\n    <g className=\"graph-nodes\">\n        {[1, 2, 1, 0, 1, 2, 1].map((colour, index) =>\n            <rect\n                key={index}\n                className={\"colour-\" + colour}\n                x={-42 + index * 12}\n                y=\"-7.5\"\n                width=\"12\" height=\"12\" rx=\"2\" ry=\"2\" />\n        )}\n    </g>\n);\n\nconst SequencesIcon3 = (\n    <g>\n        <defs>\n            <g id=\"triangle\" className=\"graph-edges\">\n                <line x1=\"-15\" y1=\"13\" x2=\"0\" y2=\"-13\" />\n                <line x1=\"-15\" y1=\"13\" x2=\"15\" y2=\"13\" />\n                <line x1=\"0\" y1=\"-13\" x2=\"15\" y2=\"13\" />\n            </g>\n            <g id=\"triangle-1\">\n                <use href=\"#triangle\" />\n                <g className=\"graph-nodes\">\n                    <circle className=\"colour-1\" cx=\"-15\" cy=\"13\" r=\"7\" />\n                    <circle className=\"colour-2\" cx=\"0\" cy=\"-13\" r=\"7\" />\n                    <circle className=\"colour-1\" cx=\"15\" cy=\"13\" r=\"7\" />\n                </g>\n            </g>\n            <g id=\"triangle-2\">\n                <use href=\"#triangle\" />\n                <g className=\"graph-nodes\">\n                    <circle className=\"colour-2\" cx=\"-15\" cy=\"13\" r=\"7\" />\n                    <circle className=\"colour-1\" cx=\"0\" cy=\"-13\" r=\"7\" />\n                    <circle className=\"colour-2\" cx=\"15\" cy=\"13\" r=\"7\" />\n                </g>\n            </g>\n        </defs>\n\n        <use href=\"#triangle-1\" transform=\"translate(-34, -4) scale(0.45)\"/>\n        <use href=\"#triangle-2\" transform=\"translate(-11, -4) scale(0.45)\"/>\n        <use href=\"#triangle-1\" transform=\"translate(11, -4) scale(0.45)\"/>\n        <use href=\"#triangle-2\" transform=\"translate(34, -4) scale(0.45)\"/>\n    </g>\n);\n\nexport default [\n    SequencesIcon1,\n    SequencesIcon2,\n    SequencesIcon3,\n];\n","import React from 'react';\nimport { Graph } from './Graph';\nimport { sum } from '../../utils/common';\nimport { isColourable } from '../utils/isColourable';\nimport { getGraphBBox } from '../utils/graphUtils';\n\n\n// Calculate the size of items in a sequence based on the number of items in the sequence\nconst getSize = n =>  Math.min(24, 200 / n);\n\n// Sequence of blocks in a line, some of which may be colourable\nconst Sequence = ({ sequence=[], y=0, chamber }) => {\n    const size = getSize(sequence.length);\n    const startX = -(sequence.length * size) / 2;\n\n    return <g className=\"sequence\">\n        { sequence.map((item, i) =>\n            <rect\n                key={i}\n                x={startX + i * size }\n                y={y - size / 2}\n                width={size - 1}\n                height={size - 1}\n                rx=\"3\"\n                ry=\"3\"\n                {...isColourable(item, chamber)}\n            />\n        )}\n    </g>\n};\n\n// Wrapper function to return Sequence component\nexport function ColourableSequence(puzzle, chamber) {\n    return <Sequence {...puzzle} chamber={chamber} />;\n}\n\n// Given an array of sequences, draw each graph in the sequence, one after another\nexport function GraphRow({ sequence }, chamber) {\n    // Get size of graphs with 10% for the gap\n    const GAP = sequence.gap || 0.1\n\n    const n = sequence.length;\n    let totalWidth = sum(sequence.map(getGraphBBox), graph => graph.width);\n    const gapSize = GAP * totalWidth / (n - 1);\n\n    if (n > 1) { totalWidth *= (1 + GAP); }\n\n    const scale = Math.min(1, 240 / totalWidth);\n    totalWidth *= scale;\n\n    const graphs = [];\n    let x = -totalWidth / 2;\n\n    sequence.forEach((graph, index) => {\n        const bbox = getGraphBBox(graph);\n        graphs.push(\n            <g key={index} transform={`translate(${x - bbox.x1} 0) scale(${scale})`}>\n                <Graph {...graph} chamber={chamber}/>\n            </g>\n        );\n        x += scale * (gapSize + bbox.width);\n    });\n    \n    return graphs;\n}\n// Given an array of sequences, draw each graph in the sequence, one under another\nexport function GraphColumn({ sequence }, chamber) {\n    // Get size of graphs with 10% for the gap\n    const GAP = 1;\n\n    const n = sequence.length;\n    let totalHeight = sum(sequence.map(getGraphBBox), graph => graph.height);\n\n    const gapSize = GAP * totalHeight / (n + 1);\n    if (n > 1) { totalHeight *= (1 + GAP); }\n    const scale = Math.min(1, 240 / totalHeight);\n    totalHeight *= scale;\n\n    const graphs = [];\n    let y = -totalHeight / 2;\n\n    sequence.forEach((graph, index) => {\n        const bbox = getGraphBBox(graph);\n        graphs.push(\n            <g key={index} transform={`translate(0 ${y - bbox.y1}) scale(${scale})`}>\n                <Graph {...graph} chamber={chamber}/>\n            </g>\n        );\n        y += scale * (gapSize + bbox.height);\n    });\n    \n    return graphs;\n}\n\n// Draw a set of graphs, one below the other\nexport const Sequence2D = (puzzle, chamber) => {\n    const graphs = puzzle.sequences;\n    const size = 1.25 * getSize(Math.max(graphs.length, graphs[0].nodes.length));\n    const startY = -((graphs.length - 1) * size) / 2;\n\n    return graphs.map((graph, index) =>\n        <g key={index} transform={`translate(0 ${startY + index * size})`}>\n            <Graph {...graph} chamber={chamber}/>\n        </g>\n    );\n}\n","/*\n * Given a sequence of objects, continue it or fill in the missing bits.\n */\n\nimport React from 'react';\n\nimport Icons from './Icons';\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { ColourableSequence } from '../PuzzleComponents/Sequence';\nimport { getSequenceObject } from '../utils/loadPuzzle';\nimport { sequencesMatch } from '../utils/evaluate';\n\n\n// Sequence of coloured blocks with uncoloured blocks at the end\nconst puzzles1 = [\n    {\n        colourPalette: 1,\n        pattern: [1, 1, 1, 0],\n        answer: [1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 1, 1, 1, 0, 0],\n        answer: [1, 1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 1, 2, 1, 2, 0, 0],\n        answer: [1, 2]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 1, 2, 3, 0, 0, 0],\n        answer: [1, 2, 3]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 1, 2, 2, 1, 1, 0, 0],\n        answer: [2, 2]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 2, 1, 2, 2, 0, 0, 0],\n        answer: [1, 2, 2]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 3, 1, 2, 3, 3, 0, 0, 0, 0],\n        answer: [1, 2, 3, 3]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 0, 0],\n        answer: [1, 2, 1, 1]\n    }\n];\n\n// Sequence of coloured blocks with uncoloured blocks in the middle of the sequence\nconst puzzles2 = [\n    {\n        colourPalette: 1,\n        pattern: [1, 1, 0, 1, 1],\n        answer: [1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 1, 0, 1, 2, 1],\n        answer: [2]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 0, 2, 3],\n        answer: [1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 1, 2, 2, 1, 0, 0, 2],\n        answer: [1, 2]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 2, 1, 2, 0, 0, 2, 2],\n        answer: [2, 1]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1],\n        answer: [3]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 0, 0, 3, 1, 2, 3, 2, 1],\n        answer: [2, 1]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 1, 0, 0, 0, 1, 2, 3, 1, 1, 2, 3],\n        answer: [2, 3, 1]\n    }\n];\n\nconst correctSequence = ({ sequence, target }) => sequencesMatch(sequence, target, 'colour');\n\nconst PuzzleComponent = ({ puzzle }) => \n    <PuzzlePage\n        puzzles={puzzle}\n        evaluate={correctSequence}\n        getPuzzleObject={getSequenceObject}\n        displayPuzzle={ColourableSequence}\n    />\n\nconst BasicSequences = [{\n    name: 'Sequences 1',\n    slug: 'sequences-1',\n    icon: Icons[0],\n    component: () => <PuzzleComponent puzzle={puzzles1} />,\n}, {\n    name: 'Sequences 2',\n    slug: 'sequences-2',\n    icon: Icons[1],\n    component: () => <PuzzleComponent puzzle={puzzles2} />,\n}];\n\nexport default BasicSequences;\n","/*\n * Given a sequence of objects, continue it or fill in the missing bits.\n */\n\nimport React from 'react';\n\nimport Icons from './Icons';\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { GraphRow } from '../PuzzleComponents/Sequence';\nimport { getGraphSequence } from '../utils/loadPuzzle';\nimport { sequencesMatch } from '../utils/evaluate';\nimport { triangleGraph, squareGraph } from '../utils/graphUtils';\n\n\n// Sequence of coloured graphs with uncoloured one at the end\nconst t1 = triangleGraph(1);\nconst t2 = triangleGraph(2);\nconst t112 = triangleGraph([1, 1, 2]);\nconst t221 = triangleGraph([2, 2, 1]);\nconst t121 = triangleGraph([1, 2, 1]);\nconst t211 = triangleGraph([2, 1, 1]);\nconst t123 = triangleGraph([1, 2, 3]);\nconst t231 = triangleGraph([2, 3, 1]);\nconst t312 = triangleGraph([3, 1, 2]);\n\nconst s1122 = squareGraph([1, 1, 2, 2]);\nconst s2211 = squareGraph([2, 2, 1, 1]);\nconst s2112 = squareGraph([2, 1, 1, 2]);\nconst s1221 = squareGraph([1, 2, 2, 1]);\nconst s1212 = squareGraph([1, 2, 1, 2]);\nconst s2121 = squareGraph([2, 1, 2, 1]);\n\nconst puzzle = [\n    {\n        colourPalette: 1,\n        sequence: [t1, t1, t1, null],\n        answer: [t1]\n    }, {\n        colourPalette: 2,\n        sequence: [t1, t2, t1, t2, null],\n        answer: [t1]\n    }, {\n        colourPalette: 2,\n        sequence: [t112, t221, t112, t221, null],\n        answer: [t112]\n    }, {\n        colourPalette: 2,\n        sequence: [s1122, s2211, s1122, s2211, null],\n        answer: [s1122]\n    }, {\n        colourPalette: 2,\n        sequence: [s1212, s2121, s1212, s2121, s1212, null],\n        answer: [s2121]\n    }, {\n        colourPalette: 2,\n        sequence: [s1122, s1221, s2211, null],\n        answer: [s2112]\n    }, {\n        colourPalette: 2,\n        sequence: [t112, t121, t211, t112, t121, null],\n        answer: [t211]\n    }, {\n        colourPalette: 3,\n        sequence: [t123, t231, t312, t123, null],\n        answer: [t312]\n    }\n];\n\n// Check every node in a sequence of graphs matches the target node colours\nconst correctGraphSequence = ({ sequence, target }) =>\n    sequence.every((graph, index) =>\n        sequencesMatch(graph.nodes, target[index].nodes, 'colour')\n    );\n\nconst GraphSequences = {\n    name: 'Sequences 3',\n    slug: 'sequences-3',\n    icon: Icons[2],\n    component: () => <PuzzlePage\n        puzzles={puzzle}\n        evaluate={correctGraphSequence}\n        getPuzzleObject={getGraphSequence}\n        displayPuzzle={GraphRow}\n    />,\n};\n\nexport default GraphSequences;\n","import React from 'react';\n\n\nconst PermuteSequence = (\n    <g>\n        <g className=\"graph-edges\">\n            <line x1=\"-20\" y1=\"-20\" x2=\"20\" y2=\"-20\" />\n            <line x1=\"-20\" y1=\"0\" x2=\"20\" y2=\"0\" />\n            <line x1=\"-20\" y1=\"20\" x2=\"20\" y2=\"20\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"-20\" cy=\"-20\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"0\" cy=\"-20\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"20\" cy=\"-20\" r=\"6\" />\n\n            <circle className=\"colour-2\" cx=\"-20\" cy=\"0\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"0\" cy=\"0\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"20\" cy=\"0\" r=\"6\" />\n\n            <circle className=\"colour-2\" cx=\"-20\" cy=\"20\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"0\" cy=\"20\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"20\" cy=\"20\" r=\"6\" />\n        </g>\n    </g>\n);\n\nconst Permutations = (\n    <g>\n        <g className=\"graph-edges\">\n            <path d=\"M-10 -30h20\"/>\n            <path d=\"M-10 -10h20\"/>\n            <path d=\"M-10 10h20\"/>\n            <path d=\"M-10 30h20\"/>\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"-10\" cy=\"-30\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"10\" cy=\"-30\" r=\"6\" />\n\n            <circle className=\"colour-1\" cx=\"-10\" cy=\"-10\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"10\" cy=\"-10\" r=\"6\" />\n\n            <circle className=\"colour-2\" cx=\"-10\" cy=\"10\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"10\" cy=\"10\" r=\"6\" />\n\n            <circle className=\"colour-2\" cx=\"-10\" cy=\"30\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"10\" cy=\"30\" r=\"6\" />\n        </g>\n    </g>\n);\n\nconst Combinations = (\n    <g>\n        <g className=\"graph-edges\">\n            <path d=\"M-10 -20h20\"/>\n            <path d=\"M-10 0h20\"/>\n            <path d=\"M-10 20h20\"/>\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"-10\" cy=\"-20\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"10\" cy=\"-20\" r=\"6\" />\n\n            <circle className=\"colour-1\" cx=\"-10\" cy=\"0\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"10\" cy=\"0\" r=\"6\" />\n\n            <circle className=\"colour-2\" cx=\"-10\" cy=\"20\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"10\" cy=\"20\" r=\"6\" />\n        </g>\n    </g>\n);\n\nconst Derrangements = (\n    <g>\n        <g className=\"graph-edges\">\n            <line x1=\"-12\" y1=\"8\" x2=\"0\" y2=\"-12\" />\n            <line x1=\"-12\" y1=\"8\" x2=\"12\" y2=\"8\" />\n            <line x1=\"0\" y1=\"-12\" x2=\"12\" y2=\"8\" />\n            <line x1=\"0\" y1=\"-32\" x2=\"0\" y2=\"-12\" />\n            <line x1=\"-12\" y1=\"8\" x2=\"-30\" y2=\"20\" />\n            <line x1=\"12\" y1=\"8\" x2=\"30\" y2=\"20\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-12\" cy=\"8\" r=\"6\" />\n        <circle className=\"colour-2\" cx=\"0\" cy=\"-12\" r=\"6\" />\n        <circle className=\"colour-3\" cx=\"12\" cy=\"8\" r=\"6\" />\n\n        <circle className=\"colour-2\" cx=\"-30\" cy=\"20\" r=\"6\" />\n        <circle className=\"colour-3\" cx=\"0\" cy=\"-32\" r=\"6\" />\n        <circle className=\"colour-1\" cx=\"30\" cy=\"20\" r=\"6\" />\n    </g>\n</g>\n);\n\nconst Combinatorics2 = (\n    <g>\n        <g transform=\"translate(0, -24)\">\n            <line className=\"graph-edges\" x1=\"-20\" x2=\"20\" />\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-1\" cx=\"-20\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"0\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"20\" r=\"6\" />\n            </g>\n        </g>\n        <g transform=\"translate(0, -8)\">\n            <line className=\"graph-edges\" x1=\"-20\" x2=\"20\" />\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-2\" cx=\"-20\" r=\"6\" />\n                <circle className=\"colour-1\" cx=\"0\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"20\" r=\"6\" />\n            </g>\n        </g>\n        <g transform=\"translate(0, 8)\">\n            <line className=\"graph-edges\" x1=\"-20\" x2=\"20\" />\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-2\" cx=\"-20\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"0\" r=\"6\" />\n                <circle className=\"colour-1\" cx=\"20\" r=\"6\" />\n            </g>\n        </g>\n        <g transform=\"translate(0, 24)\">\n            <line className=\"graph-edges\" x1=\"-20\" x2=\"20\" />\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-1\" cx=\"-20\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"0\" r=\"6\" />\n                <circle className=\"colour-1\" cx=\"20\" r=\"6\" />\n            </g>\n        </g>\n    </g>\n);\n\n\nexport default [\n    PermuteSequence,\n    Permutations,\n    Combinations,\n    Derrangements,\n    Combinatorics2,\n];\n","/*\n * Find all the combinations for colouring a linear graph\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { getGraphSet } from '../utils/loadPuzzle';\nimport { setOfSetsEqual } from '../utils/evaluate';\nimport { GraphColumn } from '../PuzzleComponents/Sequence';\nimport { getCombinationsWithReplacement, getArrayOfN } from '../../utils/common';\n\n\n// Given a set of rows of linear graphs\n// Colour them so you have all combinations of colours\nconst puzzles = [{\n    colourPalette: 2,\n    items: [1, 2],\n    graphs: [[1, 1], [1, 2], [2, 0]],\n}, {\n    colourPalette: 2,\n    items: [1, 2],\n    graphs: [[1, 1, 1], [2, 2, 2], [1, 1, 2], [0, 0, 0]],\n}, {\n    colourPalette: 2,\n    items: [1, 2],\n    graphs: [[1, 1, 1, 1], [1, 1, 1, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],\n}, {\n    colourPalette: 3,\n    items: [1, 2, 3],\n    graphs: [[1, 1], [2, 2], [3, 3], [1, 2], [0, 0], [0, 0]],\n}];\n\n// Check the the given set of sequences matches a set of sequences.\nconst getSolutionSet = ({ colourPalette, graphs }) => {\n    const combinationLength = graphs[0].length;\n\n    // Find all combinations using this colour palette\n    const colours = getArrayOfN(colourPalette);\n    const combinations = getCombinationsWithReplacement(colours, combinationLength);\n    const combinationSet = new Set(combinations.map(combination => combination.sort().join('-')));\n    \n    return combinationSet\n};\n\nconst CombinationPuzzles = (\n    <PuzzlePage\n        puzzles={puzzles}\n        evaluate={setOfSetsEqual}\n        getPuzzleObject={getGraphSet}\n        getSolutionObject={getSolutionSet}\n        displayPuzzle={GraphColumn} />\n);\n\nexport default CombinationPuzzles;\n","/*\n * Colour regions on a map such that no two touching regions have the same colour.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { GraphRow, GraphColumn } from '../PuzzleComponents/Sequence';\nimport { getGraphSet } from '../utils/loadPuzzle';\nimport { sequenceSetMatches } from '../utils/evaluate';\nimport {\n    getArrayOfN,\n    getPermutations,\n    getPermutationsWithReplacement\n} from '../../utils/common';\n\n\n// Given a set of rows of linear graphs\n// Colour them so you have all permutations of colours with a fixed number of colours.\n// e.g. (1, 2, 2) => (1, 2, 2), (2, 1, 2), (2, 2, 1)\nconst puzzles1 = {\n    solution: puzzle => getPermutations(puzzle.graphs[0]),\n    puzzles: [{\n        colourPalette: 2,\n        graphs: [[1, 2], [2, 0]],\n    }, {\n        colourPalette: 2,\n        graphs: [[1, 2, 2], [2, 1, 2], [2, 2, 0]],\n    }, {\n        colourPalette: 2,\n        graphs: [[2, 2, 1], [1, 2, 2], [0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        graphs: [[2, 1, 2], [0, 0, 0], [0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        graphs: [[1, 2, 2, 2], [2, 1, 2, 2], [0, 0, 0, 0], [0, 0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        graphs: [[1, 1, 2, 2], [1, 2, 1, 2], [1, 2, 2, 1], [2, 1, 1, 2], [2, 1, 2, 1], [2, 0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        graphs: [[1, 1, 2, 2], [1, 0, 0, 0], [1, 0, 0, 0], [2, 0, 0, 0], [2, 0, 0, 0], [2, 0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        graphs: [[1, 1, 2, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],\n    }]\n};\n\n// Given a set of rows of linear graphs\n// Colour them so you have all permutations of colours (with replacement).\n// e.g. (1, 2) => (1, 1), (1, 2), (2, 1), (2, 2)\nconst puzzles2 = {\n    solution: puzzle =>\n        getPermutationsWithReplacement(getArrayOfN(puzzle.colourPalette), puzzle.graphs[0].length),\n    puzzles: [{\n        colourPalette: 2,\n        graphs: [[1, 1], [1, 2], [2, 1], [2, 0]],\n    }]\n};\n\n// Permutations of colours on looped graphs, so rotations count as the same thing.\n// e.g. [1,2,1]\nconst puzzles3 = [\n    {\n        colourPalette: 2,\n        loop: true,\n        graphs: [[1, 1, 1], [1, 1, 2], [1, 2, 2], [0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        loop: true,\n        graphs: [[1, 1, 2, 2], [2, 1, 2, 0]],\n    }\n];\n\nconst puzzles = [puzzles1, puzzles2, puzzles3];\n\n// Return the set of all permutation of colours based on the first pattern in the pattern array\nconst getSolutionSet = (getSolutions) => \n    (puzzle) => {\n        const solutions = getSolutions(puzzle);\n        return new Set(solutions.map(sequence => sequence.join('-')))\n    };\n\n// Display linear graphs one under another, and loop graphs in a row\nfunction displayGraphSequence({ sequence, loop }, chamber) {\n    if (loop) {\n        return GraphRow({ sequence }, chamber);\n    } else {\n        return GraphColumn({ sequence }, chamber);\n    }\n}\n\n// TODO: Evaluation for permutations with replacement on loops\n\nconst PermutationPuzzles = (n) => {\n    const puzzle = puzzles[n];\n    const solutionSet = getSolutionSet(puzzle.solution);\n    return (\n        <PuzzlePage\n            puzzles={puzzle.puzzles}\n            evaluate={sequenceSetMatches}\n            getPuzzleObject={getGraphSet}\n            getSolutionObject={solutionSet}\n            displayPuzzle={displayGraphSequence} />\n    );\n}\n\nexport default PermutationPuzzles;\n","// Derrangements - permutate the colours on a graph so that each node has a different colour from before\nimport React from 'react';\n\nimport { getRepeatArray, nTimes } from '../../utils/common';\nimport { sunletGraph } from '../utils/graphTypes';\nimport { getGraphObject } from '../utils/loadPuzzle';\nimport { graphIsChromatic, allGraphsInSequenceAreDifferent } from '../utils/evaluate';\nimport { GraphRow } from '../PuzzleComponents/Sequence';\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\n\n\n// TODO: Show graphs one by one\n\nconst puzzle1 = [{\n    colourPalette: [1, 1],\n    pattern: [1, 2],\n    nGraphs: 1,\n}, {\n    colourPalette: [1, 1, 1],\n    pattern: [1, 2, 3],\n    nGraphs: 1,\n}, {\n    colourPalette: [2, 2, 2],\n    pattern: [1, 2, 3],\n    nGraphs: 2,\n}, {\n    colourPalette: [2, 2],\n    pattern: [1, 2, 1, 2],\n    nGraphs: 1,\n}, {\n    colourPalette: [4, 2, 2],\n    pattern: [1, 2, 1, 3],\n    nGraphs: 2,\n}]\n\nconst puzzles = [puzzle1];\n\nfunction getGraphSet({ nGraphs, pattern }) {\n    const allNodes = getRepeatArray(0, pattern.length).concat(pattern);\n    const sequence = nTimes(nGraphs, () => {\n        return getGraphObject(sunletGraph(allNodes, { scale: 1.4 }))\n    });\n    sequence.gap = 0.2;\n    return { sequence };\n}\n\nconst allGraphsAreChromatic = ({ sequence }) =>\n    allGraphsInSequenceAreDifferent(sequence) &&\n    sequence.every(graphIsChromatic);\n\nconst DerrangementPuzzle = (\n    <PuzzlePage\n        puzzles={puzzles[0]}\n        evaluate={allGraphsAreChromatic}\n        getPuzzleObject={getGraphSet}\n        displayPuzzle={GraphRow} />\n);\n\nexport default DerrangementPuzzle;","import Icons from './Icons';\nimport CombinationPuzzles from './Combinations';\nimport PermutationPuzzles from './Permutations';\nimport DerrangementPuzzle from './Derrangements';\n\n\nconst puzzles = [{\n    name: 'Permutations 1',\n    slug: 'permutations-1',\n    icon: Icons[0],\n    component: () => PermutationPuzzles(0),\n}, {\n    name: 'Permutations 2',\n    slug: 'permutations-2',\n    icon: Icons[1],\n    component: () => PermutationPuzzles(1),\n}, {\n    name: 'Combinations',\n    slug: 'combinations',\n    icon: Icons[2],\n    component: () => CombinationPuzzles[0],\n}, {\n    name: 'Derrangements',\n    slug: 'derrangements',\n    icon: Icons[3],\n    component: () => DerrangementPuzzle,\n}];\n\nexport default puzzles;\n","import React from 'react';\n\n\nconst IdentityIcon1 = (\n    <>\n        <defs>\n            <g id=\"identity-1-puzzle\">\n                <g className=\"graph-edges\">\n                    <line x1=\"-15\" y1=\"13\" x2=\"0\" y2=\"-13\" />\n                    <line x1=\"-15\" y1=\"13\" x2=\"15\" y2=\"13\" />\n                    <line x1=\"0\" y1=\"-13\" x2=\"15\" y2=\"13\" />\n                </g>\n                <g className=\"graph-nodes\">\n                    <circle className=\"colour-1\" cx=\"-15\" cy=\"13\" r=\"6\" />\n                    <circle className=\"colour-2\" cx=\"0\" cy=\"-13\" r=\"6\" />\n                    <circle className=\"colour-3\" cx=\"15\" cy=\"13\" r=\"6\" />\n                </g>\n            </g>\n        </defs>\n\n        <use href=\"#identity-1-puzzle\" transform=\"translate(-24, -4)\"/>\n        <use href=\"#identity-1-puzzle\" transform=\"translate(24, -4)\"/>\n        <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n    </>\n);\n\nconst ReflectionIcon1 = (\n    <>\n        <defs>\n            <g id=\"reflection-1-puzzle\">\n                <g className=\"graph-edges\">\n                    <line x1=\"12\" y1=\"0\" x2=\"-11\" y2=\"-15\" />\n                    <line x1=\"12\" y1=\"0\" x2=\"-11\" y2=\"15\" />\n                    <line x1=\"-11\" y1=\"-15\" x2=\"-11\" y2=\"15\" />\n                </g>\n                <g className=\"graph-nodes\">\n                    <circle className=\"colour-2\" cx=\"12\" cy=\"0\" r=\"6\" />\n                    <circle className=\"colour-1\" cx=\"-11\" cy=\"15\" r=\"6\" />\n                    <circle className=\"colour-1\" cx=\"-11\" cy=\"-15\" r=\"6\" />\n                </g>\n            </g>\n        </defs>\n\n        <use href=\"#reflection-1-puzzle\" transform=\"translate(-20)\"/>\n        <use href=\"#reflection-1-puzzle\" transform=\"translate(20) scale(-1, 1)\"/>\n        <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n    </>\n);\n\nconst RotationIcon1 = (\n    <>\n        <defs>\n            <g id=\"rotation-1-puzzle\">\n                <g className=\"graph-edges\">\n                    <line x1=\"-16\" y1=\"13\" x2=\"-2\" y2=\"-13\" />\n                    <line x1=\"-16\" y1=\"13\" x2=\"12\" y2=\"13\" />\n                    <line x1=\"-2\" y1=\"-13\" x2=\"12\" y2=\"13\" />\n                </g>\n                <g className=\"graph-nodes\">\n                    <circle className=\"colour-1\" cx=\"-16\" cy=\"13\" r=\"6\" />\n                    <circle className=\"colour-2\" cx=\"-2\" cy=\"-13\" r=\"6\" />\n                    <circle className=\"colour-1\" cx=\"12\" cy=\"13\" r=\"6\" />\n                </g>\n            </g>\n        </defs>\n\n        <use href=\"#rotation-1-puzzle\" transform=\"translate(-20)\"/>\n        <use href=\"#rotation-1-puzzle\" transform=\"translate(20) rotate(180)\"/>\n        <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n    </>\n);\n\nconst TransformColourIcon1 = (\n    <>\n        <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n\n        <g transform=\"translate(-20)\">\n            <g className=\"graph-edges\">\n                <line x1=\"0\" y1=\"20\" x2=\"0\" y2=\"-16\" />\n            </g>\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-1\" cx=\"0\" cy=\"-20\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"0\" cy=\"0\" r=\"6\" />\n                <circle className=\"colour-1\" cx=\"0\" cy=\"20\" r=\"6\" />\n            </g>\n        </g>\n\n        <g transform=\"translate(20)\">\n            <g className=\"graph-edges\">\n                <line x1=\"0\" y1=\"20\" x2=\"0\" y2=\"-20\" />\n            </g>\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-2\" cx=\"0\" cy=\"-20\" r=\"6\" />\n                <circle className=\"colour-1\" cx=\"0\" cy=\"0\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"0\" cy=\"20\" r=\"6\" />\n            </g>\n        </g>\n    </>\n);\n\nexport default [IdentityIcon1, ReflectionIcon1, RotationIcon1, TransformColourIcon1];\n","/*\n * Colour all nodes on a graph such that no edges joins two nodes of the same colour.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { Graph, ColourableGraph } from '../PuzzleComponents/Graph';\nimport { getGraphAndUncolouredCopy } from '../utils/loadPuzzle';\nimport { getNodesOnCircle, getLoopOfEdges, getLineOfEdges } from '../utils/graphUtils';\nimport { graphNodesAreSameColour, samePatternButDifferent } from '../utils/evaluate';\n\n\nconst identity1 = [\n    {\n        colourPalette: 1,\n        nodes: [[0, 0, 1]]\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 2]),\n        edges: getLineOfEdges(2)\n    }, {\n        colourPalette: 2,\n        nodes: [[-1, 0, 1], [0, 0, 2], [1, 0, 1]],\n        edges: [[0, 1], [1, 2]]\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n    }, {\n        colourPalette: 4,\n        nodes: getNodesOnCircle([1, 2, 3, 4]),\n        edges: getLoopOfEdges(4)\n    }, {\n        size: 24,\n        colourPalette: 3,\n        nodes: [[-1, -1, 1], [1, -1, 1], [-0.5, 0, 2], [0.5, 0, 3], [-1, 1, 3], [1, 1, 2]],\n        edges: [[0, 2], [2, 3], [3, 1], [2, 4], [3, 5]]\n    }, {\n        size: 24,\n        colourPalette: 4,\n        nodes: [[-1.5, -1, 1], [-0.5, -1, 2], [0.5, -1, 1], [-0.5, 0, 1], [0.5, 0, 3], [-0.5, 1, 3], [0.5, 1, 4], [1.5, 1, 3]],\n        edges: [[0, 1], [1, 2], [1, 3], [3, 4], [4, 6], [5, 6], [6, 7]]\n    }\n];\n\nconst reflection1 = [\n    {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 2], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 1]),\n        edges: getLoopOfEdges(3)\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3]),\n        edges: getLoopOfEdges(3)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 1, 2]),\n        edges: getLoopOfEdges(4)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 2, 2]),\n        edges: getLoopOfEdges(4)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n    }, {\n        colourPalette: 4,\n        nodes: getNodesOnCircle([1, 2, 3, 4]),\n        edges: getLoopOfEdges(4)\n    }\n];\n\nconst rotation1 = [\n    {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 2], { dy: 0.25 }),\n        edges: getLoopOfEdges(3)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 2], { offsetAngle: 90 }),\n        edges: getLoopOfEdges(2)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 2]),\n        edges: getLoopOfEdges(2)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 2, 2]),\n        edges: getLoopOfEdges(4)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 1, 2]),\n        edges: getLoopOfEdges(4)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 2], { dy: 0.25 }),\n        edges: getLoopOfEdges(3)\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3], { dy: 0.25 }),\n        edges: getLoopOfEdges(3)\n    }, {\n        colourPalette: 4,\n        nodes: getNodesOnCircle([1, 2, 3, 4]),\n        edges: getLoopOfEdges(4)\n    }\n];\n\nconst colour1 = [\n    {\n        colourPalette: 1,\n        nodes: [[0, 0, 2]]\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 2]),\n        edges: getLineOfEdges(2)\n    }, {\n        colourPalette: 2,\n        nodes: [[-1, 0, 1], [0, 0, 2], [1, 0, 1]],\n        edges: getLineOfEdges(3)\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3]),\n        edges: getLoopOfEdges(3)\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3, 2]).concat([[0, 0, 3]]),\n        edges: getLoopOfEdges(4).concat([[0, 4], [1, 4] ,[2, 4], [3, 4]])\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3, 1, 2, 3]),\n        edges: getLoopOfEdges(6)\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle([2, 3, 1, 3, 2, 1]),\n        edges: getLoopOfEdges(6)\n    }\n];\n\nconst Transformation = ({ puzzles, transform, evaluate }) => {\n    const displayGraphs = (puzzle, chamber) =>\n        <g>\n            <g transform=\"translate(-60)\">\n                <Graph {...puzzle.target} />\n            </g>\n            <g transform={ \"translate(60) \" + transform }>\n                { ColourableGraph(puzzle.blank, chamber) }\n            </g>\n\n            <line className=\"reflection-line\" y1=\"-200\" y2=\"200\" />\n        </g>\n\n    return <PuzzlePage\n        puzzles={puzzles}\n        evaluate={evaluate}\n        getPuzzleObject={getGraphAndUncolouredCopy}\n        displayPuzzle={displayGraphs} />\n};\n\nconst patternMatchGraphs = ({ blank, target }) => {\n    const seq1 = blank.nodes.map(node => node.colour);\n    const seq2 = target.nodes.map(node => node.colour);\n    return samePatternButDifferent(seq1, seq2);\n}\n\nconst Transformations = [\n    <Transformation puzzles={identity1} transform=\"\" evaluate={graphNodesAreSameColour} />,\n    <Transformation puzzles={reflection1} transform=\"scale(-1 1)\" evaluate={graphNodesAreSameColour}/>,\n    <Transformation puzzles={rotation1} transform=\"rotate(180)\" evaluate={graphNodesAreSameColour} />,\n    <Transformation puzzles={colour1} transform=\"\" evaluate={patternMatchGraphs} />,\n];\n\nexport default Transformations;\n","import Icons from './Icons';\nimport Puzzles from './Transformations';\n\n\nconst puzzles = [{\n    name: 'Identity',\n    slug: 'identity',\n    icon: Icons[0],\n    component: () => Puzzles[0],\n}, {\n    name: 'Reflection',\n    slug: 'reflection',\n    icon: Icons[1],\n    component: () => Puzzles[1],\n}, {\n    name: 'Rotation',\n    slug: 'rotation',\n    icon: Icons[2],\n    component: () => Puzzles[2],\n}, {\n    name: 'Inversion',\n    slug: 'inversion',\n    icon: Icons[3],\n    component: () => Puzzles[3],\n}];\n\nexport default puzzles;\n","/*\n * Colour all nodes on a graph such that no edges joins two nodes of the same colour.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { ColourableGraph } from '../PuzzleComponents/Graph';\nimport { getGraphObject } from '../utils/loadPuzzle';\nimport { getNodesOnCircle, getLoopOfEdges } from '../utils/graphUtils';\nimport { graphIsChromatic } from '../utils/evaluate';\n\n\nconst puzzles1 = [\n\t{\n\t\tcolourPalette: 1,\n\t\tnodes: [[0, 0]]\n\t}, {\n\t\tcolourPalette: 2,\n\t\tnodes: [[-1, 0], [1, 0]],\n\t\tedges: [[0, 1]],\n\t}, {\n\t\tcolourPalette: 2,\n\t\tnodes: [[-2, 0], [0, 0], [2, 0]],\n\t\tedges: [[0, 1], [1, 2]],\n\t}, {\n\t\tcolourPalette: 3,\n\t\tnodes: getNodesOnCircle(3),\n\t\tedges: getLoopOfEdges(3),\n\t}, {\n\t\tcolourPalette: 2,\n\t\tnodes: getNodesOnCircle(4),\n\t\tedges: getLoopOfEdges(4),\n\t}, {\n\t\tcolourPalette: 3,\n\t\tnodes: getNodesOnCircle(4),\n\t\tedges: getLoopOfEdges(4).concat([[1, 3]]),\n\t}, {\n\t\tcolourPalette: 4,\n\t\tnodes: getNodesOnCircle(4),\n\t\tedges: getLoopOfEdges(4).concat([[1, 3], [0, 2]]),\n\t}, {\n\t\tcolourPalette: 3,\n\t\tnodes: [[0, 0]].concat(getNodesOnCircle(4)),\n\t\tedges: getLoopOfEdges(1, 4).concat([[0, 1], [0, 2], [0, 3], [0, 4]]),\n\t}\n];\n\nconst rectCoords = [[-2, -1], [0, -1], [2, -1], [2, 1], [0, 1], [-2, 1]];\nconst puzzles2 = [\n    {\n        colourPalette: 2,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6),\n    }, {\n        colourPalette: 2,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[1, 4]]),\n    }, {\n        colourPalette: 2,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[0, 3]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[0, 4]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[0, 4], [2, 4]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[0, 4], [1, 4], [2, 4]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[0, 4], [1, 4], [1, 3]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: getNodesOnCircle(3).concat(getNodesOnCircle(3, { r: 2, offsetAngle: 60 })),\n        edges: getLoopOfEdges(3).concat([[0, 3], [1, 3], [1, 4], [2, 4], [0, 5], [2, 5]]),\n    }, {\n        colourPalette: 3,\n        scale: 16,\n        nodes: getNodesOnCircle(3).concat(getNodesOnCircle(3, { r: 4, offsetAngle: 60 })),\n        edges: getLoopOfEdges(3)\n            .concat(getLoopOfEdges(3, 5))\n            .concat([[0, 3], [1, 3], [1, 4], [2, 4], [0, 5], [2, 5]]),\n    }\n];\n\n// TODO: Give more colourPalette than required\nconst puzzles3 = [\n    {\n        colourPalette: 2,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6),\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[2, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 2], [2, 4]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 2], [2, 4], [0, 4]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[1, 3], [0, 4], [2, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[2, 4], [1, 3], [0, 4], [1, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 3], [1, 4], [2, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 2], [1, 3], [2, 4], [3, 5], [4, 0], [5, 1]]),\n    }\n];\n\nconst puzzles = [puzzles1, puzzles2, puzzles3];\n\nexport const ColourGraph = (n) =>\n    <PuzzlePage\n        puzzles={puzzles[n]}\n        evaluate={graphIsChromatic}\n        getPuzzleObject={getGraphObject}\n        displayPuzzle={ColourableGraph}\n    />\n","import React from 'react';\n\n\nconst ColourGraphIcon1 = () => <g>\n    <g className=\"graph-edges edge-outline\">\n        <path d=\"M-20 -20h40v40h-40z\" fill=\"none\" />\n        <line x1=\"-20\" y1=\"-20\" x2=\"20\" y2=\"20\" />\n        <line x1=\"-20\" y1=\"20\" x2=\"20\" y2=\"-20\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-20\" cy=\"-20\" r=\"7\" />\n        <circle className=\"colour-2\" cx=\"-20\" cy=\"20\" r=\"7\" />\n        <circle className=\"colour-1\" cx=\"20\" cy=\"20\" r=\"7\" />\n        <circle className=\"colour-2\" cx=\"20\" cy=\"-20\" r=\"7\" />\n        <circle className=\"colour-3\" cx=\"0\" cy=\"0\" r=\"7\" />\n    </g>\n</g>\n\nconst ColourGraphIcon2 = () => <g>\n    <g className=\"graph-edges edge-outline\">\n        <path d=\"M-32 -16h64v32h-64z\" fill=\"none\" />\n        <line x1=\"0\" y1=\"-16\" x2=\"0\" y2=\"16\" />\n        <line x1=\"-32\" y1=\"-16\" x2=\"0\" y2=\"16\" />\n        <line x1=\"32\" y1=\"-16\" x2=\"0\" y2=\"16\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-32\" cy=\"-16\" r=\"7\" />\n        <circle className=\"colour-2\" cx=\"0\" cy=\"-16\" r=\"7\" />\n        <circle className=\"colour-1\" cx=\"32\" cy=\"-16\" r=\"7\" />\n        <circle className=\"colour-2\" cx=\"32\" cy=\"16\" r=\"7\" />\n        <circle className=\"colour-3\" cx=\"0\" cy=\"16\" r=\"7\" />\n        <circle className=\"colour-2\" cx=\"-32\" cy=\"16\" r=\"7\" />\n    </g>\n</g>\n\nconst ColourGraphIcon3 = () => <g>\n    <g className=\"graph-edges edge-outline\">\n        <path d=\"M32 0L16 27.7h-32L-32 0 -16 -27.71h32z\" />\n        <line x1=\"16\" y1=\"-27.71\" x2=\"16\" y2=\"27.71\" />\n        <line x1=\"-16\" y1=\"-27.71\" x2=\"-16\" y2=\"27.71\" />\n        <line x1=\"-32\" y1=\"0\" x2=\"32\" y2=\"0\" />\n        <line x1=\"-32\" y1=\"0\" x2=\"32\" y2=\"0\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"32\" cy=\"0\" r=\"7\" />\n        <circle className=\"colour-2\" cx=\"16\" cy=\"27.71\" r=\"7\" />\n        <circle className=\"colour-3\" cx=\"-16\" cy=\"27.71\" r=\"7\" />\n        <circle className=\"colour-2\" cx=\"-32\" cy=\"0\" r=\"7\" />\n        <circle className=\"colour-1\" cx=\"-16\" cy=\"-27.71\" r=\"7\" />\n        <circle className=\"colour-3\" cx=\"16\" cy=\"-27.71\" r=\"7\" />\n    </g>\n</g>\n\nexport default [ColourGraphIcon1, ColourGraphIcon2, ColourGraphIcon3];\n","import { ColourGraph } from './ColourGraphs';\nimport ColourGraphIcons from '../../PuzzleNavigation/Icons/ColourGraphs';\n\n\nconst puzzles = [{\n    name: 'Colour Graph 1',\n    slug: 'colour-graphs-0',\n    icon: ColourGraphIcons[0](),\n    component: () => ColourGraph(1),\n}, {\n    name: 'Colour Graph 2',\n    slug: 'colour-graphs-1',\n    icon: ColourGraphIcons[1](),\n    component: () => ColourGraph(2),\n}, {\n    name: 'Colour Graph 3',\n    slug: 'colour-graphs-2',\n    icon: ColourGraphIcons[2](),\n    component: () => ColourGraph(3),\n}, {\n    name: 'Colour Graph 4',\n    slug: 'colour-graphs-3',\n    icon: ColourGraphIcons[1](),\n    component: () => ColourGraph(2),\n}, {\n    name: 'Colour Graph 5',\n    slug: 'colour-graphs-4',\n    icon: ColourGraphIcons[1](),\n    component: () => ColourGraph(2),\n}, {\n    name: 'Colour Graph 6',\n    slug: 'colour-graphs-5',\n    icon: ColourGraphIcons[1](),\n    component: () => ColourGraph(2),\n}];\n\nexport default puzzles;\n","import TutorialPuzzle from './Tutorial/Tutorial';\nimport BasicSequences from './Sequences/BasicSequences';\nimport GraphSequences from './Sequences/GraphSequences';\nimport CombinationPuzzles from './Combinatorics/puzzles';\nimport TransformationPuzzles from './Transformations/puzzles';\nimport GraphTheoryPuzzles from './GraphTheory/loadPuzzles';\n\n\nconst puzzleData = [\n    TutorialPuzzle,\n    ...TransformationPuzzles,\n    ...CombinationPuzzles,\n    ...GraphTheoryPuzzles,\n    ...BasicSequences,\n    GraphSequences,\n];\n\nexport default puzzleData;\n","// Simple list of all puzzles with links to their pages\n\nimport React from 'react';\nimport { Link } from \"react-router-dom\";\nimport { puzzleLayout } from '../AppData';\n\nimport './puzzleMenu.css';\n\n\nfunction Menu() {\n    return (\n        <main className=\"puzzle-menu\">\n            { puzzleLayout.map((section, index) => {\n                return <Section key={index} name={index + 1} puzzles={section} />\n            })}\n        </main>\n    );\n}\n\nfunction Section({ name, puzzles }) {\n    return (\n        <section>\n            <h3>Section { name }</h3>\n            <ul>\n                { puzzles.map(({slug}) => (\n                    <li slug={slug} key={slug}>\n                        <Link to={slug}>{slug}</Link>\n                    </li>\n                ))}\n            </ul>\n        </section>\n    );\n}\n\nexport default Menu;\n","// Code to determine the layout of the navigation graph\n\nconst CONNECTION_LENGTH = 160;\n\n// Array of connections between puzzles in the form\n// [<puzzle1>, <puzzle2>, <optional angle change>]\n// Creates an edge between puzzle1 and puzzle 2 in the direction of\n// puzzle1's angle + an optional change in angle\nconst PUZZLE_CONNECTIONS = [\n    ['tutorial', 'sequences-1', 45],\n    ['sequences-1', 'sequences-2'],\n    ['sequences-2', 'sequences-3'],\n    ['tutorial', 'identity', 135],\n    ['identity', 'reflection'],\n    ['reflection', 'rotation'],\n    ['rotation', 'inversion'],\n    ['sequences-2', 'permutations-1', 90],\n    ['permutations-1', 'permutations-2'],\n    ['permutations-2', 'combinations'],\n    ['combinations', 'derrangements'],\n];\n\n// Function for adding connections between puzzles\n// and determining the position of icons given the angles between them\nfunction getConnections(puzzleData) {\n    function getPuzzle(name) {\n        const puzzle = puzzleData.find(puzzle => puzzle.slug === name);\n        if (!puzzle) {\n            console.error(`No puzzle foud with name: ${name}`);\n        }\n        return puzzle;\n    }\n\n    const connections = [];\n\n    PUZZLE_CONNECTIONS.forEach(([name1, name2, angle]) => {\n        const puzzle1 = getPuzzle(name1);\n        const puzzle2 = getPuzzle(name2);\n\n        if (!puzzle1.x && !puzzle1.y) {\n            puzzle1.x = 0;\n            puzzle1.y = 0;\n            puzzle1.angle = 0;\n        }\n\n        puzzle2.angle = (puzzle1.angle || 0) + (angle || 0);\n        const radians = puzzle2.angle * Math.PI / 180;\n        puzzle2.x = puzzle1.x + CONNECTION_LENGTH * Math.cos(radians);\n        puzzle2.y = puzzle1.y + CONNECTION_LENGTH * Math.sin(radians);\n\n        connections.push({\n            x1: puzzle1.x,\n            y1: puzzle1.y,\n            x2: puzzle2.x,\n            y2: puzzle2.y,\n        });\n    });\n\n    return connections;\n}\n\nexport default getConnections;\n","/****************************************************************\n * Create a menu of puzzle icons in the form of a graph showing\n * how puzzles relate to each other.\n ****************************************************************/\nimport React, { useState } from 'react';\n\nimport { Link } from \"react-router-dom\";\nimport puzzleData from \"../Puzzles/allPuzzles\";\nimport getConnections from \"./PuzzleGraphLayout\";\n\nimport './Icons/icons.css';\nimport './PuzzleGraph.css';\n\n\nconst SIZE = 720;\n\nconst connections = getConnections(puzzleData);\n\nfunction getGraphExtent(puzzles) {\n    let minX = 0;\n    let maxX = 0;\n    let maxY = 0;\n    puzzles.forEach(({ x, y }) => {\n        if (x !== undefined) {\n            if (x < minX) { minX = x; }\n            if (x > maxX) { maxX = x; }\n            if (y > maxY) { maxY = y; }\n        }\n    });\n    return { minX, maxX, minY: 0, maxY };\n}\n\nconst extent = getGraphExtent(puzzleData);\n\nfunction Graph() {\n    const [dragging, setDragging] = useState(false);\n    const [lastPosition, setLastPosition] = useState(false);\n    const [offset, setOffset] = useState({ x: 0, y: 0 });\n\n    const minX = -extent.maxX;\n    const maxX = -extent.minX;\n    const maxY = -extent.minY;\n    const minY = -SIZE / 2;\n\n    function getPosition(evt) {\n        if (evt.touches) {\n            evt = evt.touches[0];\n        }\n        return { x: evt.pageX, y: evt.pageY };\n    }\n\n    function onMouseDown(evt) {\n        setDragging(true);\n        const position = getPosition(evt);\n        setLastPosition(position);\n        evt.stopPropagation();\n        evt.preventDefault();\n    }\n\n    function onMouseMove(evt) {\n        if (!dragging) { return; }\n        const position = getPosition(evt)\n        let x = offset.x + position.x - lastPosition.x;\n        let y = offset.y + position.y - lastPosition.y;\n\n        if (x < minX) { x = minX; }\n        else if (x > maxX) { x = maxX; }\n        if (y < minY) { y = minY; }\n        else if (y > maxY) { y = maxY; }\n\n        setLastPosition(position);\n        setOffset({ x, y });\n        evt.stopPropagation();\n        evt.preventDefault();\n    };\n\n    function onMouseUp(evt) {\n        setDragging(false);\n        evt.stopPropagation();\n        evt.preventDefault();\n    }\n\n    return (\n        <main\n            onMouseDown={onMouseDown}\n            onMouseMove={onMouseMove}\n            onMouseUp={onMouseUp}\n            onTouchStart={onMouseDown}\n            onTouchMove={onMouseMove}\n            onTouchEnd={onMouseUp}\n        >\n            <nav className=\"puzzle-graph\">\n                <svg viewBox={`-${SIZE / 2} -${SIZE * 0.15} ${SIZE} ${SIZE}`} width=\"100%\" height=\"100%\">\n                    <defs>\n                        <filter id=\"glow-spotlight\" x=\"-200%\" y=\"-200%\" width=\"400%\" height=\"400%\">\n                            <feGaussianBlur stdDeviation=\"2\" result=\"colouredBlur\" />\n                            <feMerge>\n                                <feMergeNode in=\"coloredBlur\"/>\n                                <feMergeNode in=\"SourceGraphic\"/>\n                            </feMerge>\n                        </filter>\n                    </defs>\n\n                    <g transform={`translate(${offset.x} ${offset.y})`}>\n                        { connections.map((cxn, index) => (\n                            <line className=\"connection\" key={index} {...cxn} />\n                        )) }\n\n                        { puzzleData.map(({ available, icon, slug, x, y }) => {\n                            if (x === undefined) { return null; }\n\n                            const className = `nav-icon ${available ? '' : 'inactive'}`;\n                            return (\n                                <Link to={slug} key={slug}>\n                                    <g className={className} transform={`translate(${x} ${y})`}>\n                                        <circle className=\"spotlight-outline\" cx=\"0\" cy=\"0\" r=\"52\" />\n                                        <circle className=\"spotlight\" cx=\"0\" cy=\"0\" r=\"48\" />\n                                        { icon }\n                                    </g>\n                                </Link>\n                            );\n                        }) }\n                    </g>\n                </svg>\n            </nav>\n\n            <svg id=\"shadow-ring\" viewBox=\"-128 -128 256 256\" preserveAspectRatio=\"xMidYMid slice\">\n                <defs>\n                    <filter id=\"shadow\">\n                        <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"15\" />\n                    </filter>\n                </defs>\n\n                <circle r=\"200\" stroke=\"black\" fill=\"none\" strokeWidth=\"240\" filter=\"url(#shadow)\"/>\n                <circle r=\"300\" stroke=\"black\" fill=\"none\" strokeWidth=\"240\" />\n            </svg>\n        </main>\n    );\n}\n\nexport default Graph;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport puzzleData from './Puzzles/allPuzzles';\nimport PuzzleMenu from './PuzzleNavigation/PuzzleMenu';\nimport PuzzleGraph from './PuzzleNavigation/PuzzleGraph';\n\nimport './base.css';\n\n\nexport default () =>\n    <Router>\n        <Switch>\n            { Object.values(puzzleData).map(({ slug, component }) =>\n                <Route key={slug} path={`/${ slug }`} component={component} />\n            )}\n            <Route path=\"/menu\" component={PuzzleMenu} />\n            <Route path=\"/\" component={PuzzleGraph} />\n        </Switch>\n    </Router>\n"],"sourceRoot":""}