{"version":3,"sources":["PuzzleMap/Icons/ColourGraphs.js","utils/common.js","Toolbars/Button.js","Toolbars/Toolbar.js","Puzzles/PuzzlePage.js","Puzzles/PuzzleComponents/Primitives.js","Puzzles/PuzzleComponents/utils.js","Puzzles/PuzzleComponents/Graph.js","utils/graphUtils.js","Puzzles/puzzleLoaders.js","utils/evaluation.js","Puzzles/ColourGraphs.js","PuzzleMap/Icons/GraphTheory.js","Puzzles/GraphTheory/MinimumCut.js","Puzzles/GraphTheory/DominatingSet.js","Puzzles/GraphTheory/HamiltonianPath.js","PuzzleMap/Icons/ColourMaps.js","Puzzles/PuzzleComponents/Map.js","Puzzles/ColourMaps.js","PuzzleMap/Icons/Transformations.js","Puzzles/Transformations.js","PuzzleMap/Icons/Sequences.js","Puzzles/PuzzleComponents/Sequence.js","Puzzles/Sequences.js","PuzzleMap/Icons/Categorisation.js","Puzzles/PuzzleComponents/Categories.js","Puzzles/Categorisation.js","PuzzleMap/Icons/Combinatorics.js","Puzzles/Combinatorics.js","AppData.js","PuzzleMap/Icons/Icon.js","PuzzleMap/PuzzleMap.js","serviceWorker.js","index.js","App.js"],"names":["ColourGraphs","react_default","a","createElement","className","x","y","width","height","fill","x1","y1","x2","y2","cx","cy","r","d","handleKeyDown","evt","callback","key","keyCode","SVGButton","props","Object","assign","role","tabIndex","onKeyDown","onClick","Button","viewBox","Button_SVGButton","DELTA_ANGLE","Math","PI","Toolbar","_ref","puzzle","colours","clearPuzzle","selectedColour","nColours","length","nButtons","startAngle","position","Array","map","_","i","angle","TOOLBAR_R","cos","sin","buttons","_loop","_position$i","color","concat","button","aria-checked","setState","push","n","colour","dAngle","from","index","showColourCounter","_position$pop","pop","selectColourIndicator","COLOURS","PuzzlePage","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","queryString","parse","location","search","parseInt","q","state","solved","clear","bind","assertThisInitialized","update","getPuzzle","nextPuzzle","backToMenu","_this$props","getPuzzleObject","puzzles","colourPalette","isArray","clearButton","nextState","history","evaluate","aria-label","Button_Button","_this$state","style","getNextPuzzleButton","id","preserveAspectRatio","result","in","dx","dy","stdDeviation","in2","mode","operator","radius","displayPuzzle","React","Component","withRouter","Line","isColourable","item","chamber","arguments","undefined","_ref$className","_ref$onColour","onColour","fixed","colourUses","slice","colourThisItem","Graph","_ref$edges","edges","_ref$nodes","nodes","edge","Primitives_Line","active","node","transform","EdgeGraph","_ref2","_ref2$edges","_ref2$nodes","atan2","sqrt","ColourableGraph","graph","Graph_Graph","ColourableEdgeGraph","Graph_EdgeGraph","ColourablePath","nodeIndex","targetNode","path","previousNode","forEach","DominatingSet","neighbours","keys","every","n2","nTimes","func","getArray","arr","value","getPointsOnACircle","_ref$r","_ref$offsetAngle","offsetAngle","_ref$dx","_ref$dy","points","getNodesOnCircle","_ref2$r","_ref2$offsetAngle","_ref2$dx","_ref2$dy","_ref3","_ref4","slicedToArray","getLineOfEdges","start","stop","getLoopOfEdges","max","connectNodeToNodes","node1","linearGraph","params","_params$scale","scale","objectWithoutProperties","startX","loopGraph","_params$scale2","starGraph","_params$scale3","shift","spokeGraph","sunletGraph","p","prismGraph","antiPrismGraph","gearGraph","subdivideGraph","newEdges","_ref5","_ref6","n1","node2","getRegularPolygonGraph","size","triangleGraph","squareGraph","getGraphObject","_ref$size","nodeObjects","nodeColour","Boolean","edgeObjects","getGraphAndUncolouredCopy","_ref6$nodes","_ref6$edges","_ref6$size","_ref6$r","target","blank","_ref7","_ref8","getMapObject","_ref9","_ref9$regions","regions","_ref9$connections","connections","_ref9$size","regionObjects","_ref10","_ref11","connectionObjects","_ref12","_ref13","colourNumberToColourObject","getSequenceObject","_ref14","pattern","answer","sequence","getPermutationObject","_ref15","sequences","permutations","permute","remainingItems","seq","previousItem","curr","next","splice","sort","getPermutations","Set","permutation","join","getGraphSequence","_ref16","graphs","answerGraph","blankGraph","getCategoryObjects","_ref17","categories","randomRotate","_ref17$itemProps","itemProps","categoryObjects","category","copies","type","object","rotate","floor","random","j","temp","shuffle","allItemsHaveValue","items","attr","allItemsColoured","allConnectedItemsHaveDifferentColours","filter","cxn","graphIsChromatic","sequencesMatch","seq1","seq2","sequencesAreEquivalent","mapping1","Map","mapping2","value1","get","value2","set","graphNodesAreSameColour","samePatternButDifferent","min","sequenceHasNoMatches","rectCoords","Icons_GraphTheory","GraphTheory","Puzzles_PuzzlePage","visited","frontier","nodeCount","nextNodeId","nextNode","graphIsDisjoint","R3","ColourMaps","rx","ry","_ref$regions","ColourableMap","Map_Map","Transformations","Fragment","href","identity1","reflection1","rotation1","colour1","Transformation","Transformations_Transformation","Icons_Sequences","getSize","Sequence","_ref$sequence","_ref$y","ColourableSequence","Sequence_Sequence","Sequence2D","startY","GraphSequence","t1","t2","t112","t221","t121","t211","t123","t231","t312","s1122","s2211","s2112","s1221","s1212","s2121","correctSequence","correctGraphSequence","Icons_Categorisation","Categories","_getCirclePackedInCir","R","phi","cPhi","categorySize","categoryPositions","getCirclePackedInCircle","component","puzzle1","puzzle2","puzzle3","triangleWithCenter","lowTriangle","rectangle","displayCategories","Categories_Categories","Categorisation","Combinatorics","loop","sequenceSet","extractAttribute","toConsumableArray","has","PermutationPuzzles","puzzleData","categorisation-0","slug","icon","CategorisationIcons","categorisation-1","categorisation-2","categorisation-3","categorisation-4","graph-theory-0","GraphTheoryIcons","HamiltonianPath","graph-theory-1","graph-theory-2","MinimumCut","permutations-0","PermutationIcons","permutations-1","addData","name","icons","components","getData","ColourGraphIcons","ColourMapIcons","TransformationIcons","SequencesIcons","puzzleLayout","Icon","children","PuzzleMap","section","react_router_dom","to","window","hostname","match","ReactDOM","render","react_router","values","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6abac12a.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst ColourGraphIcon1 = () => <g>\n    <g className=\"graph-edges\">\n        <rect x=\"-20\" y=\"-20\" width=\"40\" height=\"40\" fill=\"none\" />\n        <line x1=\"-20\" y1=\"-20\" x2=\"20\" y2=\"20\" />\n        <line x1=\"-20\" y1=\"20\" x2=\"20\" y2=\"-20\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-20\" cy=\"-20\" r=\"7\" />\n        <circle className=\"colour-2\" cx=\"-20\" cy=\"20\" r=\"7\" />\n        <circle className=\"colour-1\" cx=\"20\" cy=\"20\" r=\"7\" />\n        <circle className=\"colour-2\" cx=\"20\" cy=\"-20\" r=\"7\" />\n        <circle className=\"colour-3\" cx=\"0\" cy=\"0\" r=\"7\" />\n    </g>\n</g>\n\nconst ColourGraphIcon2 = () => <g>\n    <g className=\"graph-edges\">\n        <rect x=\"-32\" y=\"-16\" width=\"64\" height=\"32\" />\n        <line x1=\"0\" y1=\"-16\" x2=\"0\" y2=\"16\" />\n        <line x1=\"-32\" y1=\"-16\" x2=\"0\" y2=\"16\" />\n        <line x1=\"32\" y1=\"-16\" x2=\"0\" y2=\"16\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-32\" cy=\"-16\" r=\"7\" />\n        <circle className=\"colour-2\" cx=\"0\" cy=\"-16\" r=\"7\" />\n        <circle className=\"colour-1\" cx=\"32\" cy=\"-16\" r=\"7\" />\n        <circle className=\"colour-2\" cx=\"32\" cy=\"16\" r=\"7\" />\n        <circle className=\"colour-3\" cx=\"0\" cy=\"16\" r=\"7\" />\n        <circle className=\"colour-2\" cx=\"-32\" cy=\"16\" r=\"7\" />\n    </g>\n</g>\n\nconst ColourGraphIcon3 = () => <g>\n    <g className=\"graph-edges\">\n        <path d=\"M32 0L16 27.7h-32L-32 0 -16 -27.71h32z\" />\n        <line x1=\"16\" y1=\"-27.71\" x2=\"16\" y2=\"27.71\" />\n        <line x1=\"-16\" y1=\"-27.71\" x2=\"-16\" y2=\"27.71\" />\n        <line className=\"edge-outline\" x1=\"-32\" y1=\"0\" x2=\"32\" y2=\"0\" />\n        <line x1=\"-32\" y1=\"0\" x2=\"32\" y2=\"0\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"32\" cy=\"0\" r=\"7\" />\n        <circle className=\"colour-2\" cx=\"16\" cy=\"27.71\" r=\"7\" />\n        <circle className=\"colour-3\" cx=\"-16\" cy=\"27.71\" r=\"7\" />\n        <circle className=\"colour-2\" cx=\"-32\" cy=\"0\" r=\"7\" />\n        <circle className=\"colour-1\" cx=\"-16\" cy=\"-27.71\" r=\"7\" />\n        <circle className=\"colour-3\" cx=\"16\" cy=\"-27.71\" r=\"7\" />\n    </g>\n</g>\n\nexport default [ColourGraphIcon1, ColourGraphIcon2, ColourGraphIcon3];\n","export function shuffle(arr) {\n    for (let i = arr.length; i--; ) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    return arr;\n}\n\nexport function getPermutations(arr) {\n    const result = [];\n  \n    const permute = (remainingItems, seq) => {\n        if (remainingItems.length === 0) {\n            result.push(seq)\n        } else {\n            let previousItem = false;\n            for (let i = 0; i < remainingItems.length; i++) {\n                const curr = remainingItems.slice();\n                const next = curr.splice(i, 1);\n                if (next[0] !== previousItem) {\n                    permute(curr, seq.concat(next));\n                    previousItem = next[0];\n                }\n            }\n        }\n   }\n  \n   // Copy arr and then sort it\n   permute(arr.slice().sort(), []);\n  \n   return result;\n}\n\n// Click enter or space triggers a given callback\nexport const handleKeyDown = (evt, callback) => {\n    if (evt.key === 'Enter' || evt.keyCode === 32) {\n        callback();\n    }\n};\n","import React from 'react';\nimport { handleKeyDown } from '../utils/common';\n\n\nexport const SVGButton = (props) =>\n    <circle\n        r=\"9\"\n        role=\"button\"\n        tabIndex=\"0\"\n        onKeyDown={evt => handleKeyDown(evt, props.onClick)}\n        {...props} />\n\n\nexport const Button = (props) =>\n    <svg viewBox=\"-15 -15 31 31\">\n        <SVGButton r=\"9\" {...props} />\n    </svg>\n","import React from 'react';\nimport { SVGButton } from './Button';\n\n\nconst TOOLBAR_R = 136;\nconst DELTA_ANGLE = Math.PI / 18;\n\n// Get an array of dots around the colour button to show how many times we can use it\nconst showColourCounter = (n, colour, x, y, angle, r) => {\n    if (!n) { return null; }\n    const dAngle = Math.PI * 2 / (3 * n);\n    angle += dAngle * (n - 1) / 2;\n\n    return Array.from({ length: n }).map(\n        (_, index) => <circle\n            key={index}\n            className={`fill-${ colour }`}\n            r={r * 0.3}\n            cx={x + (r * 1.6) * Math.cos(angle - index * dAngle)}\n            cy={y + (r * 1.6) * Math.sin(angle - index * dAngle)}\n        />\n    )\n}\n\nexport default function ({\n    puzzle,\n    colours,\n    clearPuzzle,\n    selectedColour\n}) {\n    const r = 8;\n    const positionR = TOOLBAR_R + r;\n\n    const nColours = colours.length;\n    const nButtons = nColours + (clearPuzzle ? 1 : 0);\n    const startAngle = Math.PI - DELTA_ANGLE * (nButtons - 1) / 2;\n\n    // Array of button positions\n    const position = Array(nButtons)\n        .fill()\n        .map((_, i) => {\n            const angle = startAngle + i * DELTA_ANGLE;\n            return {\n                angle,\n                x: positionR * Math.cos(angle),\n                y: positionR * Math.sin(angle)\n            }\n        });\n\n    const buttons = [];\n    for (let i = 0; i < nColours; i++) {\n        const { x, y, angle } = position[i];\n        const color = i + 1;\n        const setColour = () => puzzle.setState({ selectedColour: color });\n\n        let className = `colour-palette colour-${ color }`;\n        if (selectedColour === color) {\n            className += ' selected';\n        }\n\n        const button = <SVGButton\n            className={className}\n            role=\"radio\"\n            aria-checked={selectedColour === color}\n            key={i}\n            cx={x}\n            cy={y}\n            r={r}\n            onClick={setColour}\n        />\n\n        if (colours[i] > -1) {\n            //  Indicate number of times we can use this colour\n            buttons.push(\n                <g key={i}>\n                    { button }\n                    { showColourCounter(colours[i], i + 1, x, y, angle, r) }\n                </g>\n            );\n        } else {\n            buttons.push(button);\n        }\n\n    }\n\n    if (clearPuzzle) {\n        const { x, y } = position.pop();\n        buttons.push(<SVGButton\n            className=\"colour-palette\"\n            color=\"white\"\n            key=\"clear-button\"\n            cx={x}\n            cy={y}\n            r={r}\n            onClick={clearPuzzle}\n        />);\n    }\n\n    let selectColourIndicator = \"selected-colour-indicator\";\n    if (selectedColour) {\n        selectColourIndicator += ` colour-${selectedColour}`;\n    }\n\n    return <g className=\"toolbar\">\n        <circle className={selectColourIndicator} r=\"132\" />\n        <g role=\"radiogroup\">\n            { buttons }\n        </g>\n    </g>;\n}\n","import React from 'react';\nimport { withRouter } from 'react-router';\nimport { parse } from 'query-string';\n\nimport Toolbar from '../Toolbars/Toolbar';\nimport { Button } from '../Toolbars/Button';\n\nimport './puzzle.css';\nimport './puzzleChamber.css';\n\n\nconst COLOURS = [\n    'rgb(170, 170, 170)',\n    'rgb(20, 146, 196)',\n    'rgb(196, 20, 96)',\n    'rgb(20, 198, 96)',\n    'rgb(220, 220, 20)',\n];\n\nclass PuzzlePage extends React.Component {\n    constructor(props) {\n        super(props);\n   \n        const queryString = parse(props.location.search);\n        const index = parseInt(queryString.q) || 0;\n\n        this.state = {\n            index,\n\t\t\tsolved: false,\n            selectedColour: null,\n        }\n\n        this.clear = this.clear.bind(this);\n        this.update = this.update.bind(this);\n        this.getPuzzle = this.getPuzzle.bind(this);\n        this.nextPuzzle = this.nextPuzzle.bind(this);\n        this.backToMenu = this.backToMenu.bind(this);\n    }\n\n    componentDidMount() {\n        // Load the first puzzle\n        this.getPuzzle(this.state.index);\n    }\n\n    getPuzzle(index) {\n        const { getPuzzleObject, puzzles } = this.props;\n        const puzzle = puzzles[index];\n\n        // If colourPallete is a number then convert it into an array of -1s\n        // to indicate that each colour can be used infinitely\n        const colourPalette = Array.isArray(puzzle.colourPalette) ?\n            puzzle.colourPalette :\n            Array.from({ length: puzzle.colourPalette }).map(_ => -1);\n\n        if (puzzle) {\n            this.setState({\n                puzzle: getPuzzleObject(puzzle),\n                clearButton: puzzle.clearButton,\n                colourPalette,\n            });\n        }\n    }\n\n    nextPuzzle() {\n        const nextState = this.state.index + 1;\n        this.setState({\n            index: nextState,\n            solved: false,\n            selectedColour: null\n        });\n        this.getPuzzle(nextState);\n    }\n\n    backToMenu() {\n        this.props.history.push(\"/\")\n    }\n\n    clear() {\n        this.getPuzzle(this.state.index);\n    }\n\n    // Child element has updated so evaluate to see if puzzle has been solved\n    update() {\n        const puzzle = this.state.puzzle;\n        const solved = this.props.evaluate(puzzle);\n        this.setState({ puzzle, solved });\n    }\n\n    getNextPuzzleButton() {\n        // Only show button if the puzzle has been solved\n        if (!this.state.solved) { return null; }\n\n        if (this.state.index < this.props.puzzles.length - 1) {\n            // Button to go to the next puzzle\n            return <div className=\"menu-button next-puzzle-button\" aria-label=\"Next puzzle\">\n                <Button onClick={this.nextPuzzle}/>\n            </div>\n        } else {\n            // Button to go back to the home page\n            return <div className=\"menu-button next-puzzle-button\" aria-label=\"Puzzle completed\" role=\"link\">\n                <Button onClick={this.backToMenu}/>\n            </div>\n        }\n    }\n\n    render() {\n        const { index, puzzle, selectedColour } = this.state;\n        if (!puzzle) { return null; }\n\n        const colourPalette = this.state.colourPalette || this.props.colourPalette;\n        const clearPuzzle = (this.state.clearButton || this.props.clearButton) ? this.clear : null;\n\n        // Determine what the selected colour is if we have selected one\n        const style = {\n            color: COLOURS[selectedColour || 0]\n        };\n        const className = selectedColour ? \"colour-selected\" : \"\";\n\n        return <main>\n            <nav>\n                <div className=\"menu-button back-button\" aria-label=\"Back to menu\" role=\"link\">\n                    <Button onClick={this.backToMenu}/>\n                </div>\n\n                { this.getNextPuzzleButton() }\n            </nav>\n\n            <svg id=\"puzzle-chamber\" viewBox=\"-128 -128 256 256\" preserveAspectRatio=\"xMidYMid meet\">\n                <defs>\n                    <filter id=\"shadow-filter\">\n                        <feOffset result=\"offOut\" in=\"SourceAlpha\" dx=\"2\" dy=\"2\"/>\n                        <feGaussianBlur result=\"blurOut\" in=\"offOut\" stdDeviation=\"5\" />\n                        <feBlend in=\"SourceGraphic\" in2=\"blurOut\" mode=\"normal\" />\n                    </filter>\n                    <filter id=\"glow-filter\" x=\"-250%\" y=\"-250%\" width=\"500%\" height=\"500%\">\n                        <feMorphology in=\"mask\" result=\"dilated\" operator=\"dilate\" radius=\"1\" />\n                        <feGaussianBlur stdDeviation=\"3\" result=\"colouredBlur\" />\n                        <feMerge>\n                            <feMergeNode in=\"coloredBlur\"/>\n                            <feMergeNode in=\"SourceGraphic\"/>\n                        </feMerge>\n                    </filter>\n                </defs>\n\n                <rect className=\"background\" x=\"-200\" y=\"-200\" width=\"400\" height=\"400\" />\n\n                <g id=\"puzzle\" key={index} className={className} style={style}>\n                    { this.props.displayPuzzle(puzzle, this) }\n                </g>\n\n                <circle id=\"chamber-window\" r=\"212\" />\n                <Toolbar \n                    puzzle={this}\n                    colours={colourPalette}\n                    clearPuzzle={clearPuzzle}\n                    selectedColour={selectedColour}\n                />\n            </svg>\n        </main>\n    }\n};\n\nexport default withRouter(PuzzlePage);\n","import React from 'react';\n\n\nexport const Line = ({ className, x1, y1, x2, y2 }) =>\n    <line className={className} x1={x1} y1={y1} x2={x2} y2={y2} />\n","import { handleKeyDown } from '../../utils/common';\n\n\n// Given a node, return props to make it colourable\nexport function isColourable(item, chamber, {className=\"\", onColour=null}={}) {\n    if (item.colour) {\n        className += ` fill-${item.colour}`;\n    } else {\n        className += \" no-fill\";\n    }\n\n    if (item.fixed) {\n        return { className };\n    }\n\n    className += \" colourable\";\n\n    const colour = chamber.state.selectedColour;\n    const colourUses = chamber.state.colourPalette.slice();\n\n    const colourThisItem = () => {\n        if (!colour) { return; }\n\n        if (item.colour === colour) {\n            // Remove exisiting colour\n            item.colour = 0;\n            colourUses[colour - 1]++;\n            if (onColour) { onColour(item); }\n        } else if (colourUses[colour - 1] !== 0) {\n            // Colour item\n            item.colour = colour;\n            colourUses[colour - 1]--;\n            if (onColour) { onColour(item); }\n        }\n        \n        chamber.setState({ colourPalette: colourUses })\n        chamber.update();\n    };\n\n    return {\n        className,\n        tabIndex: 0,\n        onClick: colourThisItem,\n        onKeyDown: (evt) => handleKeyDown(evt, colourThisItem)\n    };\n}\n","import React from 'react';\nimport { Line } from './Primitives';\nimport { isColourable } from './utils';\n\n\n// Display a graph in which the nodes have the potential to be coloured\nexport const Graph = ({ edges=[], nodes=[], chamber, onColour }) =>\n    <g className=\"graph\">\n        <g className=\"graph-edges\">\n            { edges.map((edge, i) =>\n                <g key={i}>\n                    <Line className=\"edge-outline\" {...edge} />\n                    <Line className={edge.active ? `stroke-${ edge.active }`: null} {...edge} />\n                </g>\n            )}\n        </g>\n        <g className=\"graph-nodes\">\n            { nodes.map((node, i) => \n                <g key={i} transform={`translate(${ node.x } ${ node.y })`}>\n                    <circle className=\"node-outline\" r={node.r} />\n                    <circle r={node.r} {...isColourable(node, chamber, { onColour })} />\n                </g>\n            )}\n        </g>\n    </g>\n\n// A graph where the edges can be selected\nexport const EdgeGraph = ({ edges=[], nodes=[], chamber, onColour }) =>\n    <g className=\"graph\">\n        <g className=\"graph-edges\">\n            { edges.map((edge, i) => {\n                const dx = edge.x2 - edge.x1;\n                const dy = edge.y2 - edge.y1;\n                const angle = Math.atan2(dy, dx) * 180 / Math.PI;\n                const length = Math.sqrt(dx * dx + dy * dy);\n        \n                return <rect\n                    key={i}\n                    transform={`translate(${edge.x1} ${edge.y1}) rotate(${angle})`}\n                    y={-4}\n                    width={length}\n                    height={8}\n                    {...isColourable(edge, chamber, { onColour })}\n                />\n            })}\n        </g>\n        <g className=\"graph-nodes\">\n            { nodes.map((node, i) => \n                <g key={i} transform={`translate(${node.x} ${node.y})`}>\n                    <circle className=\"node-outline\" r={node.r} />\n                    <circle className=\"no-fill\" r={node.r} />\n                </g>\n            )}\n        </g>\n    </g>\n\nexport const ColourableGraph = (graph, chamber) =>\n    <Graph {...graph} chamber={chamber} />\n\nexport const ColourableEdgeGraph = (graph, chamber) =>\n    <EdgeGraph {...graph} chamber={chamber} />\n\n// A colourable graph where you can only colour points next to the one you last coloured\n// You can pick any node as the first node you colour\nexport const ColourablePath = (graph, chamber) => {\n    const colour = chamber.state.selectedColour;\n\n    // Function that updates graph state when a node is coloured,\n    // making only nodes next to the last coloured one colourable \n    const onColour = node => {\n        const nodeIndex = node.index;\n        let targetNode = graph.nodes[nodeIndex];\n\n        if (targetNode.colour) {\n            if (!graph.path) { graph.path = []; }\n\n            // Colour the edge of the path\n            const previousNode = graph.path.slice(-1)[0];\n            if (previousNode) {\n                previousNode.edges[nodeIndex].active = colour;\n            }\n\n            // Add new node to the path\n            graph.path.push(targetNode);\n        } else {\n            // Remove the node we clicked on\n            graph.path.pop();\n            const previousNode = graph.path.slice(-1)[0];\n            if (previousNode) {\n                previousNode.fixed = false;\n                previousNode.edges[nodeIndex].active = false;\n            }\n            // The active node is now the previous node in the path\n            targetNode = previousNode;\n        }\n\n        // Update nodes\n        if (targetNode) {\n            for (let i = 0; i < graph.nodes.length; i++) {\n                const node = graph.nodes[i];\n                if (node === targetNode) { continue; }\n                \n                // Nodes connected to the targetNode are open, the others are fixed\n                if (!node.colour) {\n                    if (node.edges[targetNode.index]) {\n                        node.fixed = false;\n                    } else {\n                        node.fixed = true;\n                    }\n                }\n            }\n        } else {\n            // No nodes left in the path, so all nodes are active\n            graph.nodes.forEach(node => node.fixed = false);\n        }\n    };\n\n    return <Graph {...graph} chamber={chamber} onColour={onColour} />\n};\n\n// A colourable graph, where colouring a node also colours any adjacent nodes\nexport const DominatingSet = (graph, chamber) => {\n    const onColour = node => {\n        const nodeIndex = node.index;\n        const targetNode = graph.nodes[nodeIndex];\n        const neighbours = Object.keys(targetNode.edges);\n\n        if (targetNode.colour) {\n            // Colour neighbours\n            neighbours.forEach(n => {\n                // Colour node if it is not coloured\n                if (!graph.nodes[n].colour) {\n                    graph.nodes[n].colour = 2;\n                }\n                // Colour edge\n                targetNode.edges[n].active = 2;\n            })\n        } else {\n            // Remove colour from neighbour unless they are next to other coloured nodes\n            neighbours.forEach(n => {\n                targetNode.edges[n].active = 0;\n                const node = graph.nodes[n];\n                if (node.colour === 2) {\n                    // Check neighbours for nodes that are coloured\n                    if (Object.keys(node.edges).every(n2 => graph.nodes[n2].colour !== 1)) {\n                        node.colour = 0;\n                    } \n                } else if (node.colour === 1) {\n                    // This node is next to a different coloured node, so colour with colour 2\n                    targetNode.colour = 2;\n                    targetNode.edges[n].active = 2;\n                }\n            })\n        }\n    }\n\n    return <Graph {...graph} chamber={chamber} onColour={onColour} />\n};\n","\n// Get an array of values from calling function <func> n times\nfunction nTimes(n, func) {\n    return Array.from({ length: n }).map(func);\n}\n\n// If arr is not an array return an empty array with that length\n// If arr is a number, then return an array with n items with the given value\nfunction getArray(arr, value) {\n    if (Array.isArray(arr)) {\n        return arr;\n    }\n    return nTimes(arr, (_) => value);\n}\n\nexport function getPointsOnACircle(n, {r=1, offsetAngle=0, dx=0, dy=0}={}) {\n    const points = [];\n    const dAngle = 2 * Math.PI / n;\n    let angle = (offsetAngle * Math.PI / 180 || 0) - 0.5 * dAngle;\n\n    for (let i = 0; i < n; i++) {\n        points.push([\n            dx + r * Math.sin(angle),\n            dy + r * Math.cos(angle),\n        ]);\n        angle += dAngle;\n    }\n\n    return points;\n}\n\nexport function getNodesOnCircle(colours, {r=1, offsetAngle=0, dx=0, dy=0}={}) {\n    colours = getArray(colours);\n    const n = colours.length;\n    const points = getPointsOnACircle(n, { r, offsetAngle, dx, dy });\n\n    // Combine coordinates with colours\n    const nodes = points.map(([x, y], i) => [x, y, colours[i]]);\n\n    return nodes;\n}\n\nexport function getLineOfEdges(start, stop) {\n    if (stop === undefined) {\n        stop = start - 1;\n        start = 0;\n    }\n\n    var edges = [];\n    for (var i = start; i < stop; i++) {\n        edges.push([i, i + 1]);\n    }\n\n    return edges;\n}\n\nexport function getLoopOfEdges(start, stop) {\n    if (stop === undefined) {\n        stop = Math.max(0, start - 1);\n        start = 0;\n    }\n\n    const edges = getLineOfEdges(start, stop);\n    if (start !== stop) {\n        edges.push([stop, start]);\n    }\n    return edges;\n}\n\nexport function connectNodeToNodes(node1, nodes) {\n    return nodes.map(node => [node1, node]);\n}\n\nexport function linearGraph(colours, params={}) {\n    const { scale=1, colour, ...props } = params;\n    colours = getArray(colours, colour);\n    \n    const n = colours.length;\n    const startX = - (n - 1) * scale / 2;\n    const nodes = colours.map((colour, i) => [startX + i * scale, 0, colour])\n    const edges = getLineOfEdges(n);\n\n    return Object.assign(props, { nodes, edges });\n}\n\nexport function loopGraph(colours, params={}) {\n    const { scale=1, colour, ...props } = params;\n    colours = getArray(colours, colour);\n    \n    const nodes = getNodesOnCircle(colours, { r: scale });\n    const edges = getLoopOfEdges(colours.length);\n\n    return Object.assign(props, { nodes, edges });\n}\n\nexport function starGraph(colours, params={}) {\n    const { scale=1, colour, ...props } = params;\n    colours = getArray(colours, colour);\n\n    const firstNode = colours.shift();\n    const nodes = [[0, 0, firstNode]].concat(getNodesOnCircle(colours, { r: scale }));\n    const edges = colours.map((_, index) => [0, index + 1]);\n\n    return Object.assign(props, { nodes, edges });\n}\n\nexport function spokeGraph(colours, params={}) {\n    const graph = starGraph(colours, params);\n    graph.edges = graph.edges.concat(getLoopOfEdges(1, colours - 1))\n    return graph;\n}\n\nexport function sunletGraph(n, params={}) {\n    // AKA helm graph\n    // Determine radius of inner shape so its side length is the same as the remaining radial spoke length\n    const p = 1 / (1  + 2 * Math.sin(Math.PI / n));\n    const scale = params.scale || 1;\n    params.scale = scale * p;\n\n    const graph = loopGraph(n, params);\n    graph.nodes = graph.nodes.concat(getNodesOnCircle(n, { r: scale }));\n    graph.edges = graph.edges.concat(nTimes(n, (_, index) => [index, index + n]));\n\n    return graph;\n}\n\nexport function prismGraph(n, params={}) {\n    const graph = sunletGraph(n, params);\n    graph.edges = graph.edges.concat(getLoopOfEdges(n, 2 * n - 1));\n    return graph;\n}\n\nexport function antiPrismGraph(n, params={}) {\n    const p = 1 / (1  + 2 * Math.sin(Math.PI / n));\n    const scale = params.scale || 1;\n    params.scale = scale * p;\n\n    const graph = loopGraph(n, params);\n    graph.nodes = graph.nodes.concat(getNodesOnCircle(n, { r: scale, offsetAngle: 180 / n }));\n    graph.edges = graph.edges.concat(nTimes(n, (_, index) => [index, n + index]));\n    graph.edges = graph.edges.concat(nTimes(n, (_, index) => [index, n + ((index + n - 1) % n)]));\n    graph.edges = graph.edges.concat(getLoopOfEdges(n, 2 * n - 1));\n    return graph;\n}\n\nexport function gearGraph(n, params={}) {\n    const graph = subdivideGraph(loopGraph(n, params));\n    graph.nodes.push([0, 0, undefined]);\n    graph.edges = graph.edges.concat(nTimes(n, (_, index) => [index, 2 * n]))\n    return graph;\n}\n\nexport function subdivideGraph(graph) {\n    const newEdges = [];\n    const nodes = graph.nodes;\n    let n = nodes.length;\n\n    graph.edges.forEach(([n1, n2]) => {\n        const node1 = nodes[n1];\n        const node2 = nodes[n2];\n        nodes.push([(node1[0] + node2[0]) / 2, (node1[1] + node2[1]) / 2, node1[2]]);\n        newEdges.push([n1, n], [n2, n]);\n        n++;\n    })\n\n    graph.edges = newEdges;\n\n    return graph;\n}\n\nfunction getRegularPolygonGraph(size, colours, scale=1) {\n    // Can pass in a single colour to set all nodes to that colour\n    if (!Array.isArray(colours)) {\n        colours = Array.from({ length: size }).map(_ => colours);\n    }\n\n    return {\n        nodes: getNodesOnCircle(colours, { r: scale }),\n        edges: getLoopOfEdges(size)\n    };\n}\n\nexport function triangleGraph(colours, scale=1) {\n    return getRegularPolygonGraph(3, colours, scale);\n}\n\nexport function squareGraph(colours, scale=1) {\n    return getRegularPolygonGraph(4, colours, scale);\n}\n","/***\n * These functions take the raw puzzle data and return an object that can used to\n * display the puzzle and determine when the correct answer is found\n***/\n\nimport { shuffle, getPermutations } from '../utils/common';\nimport { linearGraph } from '../utils/graphUtils';\n\n// Given arrays of node coordinates and edge coordinates, return an object of nodes and edges\nexport function getGraphObject({ nodes=[], edges=[], size=32, r=8, colour }) {\n    const nodeObjects = nodes.map(([x, y, nodeColour], index) => ({\n        r,\n        index,\n        x: x * size,\n        y: y * size,\n        colour: nodeColour || colour,\n        fixed: Boolean(nodeColour || colour),\n        edges: {}\n    }));\n\n    const edgeObjects = edges.map(([n1, n2]) => {\n        const node1 = nodeObjects[n1];\n        const node2 = nodeObjects[n2];\n        const edge = {\n            node1,\n            node2,\n            x1: node1.x,\n            y1: node1.y,\n            x2: node2.x,\n            y2: node2.y\n        };\n\n        // Edges map another node to the edge object\n        node1.edges[node2.index] = edge;\n        node2.edges[node1.index] = edge;\n\n        return edge;\n    });\n\n    return {\n        nodes: nodeObjects,\n        edges: edgeObjects\n    };\n}\n\n// Given arrays of node coordinates and edge coordinates, return two objects of nodes and edges,\n// one includes the node colours and one is empty\nexport function getGraphAndUncolouredCopy({ nodes=[], edges=[], size=32, r=8 }) {\n    const target = getGraphObject({ nodes, edges, size, r });\n\n    // Remove the colours from the nodes\n    const blankNodes = nodes.map(([x, y]) => [x, y]);\n    const blankGraph = getGraphObject({ nodes: blankNodes, edges, size, r });\n\n    return { target, blank: blankGraph };\n}\n\nexport function getMapObject({ regions=[], connections=[], size=1 }) {\n    const regionObjects = regions.map(([x, y, width, height]) => ({\n        x: (x - width / 2) * size,\n        y: (y - height / 2) * size,\n        width: width * size,\n        height: height * size,\n    }));\n\n    const connectionObjects = connections.map(([n1, n2]) => ({\n        node1: regionObjects[n1],\n        node2: regionObjects[n2],\n    }));\n\n    // Create a graph of the map in order to evaluate the solution\n    return {\n        regions: regionObjects,\n        connections: connectionObjects\n    };\n}\n\n// Convert a number to n object with a colour attribute equal to that number and a fixed attribute\nconst colourNumberToColourObject = colour => ({\n    colour,\n    fixed: colour > 0\n});\n\nexport function getSequenceObject({ pattern, answer }) {\n    //  Get a sequence of node objects\n    const sequence = pattern.map(colourNumberToColourObject);\n\n    // Target sequence is the starting sequence with any 0s replaced by the answer items\n    let n = 0;\n    const target = pattern.map(colour => {\n        if (colour > 0) {\n            return { colour };\n        } else {\n            return { colour: answer[n++] };\n        }\n    });\n\n    return { sequence, target };\n}\n\nexport function getPermutationObject({ pattern }) {\n    //  Get an array of sequences\n    // const sequences = pattern.map(sequence => sequence.map(colourNumberToColourObject));\n\n    //  Get an array of linear graphs\n    const sequences = pattern.map(sequence => getGraphObject(linearGraph(sequence)));\n    // Find all permutations based on the first item in the pattern\n    const permutations = getPermutations(pattern[0]);\n    const permutationSet = new Set(permutations.map(permutation => permutation.join('-')))\n\n    return { sequences, target: permutationSet };\n}\n\nexport function getGraphSequence({ graphs, answer }) {\n    const sequence = [];\n    const target = [];\n\n    let n = 0;\n    graphs.forEach(graph => {\n        if (graph) {\n            sequence.push(getGraphObject(graph));\n            target.push(getGraphObject(graph));\n        } else {\n            // Target sequence is the starting sequence with any nulls replaced by the answer graphs\n            const answerGraph = getGraphObject(answer[n]);\n            target.push(answerGraph);\n            \n            // Displayed sequence show answer as a blank graph\n            const blankGraph = getGraphObject(answer[n]);\n            blankGraph.nodes.forEach(node => {\n                node.fixed = false;\n                node.colour = 0;\n            });\n\n            sequence.push(blankGraph);\n            target.push(answerGraph);\n            n++;\n        }\n    });\n\n    return { sequence, target };\n}\n\n// Return an array of category object which have a colour, and an object to display\nexport function getCategoryObjects({ categories, randomRotate, itemProps={} }) {\n    const categoryObjects = [];\n    \n    categories.forEach(category => {\n        const copies = category.copies || 1;\n        const item = Object.assign(category.item, itemProps);\n\n        for (let i = 0; i < copies; i++) {\n            categoryObjects.push({\n                category: category.type,\n                object: item,\n                rotate: randomRotate ? Math.floor(Math.random() * 12) * 30 : 0\n            });\n        }\n    });\n\n    return shuffle(categoryObjects);\n}\n","// Test whether all items are bigger than 0 or have an attrubute with value bigger than 0\nexport const allItemsHaveValue = (items=[], attr) =>\n    attr ?\n        items.every(item => item[attr] > 0) :\n        items.every(item => item > 0);\n\nexport const allItemsColoured = (items=[]) => allItemsHaveValue(items, 'colour');\n\nexport const extractAttribute = (items=[], attr) => items.map(item => item[attr]);\n\nexport function allConnectedItemsHaveDifferentColours(cxns=[]) {\n    const failingCxns = cxns.filter(cxn => cxn.node1.colour === cxn.node2.colour);\n    return failingCxns.length === 0;\n}\n\nexport const graphIsChromatic = ({ nodes, edges }) => \n    allItemsColoured(nodes) &&\n    allConnectedItemsHaveDifferentColours(edges);\n\nexport const sequencesMatch = (seq1, seq2, attr) => {\n    if (seq1.length !== seq2.length) { return false; }\n    for (let i = 0; i < seq1.length; i++) {\n        const value1 = attr ? seq1[i][attr] : seq1[i];\n        const value2 = attr ? seq2[i][attr] : seq2[i];\n        if (value1 !== value2) {\n            return false;\n        }\n    }\n    return true;\n};\n\nexport const sequenceHasNoMatches = (seq1, seq2) => {\n    const n = Math.min(seq1.length, seq2.length);\n\n    for (let i = 0; i < n; i++) {\n        if (seq1[i] === seq2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test whether there is a consistent mapping between the values in one array to the value the other\nexport const sequencesAreEquivalent = (seq1, seq2) => {\n    if (seq1.length !== seq2.length) { \n        return false;\n    }\n\n    const mapping1 = new Map();\n    const mapping2 = new Map();\n\n    for (let i = 0; i < seq1.length; i++) {\n        const value1 = mapping1.get(seq1[i]);\n        const value2 = mapping2.get(seq2[i]);\n\n        if (value1 === undefined) {\n            mapping1.set(seq1[i], seq2[i]);\n        } else if (value1 !== seq2[i]) {\n            return false;\n        }\n\n        if (value2 === undefined) {\n            mapping2.set(seq2[i], seq1[i]);\n        } else if (value2 !== seq1[i]) {\n            return false;\n        }\n        \n    }\n\n    return true;\n};\n\n// Test whether the nodes of two graphs are the same colour\nexport const graphNodesAreSameColour = ({ blank, target }) => \n    allItemsColoured(blank.nodes) &&\n    sequencesMatch(blank.nodes, target.nodes, 'colour');\n\n// Test whether the nodes of two graphs have the same pattern,\n// i.e. there is a consistent mapping from the colours in one graph to the colour in the target\nexport const graphNodesHaveSamePattern = ({ blank, target }) =>\n    allItemsColoured(blank.nodes) &&\n    sequencesAreEquivalent(blank.nodes, target.nodes);\n\nexport const samePatternButDifferent = (seq1, seq2) =>\n    allItemsHaveValue(seq1) &&\n    allItemsHaveValue(seq2) &&\n    sequenceHasNoMatches(seq1, seq2) &&\n    sequencesAreEquivalent(seq1, seq2);\n\n\nexport const graphIsDisjoint = (nodes) => {\n    nodes.forEach(node => node.visited = false);\n    \n    // Begin with the first node\n    const frontier = [nodes[0]];\n    nodes[0].visited = true;\n    let nodeCount = 1;\n\n    while(frontier.length > 0) {\n        const node = frontier.pop();\n        const edges = node.edges;\n\n        for (const nextNodeId in edges) {\n            // If edge not cut and node hasn't been visited\n            if (!edges[nextNodeId].colour) {\n                const nextNode = nodes[nextNodeId];\n                if (!nextNode.visited) {\n                    frontier.push(nextNode)\n                    nextNode.visited = true;\n                    nodeCount++;\n                }\n            }\n        }\n    }\n\n    return nodeCount < nodes.length;\n}","/*\n * Colour all nodes on a graph such that no edges joins two nodes of the same colour.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from './PuzzlePage';\nimport { ColourableGraph } from './PuzzleComponents/Graph';\nimport { getGraphObject } from './puzzleLoaders';\nimport { getNodesOnCircle, getLoopOfEdges } from '../utils/graphUtils';\nimport { graphIsChromatic } from '../utils/evaluation';\n\n\nconst puzzles1 = [\n\t{\n\t\tcolourPalette: 1,\n\t\tnodes: [[0, 0]]\n\t}, {\n\t\tcolourPalette: 2,\n\t\tnodes: [[-1, 0], [1, 0]],\n\t\tedges: [[0, 1]],\n\t}, {\n\t\tcolourPalette: 2,\n\t\tnodes: [[-2, 0], [0, 0], [2, 0]],\n\t\tedges: [[0, 1], [1, 2]],\n\t}, {\n\t\tcolourPalette: 3,\n\t\tnodes: getNodesOnCircle(3),\n\t\tedges: getLoopOfEdges(3),\n\t}, {\n\t\tcolourPalette: 2,\n\t\tnodes: getNodesOnCircle(4),\n\t\tedges: getLoopOfEdges(4),\n\t}, {\n\t\tcolourPalette: 3,\n\t\tnodes: getNodesOnCircle(4),\n\t\tedges: getLoopOfEdges(4).concat([[1, 3]]),\n\t}, {\n\t\tcolourPalette: 4,\n\t\tnodes: getNodesOnCircle(4),\n\t\tedges: getLoopOfEdges(4).concat([[1, 3], [0, 2]]),\n\t}, {\n\t\tcolourPalette: 3,\n\t\tnodes: [[0, 0]].concat(getNodesOnCircle(4)),\n\t\tedges: getLoopOfEdges(1, 4).concat([[0, 1], [0, 2], [0, 3], [0, 4]]),\n\t}\n];\n\nconst rectCoords = [[-2, -1], [0, -1], [2, -1], [2, 1], [0, 1], [-2, 1]];\nconst puzzles2 = [\n    {\n        colourPalette: 2,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6),\n    }, {\n        colourPalette: 2,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[1, 4]]),\n    }, {\n        colourPalette: 2,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[0, 3]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[0, 4]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[0, 4], [2, 4]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[0, 4], [1, 4], [2, 4]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[0, 4], [1, 4], [1, 3]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: getNodesOnCircle(3).concat(getNodesOnCircle(3, { r: 2, offsetAngle: 60 })),\n        edges: getLoopOfEdges(3).concat([[0, 3], [1, 3], [1, 4], [2, 4], [0, 5], [2, 5]]),\n    }, {\n        colourPalette: 3,\n        scale: 16,\n        nodes: getNodesOnCircle(3).concat(getNodesOnCircle(3, { r: 4, offsetAngle: 60 })),\n        edges: getLoopOfEdges(3)\n            .concat(getLoopOfEdges(3, 5))\n            .concat([[0, 3], [1, 3], [1, 4], [2, 4], [0, 5], [2, 5]]),\n    }\n];\n\n// TODO: Give more colourPalette than required\nconst puzzles3 = [\n    {\n        colourPalette: 2,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6),\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[2, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 2], [2, 4]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 2], [2, 4], [0, 4]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[1, 3], [0, 4], [2, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[2, 4], [1, 3], [0, 4], [1, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 3], [1, 4], [2, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 2], [1, 3], [2, 4], [3, 5], [4, 0], [5, 1]]),\n    }\n];\n\nconst puzzles = [puzzles1, puzzles2, puzzles3];\n\nexport const ColourGraph = (n) =>\n    <PuzzlePage\n        puzzles={puzzles[n]}\n        evaluate={graphIsChromatic}\n\t\tgetPuzzleObject={getGraphObject}\n\t\tdisplayPuzzle={ColourableGraph}\n    />\n","import React from 'react';\n\n\nconst HamiltonianPath = () => <g>\n    <g className=\"graph-edges\">\n        <line x1=\"-30\" y1=\"20\" x2=\"0\" y2=\"-32\" />\n\n        <g className=\"colour-1\">\n            <line x1=\"-12\" y1=\"8\" x2=\"0\" y2=\"-12\" />\n            <line x1=\"-12\" y1=\"8\" x2=\"12\" y2=\"8\" />\n            <line x1=\"0\" y1=\"-12\" x2=\"12\" y2=\"8\" />\n            <line x1=\"0\" y1=\"-32\" x2=\"30\" y2=\"20\" />\n            <line x1=\"-30\" y1=\"20\" x2=\"30\" y2=\"20\" />\n            <line x1=\"0\" y1=\"-32\" x2=\"0\" y2=\"-12\" />\n        </g>\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-12\" cy=\"8\" r=\"6\" />\n        <circle className=\"colour-1\" cx=\"0\" cy=\"-12\" r=\"6\" />\n        <circle className=\"colour-1\" cx=\"12\" cy=\"8\" r=\"6\" />\n\n        <circle className=\"colour-1\" cx=\"-30\" cy=\"20\" r=\"6\" />\n        <circle className=\"colour-1\" cx=\"0\" cy=\"-32\" r=\"6\" />\n        <circle className=\"colour-1\" cx=\"30\" cy=\"20\" r=\"6\" />\n    </g>\n</g>\n\nconst DominatingSet = () => <g>\n    <g className=\"graph-edges\">\n        <rect x=\"-20\" y=\"-20\" width=\"40\" height=\"40\" fill=\"none\" />\n\n        <g className=\"colour-1\">\n            <line x1=\"-20\" y1=\"-20\" x2=\"20\" y2=\"20\" />\n            <line x1=\"-20\" y1=\"20\" x2=\"20\" y2=\"-20\" />\n        </g>\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-2\" cx=\"-20\" cy=\"-20\" r=\"6\" />\n        <circle className=\"colour-2\" cx=\"-20\" cy=\"20\" r=\"6\" />\n        <circle className=\"colour-2\" cx=\"20\" cy=\"20\" r=\"6\" />\n        <circle className=\"colour-2\" cx=\"20\" cy=\"-20\" r=\"6\" />\n        <circle className=\"colour-1\" cx=\"0\" cy=\"0\" r=\"6\" />\n    </g>\n</g>\n\nconst MinimumCut = () => <g>\n    <g className=\"graph-edges\">\n        <line x1=\"-32\" y1=\"16\" x2=\"-32\" y2=\"-16\" />\n        <line x1=\"-32\" y1=\"16\" x2=\"-12\" y2=\"0\" />\n        <line x1=\"-32\" y1=\"-16\" x2=\"-12\" y2=\"0\" />\n        <line x1=\"32\" y1=\"16\" x2=\"32\" y2=\"-16\" />\n        <line x1=\"32\" y1=\"16\" x2=\"12\" y2=\"0\" />\n        <line x1=\"32\" y1=\"-16\" x2=\"12\" y2=\"0\" />\n\n        <g className=\"colour-none\">\n            <line x1=\"-12\" y1=\"0\" x2=\"12\" y2=\"0\" />\n        </g>\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-32\" cy=\"-16\" r=\"6\" />\n        <circle className=\"colour-1\" cx=\"-32\" cy=\"16\" r=\"6\" />\n        <circle className=\"colour-1\" cx=\"-12\" cy=\"0\" r=\"6\" />\n        <circle className=\"colour-2\" cx=\"32\" cy=\"-16\" r=\"6\" />\n        <circle className=\"colour-2\" cx=\"32\" cy=\"16\" r=\"6\" />\n        <circle className=\"colour-2\" cx=\"12\" cy=\"0\" r=\"6\" />\n    </g>\n</g>\n\nexport default [HamiltonianPath, DominatingSet, MinimumCut];\n","/*\n * Find the smallest dominating set.\n * Colour the vertices of a graph such that each vertex is coloured or adjacent\n * to a vertex that is coloured. The number of vertices you can colour is limited.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../PuzzlePage';\nimport { getGraphObject } from '../puzzleLoaders';\nimport { ColourableEdgeGraph } from '../PuzzleComponents/Graph';\n\nimport {\n    getNodesOnCircle,\n    linearGraph,\n    loopGraph,\n    getLoopOfEdges\n} from '../../utils/graphUtils';\nimport { graphIsDisjoint } from '../../utils/evaluation';\n\n\nconst puzzles = [\n    {\n        colourPalette: [1],\n        graph: linearGraph(2, { scale: 2, r: 10 })\n    }, {\n        colourPalette: [1],\n        graph: linearGraph(3, { scale: 2, r: 10 })\n    }, {\n        colourPalette: [2],\n        graph: loopGraph(4, { scale: 2, r: 10 })\n    }, {\n        colourPalette: [1],\n        graph: {\n            r: 10,\n            nodes: [[-2.5, -1.6], [-2.5, 1.6], [-0.8, 0], [0.8, 0], [2.5, -1.6], [2.5, 1.6]],\n            edges: [[0, 1], [0, 2], [1, 2], [2, 3], [3, 4], [3, 5], [4, 5]]\n        }\n    }, {\n        colourPalette: [1],\n        graph: {\n            r: 10,\n            nodes: getNodesOnCircle(3, { colour: 1, r: 2 }).concat([[0, 0, 1]]),\n            edges: [[0, 1], [1, 2], [0, 2], [2, 3]]\n        }\n    }, {\n        colourPalette: [2],\n        graph: {\n            r: 10,\n            nodes: [\n                [-3, -1], [-1, -1], [1, -1], [3, -1],\n                [3, 1], [1, 1], [-1, 1], [-3, 1] \n            ],\n            edges: getLoopOfEdges(8).concat([[0, 6], [1, 7], [2, 4], [3, 5]])\n        }\n    }, {\n        colourPalette: [2],\n        graph: {\n            r: 10,\n            nodes: [\n                [-3, -1], [-1, -1], [1, -1], [3, -1],\n                [3, 1], [1, 1], [-1, 1], [-3, 1] \n            ],\n            edges: getLoopOfEdges(8).concat([[0, 6], [1, 5], [2, 6], [2, 4], [3, 5]])\n        }\n    }, {\n        colourPalette: [2],\n        graph: {\n            r: 8,\n            nodes: [\n                [-2.4, -1.8], [-3, -0], [-2.4, 1.8], [-1.8, 0],\n                [ 2.4, -1.8], [ 3, -0], [ 2.4, 1.8], [ 1.8, 0],\n                [0, -0.9], [-0.6, 0], [0, 0.9], [0.6, 0] \n            ],\n            edges: [\n                [0, 1], [1, 2], [2, 3], [3, 0], [1, 3],\n                [4, 5], [5, 6], [6, 7], [7, 4], [5, 7],\n                [8, 9], [9, 10], [10, 11], [11, 8], [8, 10],\n                [3, 9], [7, 11], [0, 4], [2, 6]\n            ]\n        }\n    }\n];\n\nconst GraphTheory = () => \n    <PuzzlePage\n        clearButton\n        puzzles={puzzles}\n        evaluate={({ nodes }) => graphIsDisjoint(nodes)}\n\t\tgetPuzzleObject={({ graph }) => getGraphObject(graph)}\n\t\tdisplayPuzzle={ColourableEdgeGraph}\n    />\n\nexport default GraphTheory;\n","/*\n * Find the smallest dominating set.\n * Colour the vertices of a graph such that each vertex is coloured or adjacent\n * to a vertex that is coloured. The number of vertices you can colour is limited.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../PuzzlePage';\nimport { getGraphObject } from '../puzzleLoaders';\nimport { DominatingSet } from '../PuzzleComponents/Graph';\n\nimport { allItemsColoured } from '../../utils/evaluation';\nimport {\n    getNodesOnCircle,\n    getLoopOfEdges,\n    connectNodeToNodes,\n    linearGraph,\n    loopGraph,\n    spokeGraph,\n} from '../../utils/graphUtils';\n\n\nconst puzzles = [\n    {\n        colourPalette: [1],\n        graph: linearGraph(3, { scale: 2, r: 10 })\n    }, {\n        colourPalette: [1],\n        graph: spokeGraph(5, { scale: 2, r: 10 })\n    }, {\n        colourPalette: [2],\n        graph: loopGraph(6, { scale: 2, r: 10 })\n    }, {\n        colourPalette: [2],\n        graph: {\n            nodes: getNodesOnCircle(6, { r: 2 }).concat([[0, 0, 0]]),\n            edges: getLoopOfEdges(6).concat(connectNodeToNodes(6, [0, 1, 3, 4])),\n            r: 10\n        }\n    }, {\n        colourPalette: [3],\n        graph: {\n            nodes: getNodesOnCircle(5, { r: 3 }).concat(getNodesOnCircle(5, { r: 1.5 })),\n            edges: getLoopOfEdges(5).concat([\n                [0, 5], [1, 6], [2, 7], [3, 8], [4, 9],\n                [5, 7], [6, 8], [7, 9], [5, 8], [6, 9]\n            ]),\n            r: 10\n        }\n    }, {\n        colourPalette: [4],\n        graph: {\n            nodes: getNodesOnCircle(6, { r: 1.5 })\n                .concat(getNodesOnCircle(3, { r: 3, offsetAngle: 30 }))\n                .concat([[0, 0, 0]]),\n            edges: getLoopOfEdges(6)\n                .concat([[0, 6], [2, 7], [4, 8]])\n                .concat(connectNodeToNodes(9, [1, 3, 5])),\n            r: 10\n        }\n    }, {\n        colourPalette: [4],\n        graph: {\n            nodes: getNodesOnCircle(8, { r: 3 }).concat(getNodesOnCircle(4, { r: 1.5 })).concat([[0, 0, 0]]),\n            edges: getLoopOfEdges(8)\n                .concat(getLoopOfEdges(8, 11))\n                .concat(connectNodeToNodes(12, [8, 9, 10, 11]))\n                .concat([\n                    [0, 8], [1, 9], [2, 9], [3, 10], [4, 10], [5, 11], [6, 11], [7, 8]\n                ]),\n            r: 10\n        }\n    }, {\n        colourPalette: [5],\n        graph: {\n            nodes: getNodesOnCircle(12, { r: 3 }).concat(getNodesOnCircle(4, { r: 1.5 })).concat([[0, 0, 0]]),\n            edges: getLoopOfEdges(12)\n                .concat(getLoopOfEdges(12, 15))\n                .concat(connectNodeToNodes(16, [12, 13, 14, 15]))\n                .concat([\n                    [0, 12], [2, 13], [3, 13], [5, 14], [6, 14], [8, 15], [9, 15], [11, 12]\n                ]),\n            r: 10\n        }\n    }\n];\n\nconst GraphTheory = () => \n    <PuzzlePage\n        colourPalette={1}\n        clearButton\n        puzzles={puzzles}\n        evaluate={({ nodes }) => allItemsColoured(nodes)}\n\t\tgetPuzzleObject={({ graph }) => getGraphObject(graph)}\n\t\tdisplayPuzzle={DominatingSet}\n    />\n\nexport default GraphTheory;\n","/*\n * Construct a Hamiltonian path along a graph.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../PuzzlePage';\nimport { getGraphObject } from '../puzzleLoaders';\nimport { ColourablePath } from '../PuzzleComponents/Graph';\n\nimport { allItemsColoured } from '../../utils/evaluation';\nimport {\n    getNodesOnCircle,\n    getLoopOfEdges,\n    getLineOfEdges,\n    loopGraph,\n} from '../../utils/graphUtils';\n\n\nconst R3 = Math.sqrt(3);\n\nconst puzzles = [\n    {\n        colourPalette: 1,\n        graph: loopGraph(6)\n    }, {\n        colourPalette: 1,\n        graph: {\n            nodes: getNodesOnCircle(6),\n            edges: getLoopOfEdges(6).concat([[1, 4]])\n        }\n    }, {\n        colourPalette: 1,\n        graph: {\n            nodes: getNodesOnCircle(6),\n            edges: getLineOfEdges(6)\n        }\n    }, {\n        colourPalette: 1,\n        graph: {\n            nodes: getNodesOnCircle(6),\n            edges: getLineOfEdges(6).concat([[2, 5]])\n        }\n    }, {\n        colourPalette: 1,\n        graph: {\n            nodes: getNodesOnCircle(6),\n            edges: [[2, 3], [3, 4], [4, 5], [5, 0], [1, 4], [0, 3]]\n        }\n    }, {\n        colourPalette: 1,\n        graph: {\n            nodes: getNodesOnCircle(3, { r: 0.75 })\n                    .concat(getNodesOnCircle(3, { r: 2 })),\n            edges: getLoopOfEdges(3)\n                    .concat(getLoopOfEdges(3, 5))\n                    .concat([[2, 5]])\n        }\n    }, {\n        colourPalette: 1,\n        graph: {\n            nodes: getNodesOnCircle(3, { r: 0.75 })\n                    .concat(getNodesOnCircle(3, { r: 2 }))\n                    .concat([[-R3, -2], [R3, -2]]),\n            edges: getLoopOfEdges(3)\n                    .concat(getLoopOfEdges(3, 5))\n                    .concat([[0, 3], [2, 5], [3, 6], [4, 7]])\n        }\n    }, {\n        colourPalette: 1,\n        graph: {\n            nodes: getNodesOnCircle(3, { r: 0.75 })\n                    .concat(getNodesOnCircle(3, { r: 2 }))\n                    .concat([[-R3, -2], [R3, -2]]),\n            edges: getLoopOfEdges(3)\n                    .concat(getLoopOfEdges(3, 5))\n                    .concat([[2, 5], [3, 6], [4, 7], [5, 6], [5, 7]])\n        }\n    }\n];\n\nconst GraphTheory = () =>\n    <PuzzlePage\n        colourPalette={1}\n        clearButton\n        puzzles={puzzles}\n        evaluate={({ nodes }) => allItemsColoured(nodes)}\n\t\tgetPuzzleObject={({ graph }) => getGraphObject(graph)}\n\t\tdisplayPuzzle={ColourablePath}\n    />\n\nexport default GraphTheory;\n","import React from 'react';\n\n\nconst ColourMapIcon1 = () =>\n    <g className=\"graph-nodes\">\n        <rect className=\"colour-1\" x=\"-28\" y=\"-28\" width=\"28\" height=\"28\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"0\" y=\"-28\" width=\"28\" height=\"28\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"-28\" y=\"0\" width=\"28\" height=\"28\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"0\" y=\"0\" width=\"28\" height=\"28\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-3\" x=\"-12\" y=\"-12\" width=\"24\" height=\"24\" rx=\"2\" ry=\"2\" />\n    </g>\n\nconst ColourMapIcon2 = () =>\n    <g className=\"graph-nodes\">\n        <rect className=\"colour-1\" x=\"-30\" y=\"-30\" width=\"30\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"0\" y=\"-30\" width=\"30\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"-30\" y=\"-10\" width=\"20\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-3\" x=\"-10\" y=\"-10\" width=\"20\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"10\" y=\"-10\" width=\"20\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"-30\" y=\"10\" width=\"30\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"0\" y=\"10\" width=\"30\" height=\"20\" rx=\"2\" ry=\"2\" />\n    </g>\n\nexport default [ColourMapIcon1, ColourMapIcon2];\n","import React from 'react';\nimport { isColourable } from './utils';\n\n\nexport const Map = ({ regions=[], chamber }) =>\n    <g className=\"graph\">\n        <g className=\"graph-nodes\">\n            { regions.map((item, i) =>\n                <rect\n                    key={i}\n                    x={item.x}\n                    y={item.y}\n                    width={item.width}\n                    height={item.height}\n                    rx=\"3\"\n                    ry=\"3\"\n                    {...isColourable(item, chamber)}\n                />\n            )}\n        </g>\n    </g>\n\nexport const ColourableMap = (puzzle, chamber) =>\n    <Map {...puzzle} chamber={chamber} />\n","/*\n * Colour regions on a map such that no two touching regions have the same colour.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from './PuzzlePage';\nimport { Map, ColourableMap } from './PuzzleComponents/Map';\nimport { getMapObject } from './puzzleLoaders';\nimport { allItemsColoured, allConnectedItemsHaveDifferentColours } from '../utils/evaluation';\n\n\nconst puzzles1 = [\n    {\n        colourPalette: 1,\n        regions: [[0, 0, 32, 32]]\n    }, {\n        colourPalette: 2,\n        regions: [[-16, 0, 32, 32], [16, 0, 32, 32]],\n        connections: [[0, 1]]\n    }, {\n        colourPalette: 2,\n        regions: [[-32, 0, 32, 32], [0, 0, 32, 32], [32, 0, 32, 32]],\n        connections: [[0, 1], [1, 2]]\n    }, {\n        colourPalette: 3,\n        regions: [[-16, 16, 32, 32], [16, 16, 32, 32], [0, -16, 64, 32]],\n        connections: [[0, 1], [1, 2], [0, 2]]\n    }, {\n        colourPalette: 2,\n        regions: [[-16, 16, 32, 32], [16, 16, 32, 32], [-16, -16, 32, 32], [16, -16, 32, 32]],\n        connections: [[0, 1], [2, 3], [0, 2], [1, 3]]\n    }, {\n        colourPalette: 3,\n        regions: [[-16, 16, 32, 32], [16, 16, 32, 32], [-16, -16, 32, 32], [16, -16, 32, 32], [0, 0, 28, 28]],\n        connections: [[0, 1], [2, 3], [0, 2], [1, 3], [0, 4], [1, 4], [2, 4], [3, 4]]\n    }, {\n        colourPalette: 3,\n        regions: [[0, 0, 72, 72], [-12, 12, 24, 24], [12, 12, 24, 24], [-12, -12, 24, 24], [12, -12, 24, 24], [0, 0, 24, 24]],\n        connections: [[1, 2], [3, 4], [1, 3], [2, 4], [0, 1], [0, 2], [0, 3], [0, 4], [5, 1], [5, 2], [5, 3], [5, 4]]\n    }, {\n        colourPalette: 4,\n        regions: [[-16, 16, 32, 32], [16, 16, 32, 32], [0, -16, 64, 32], [0, 0, 28, 28]],\n        connections: [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3]]\n    }\n];\n\nconst puzzles2 = [\n    {\n        colourPalette: 2,\n        regions: [[0, 0, 96, 96], [0, 0, 32, 32]],\n        connections: [[0, 1]]\n    }, {\n        colourPalette: 3,\n        regions: [[-24, 0, 48, 96], [24, 0, 48, 96], [0, 0, 32, 32]],\n        connections: [[0, 1], [1, 2], [0, 2]]\n    }, {\n        colourPalette: 4,\n        regions: [[0, -32, 96, 32], [-24, 16, 48, 64], [24, 16, 48, 64], [0, 0, 32, 32]],\n        connections: [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3]]\n    }, {\n        colourPalette: 3,\n        regions: [[-24, -24, 48, 48], [24, -24, 48, 48], [-24, 24, 48, 48], [24, 24, 48, 48], [0, 0, 32, 32]],\n        connections: [[0, 1], [2, 3], [0, 2], [1, 3], [0, 4], [1, 4], [2, 4], [3, 4]]\n    }, {\n        colourPalette: 3,\n        regions: [[-16, -32, 64, 32], [32, -16, 32, 64], [-32, 16, 32, 64], [16, 32, 64, 32], [0, 0, 32, 32]],\n        connections: [[0, 1], [2, 3], [0, 2], [1, 3], [0, 4], [1, 4], [2, 4], [3, 4]]\n    }, {\n        colourPalette: 2,\n        regions: [\n            [-32, -32, 32, 32], [0, -32, 32, 32], [32, -32, 32, 32],\n            [-32, 0, 32, 32], [0, 0, 32, 32], [32, 0, 32, 32],\n            [-32, 32, 32, 32], [0, 32, 32, 32], [32, 32, 32, 32]\n        ],\n        connections: [\n            [0, 1], [1, 2], [3, 4], [4, 5], [6, 7], [7, 8],\n            [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [5, 8]\n        ]\n    }\n];\n\nconst puzzles = [puzzles1, puzzles2];\n\nconst evaluate = ({ regions, connections }) => \n    allItemsColoured(regions) &&\n    allConnectedItemsHaveDifferentColours(connections);\n\nexport const ColourMap = (n) =>\n\t<PuzzlePage\n\t\tpuzzles={puzzles[n]}\n\t\tevaluate={evaluate}\n\t\tgetPuzzleObject={getMapObject}\n\t\tdisplayPuzzle={ColourableMap} />\n","import React from 'react';\n\n\nconst IdentityIcon1 = () => <React.Fragment>\n    <defs>\n        <g id=\"identity-1-puzzle\">\n            <g className=\"graph-edges\">\n                <line x1=\"-15\" y1=\"13\" x2=\"0\" y2=\"-13\" />\n                <line x1=\"-15\" y1=\"13\" x2=\"15\" y2=\"13\" />\n                <line x1=\"0\" y1=\"-13\" x2=\"15\" y2=\"13\" />\n            </g>\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-1\" cx=\"-15\" cy=\"13\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"0\" cy=\"-13\" r=\"6\" />\n                <circle className=\"colour-3\" cx=\"15\" cy=\"13\" r=\"6\" />\n            </g>\n        </g>\n    </defs>\n\n    <use href=\"#identity-1-puzzle\" transform=\"translate(-24, -4)\"/>\n    <use href=\"#identity-1-puzzle\" transform=\"translate(24, -4)\"/>\n    <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n</React.Fragment>\n\nconst ReflectionIcon1 = () => <React.Fragment>\n    <defs>\n        <g id=\"reflection-1-puzzle\">\n            <g className=\"graph-edges\">\n                <line x1=\"12\" y1=\"0\" x2=\"-11\" y2=\"-15\" />\n                <line x1=\"12\" y1=\"0\" x2=\"-11\" y2=\"15\" />\n                <line x1=\"-11\" y1=\"-15\" x2=\"-11\" y2=\"15\" />\n            </g>\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-2\" cx=\"12\" cy=\"0\" r=\"6\" />\n                <circle className=\"colour-1\" cx=\"-11\" cy=\"15\" r=\"6\" />\n                <circle className=\"colour-1\" cx=\"-11\" cy=\"-15\" r=\"6\" />\n            </g>\n        </g>\n    </defs>\n\n    <use href=\"#reflection-1-puzzle\" transform=\"translate(-20)\"/>\n    <use href=\"#reflection-1-puzzle\" transform=\"translate(20) scale(-1, 1)\"/>\n    <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n</React.Fragment>\n\nconst RotationIcon1 = () => <React.Fragment>\n    <defs>\n        <g id=\"rotation-1-puzzle\">\n            <g className=\"graph-edges\">\n                <line x1=\"-16\" y1=\"13\" x2=\"-2\" y2=\"-13\" />\n                <line x1=\"-16\" y1=\"13\" x2=\"12\" y2=\"13\" />\n                <line x1=\"-2\" y1=\"-13\" x2=\"12\" y2=\"13\" />\n            </g>\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-1\" cx=\"-16\" cy=\"13\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"-2\" cy=\"-13\" r=\"6\" />\n                <circle className=\"colour-1\" cx=\"12\" cy=\"13\" r=\"6\" />\n            </g>\n        </g>\n    </defs>\n\n    <use href=\"#rotation-1-puzzle\" transform=\"translate(-20)\"/>\n    <use href=\"#rotation-1-puzzle\" transform=\"translate(20) rotate(180)\"/>\n    <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n</React.Fragment>\n\nconst TransformColourIcon1 = () => <React.Fragment>\n    <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n\n    <g transform=\"translate(-20)\">\n        <g className=\"graph-edges\">\n            <line x1=\"0\" y1=\"20\" x2=\"0\" y2=\"-16\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"0\" cy=\"-20\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"0\" cy=\"0\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"0\" cy=\"20\" r=\"6\" />\n        </g>\n    </g>\n\n    <g transform=\"translate(20)\">\n        <g className=\"graph-edges\">\n            <line x1=\"0\" y1=\"20\" x2=\"0\" y2=\"-20\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-2\" cx=\"0\" cy=\"-20\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"0\" cy=\"0\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"0\" cy=\"20\" r=\"6\" />\n        </g>\n    </g>\n</React.Fragment>\n\nexport default [IdentityIcon1, ReflectionIcon1, RotationIcon1, TransformColourIcon1];\n","/*\n * Colour all nodes on a graph such that no edges joins two nodes of the same colour.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from './PuzzlePage';\nimport { Graph, ColourableGraph } from './PuzzleComponents/Graph';\nimport { getGraphAndUncolouredCopy } from './puzzleLoaders';\nimport { getNodesOnCircle, getLoopOfEdges, getLineOfEdges } from '../utils/graphUtils';\nimport { graphNodesAreSameColour, samePatternButDifferent } from '../utils/evaluation';\n\n\nconst identity1 = [\n\t{\n\t\tcolourPalette: 1,\n        nodes: [[0, 0, 1]]\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2]),\n        edges: getLineOfEdges(2)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: [[-1, 0, 1], [0, 0, 2], [1, 0, 1]],\n        edges: [[0, 1], [1, 2]]\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 4,\n        nodes: getNodesOnCircle([1, 2, 3, 4]),\n        edges: getLoopOfEdges(4)\n\t}, {\n        size: 24,\n        colourPalette: 3,\n        nodes: [[-1, -1, 1], [1, -1, 1], [-0.5, 0, 2], [0.5, 0, 3], [-1, 1, 3], [1, 1, 2]],\n        edges: [[0, 2], [2, 3], [3, 1], [2, 4], [3, 5]]\n    }, {\n        size: 24,\n        colourPalette: 4,\n        nodes: [[-1.5, -1, 1], [-0.5, -1, 2], [0.5, -1, 1], [-0.5, 0, 1], [0.5, 0, 3], [-0.5, 1, 3], [0.5, 1, 4], [1.5, 1, 3]],\n        edges: [[0, 1], [1, 2], [1, 3], [3, 4], [4, 6], [5, 6], [6, 7]]\n    }\n];\n\nconst reflection1 = [\n\t{\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 2], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 1]),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3]),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 1, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 2, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 4,\n        nodes: getNodesOnCircle([1, 2, 3, 4]),\n        edges: getLoopOfEdges(4)\n\t}\n];\n\nconst rotation1 = [\n\t{\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 2], { dy: 0.25 }),\n\t\tedges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2], { offsetAngle: 90 }),\n\t\tedges: getLoopOfEdges(2)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2]),\n\t\tedges: getLoopOfEdges(2)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 2, 2]),\n\t\tedges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 1, 2]),\n\t\tedges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 2], { dy: 0.25 }),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3], { dy: 0.25 }),\n\t\tedges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 4,\n        nodes: getNodesOnCircle([1, 2, 3, 4]),\n        edges: getLoopOfEdges(4)\n\t}\n];\n\nconst colour1 = [\n\t{\n\t\tcolourPalette: 1,\n        nodes: [[0, 0, 2]]\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2]),\n        edges: getLineOfEdges(2)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: [[-1, 0, 1], [0, 0, 2], [1, 0, 1]],\n        edges: getLineOfEdges(3)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3]),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3, 2]).concat([[0, 0, 3]]),\n        edges: getLoopOfEdges(4).concat([[0, 4], [1, 4] ,[2, 4], [3, 4]])\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3, 1, 2, 3]),\n        edges: getLoopOfEdges(6)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([2, 3, 1, 3, 2, 1]),\n        edges: getLoopOfEdges(6)\n\t}\n];\n\nconst Transformation = ({ puzzles, transform, evaluate }) => {\n\tconst displayGraphs = (puzzle, chamber) =>\n\t\t<g>\n\t\t\t<g transform=\"translate(-60)\">\n\t\t\t\t<Graph {...puzzle.target} />\n\t\t\t</g>\n\t\t\t<g transform={ \"translate(60) \" + transform }>\n\t\t\t\t{ ColourableGraph(puzzle.blank, chamber) }\n\t\t\t</g>\n\n\t\t\t<line className=\"reflection-line\" y1=\"-200\" y2=\"200\" />\n\t\t</g>\n\n\treturn <PuzzlePage\n\t\tpuzzles={puzzles}\n\t\tevaluate={evaluate}\n\t\tgetPuzzleObject={getGraphAndUncolouredCopy}\n\t\tdisplayPuzzle={displayGraphs} />\n};\n\nconst patternMatchGraphs = ({ blank, target }) => {\n\tconst seq1 = blank.nodes.map(node => node.colour);\n\tconst seq2 = target.nodes.map(node => node.colour);\n\treturn samePatternButDifferent(seq1, seq2);\n}\n\nconst puzzles = [\n\t<Transformation puzzles={identity1} transform=\"\" evaluate={graphNodesAreSameColour} />,\n\t<Transformation puzzles={reflection1} transform=\"scale(-1 1)\" evaluate={graphNodesAreSameColour}/>,\n\t<Transformation puzzles={rotation1} transform=\"rotate(180)\" evaluate={graphNodesAreSameColour} />,\n\t<Transformation puzzles={colour1} transform=\"\" evaluate={patternMatchGraphs} />,\n];\n\nexport const Transformations = (n) => puzzles[n];\n","import React from 'react';\n\n\nconst SequencesIcon1 = () => \n    <g className=\"graph-nodes\">\n        <rect className=\"colour-1\" x=\"-37.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"-22.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"-7.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"7.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"22.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n    </g>\n\nconst SequencesIcon2 = () => \n    <g className=\"graph-nodes\">\n        {[1, 2, 1, 0, 1, 2, 1].map((colour, index) =>\n            <rect\n                key={index}\n                className={\"colour-\" + colour}\n                x={-42 + index * 12}\n                y=\"-7.5\"\n                width=\"12\" height=\"12\" rx=\"2\" ry=\"2\" />\n        )}\n    </g>\n\nconst SequencesIcon3 = () => <React.Fragment>\n    <defs>\n        <g id=\"triangle\" className=\"graph-edges\">\n            <line x1=\"-15\" y1=\"13\" x2=\"0\" y2=\"-13\" />\n            <line x1=\"-15\" y1=\"13\" x2=\"15\" y2=\"13\" />\n            <line x1=\"0\" y1=\"-13\" x2=\"15\" y2=\"13\" />\n        </g>\n        <g id=\"triangle-1\">\n            <use href=\"#triangle\" />\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-1\" cx=\"-15\" cy=\"13\" r=\"7\" />\n                <circle className=\"colour-2\" cx=\"0\" cy=\"-13\" r=\"7\" />\n                <circle className=\"colour-1\" cx=\"15\" cy=\"13\" r=\"7\" />\n            </g>\n        </g>\n        <g id=\"triangle-2\">\n            <use href=\"#triangle\" />\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-2\" cx=\"-15\" cy=\"13\" r=\"7\" />\n                <circle className=\"colour-1\" cx=\"0\" cy=\"-13\" r=\"7\" />\n                <circle className=\"colour-2\" cx=\"15\" cy=\"13\" r=\"7\" />\n            </g>\n        </g>\n    </defs>\n\n    <use href=\"#triangle-1\" transform=\"translate(-34, -4) scale(0.45)\"/>\n    <use href=\"#triangle-2\" transform=\"translate(-11, -4) scale(0.45)\"/>\n    <use href=\"#triangle-1\" transform=\"translate(11, -4) scale(0.45)\"/>\n    <use href=\"#triangle-2\" transform=\"translate(34, -4) scale(0.45)\"/>\n</React.Fragment>\n\nexport default [\n    SequencesIcon1,\n    SequencesIcon2,\n    SequencesIcon3,\n];\n","import React from 'react';\nimport { Graph } from './Graph';\nimport { isColourable } from './utils';\n\n\nconst getSize = n =>  Math.min(24, 200 / n);\n\nconst Sequence = ({ sequence=[], y=0, chamber }) => {\n    const size = getSize(sequence.length);\n    const startX = -(sequence.length * size) / 2;\n\n    return <g className=\"sequence\">\n        { sequence.map((item, i) =>\n            <rect\n                key={i}\n                x={startX + i * size }\n                y={y - size / 2}\n                width={size - 1}\n                height={size - 1}\n                rx=\"3\"\n                ry=\"3\"\n                {...isColourable(item, chamber)}\n            />\n        )}\n    </g>\n};\n\nexport const ColourableSequence = (puzzle, chamber) => \n    <Sequence {...puzzle} chamber={chamber}/>\n\nexport const Sequence2D = (puzzle, chamber) => {\n    const graphs = puzzle.sequences;\n    const size = 1.25 * getSize(Math.max(graphs.length, graphs[0].nodes.length));\n    const startY = -((graphs.length - 1) * size) / 2;\n\n    return graphs.map((graph, index) =>\n        <g key={index} transform={`translate(0 ${startY + index * size})`}>\n            <Graph {...graph} chamber={chamber}/>\n        </g>\n    );\n}\n\nexport const GraphSequence = (puzzle, chamber) => {\n    const sequence = puzzle.sequence;\n\n    let size = Math.min(120, 240 / sequence.length);\n    const scale = Math.min(1, size / 90);\n    size /= scale;\n    const startX = -size * (sequence.length - 1) / 2;\n\n    const graphs = sequence.map((graph, i) =>\n        <g key={i} transform={`translate(${ startX + i * size })`}>\n            <Graph {...graph} chamber={chamber} />\n        </g>\n    );\n\n    return <g className=\"sequence\" transform={`scale(${ scale })`}>\n        { graphs }\n    </g>\n};\n","/*\n * Given a sequence of objects, continue it or fill in the missing bits.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from './PuzzlePage';\nimport { ColourableSequence, GraphSequence } from './PuzzleComponents/Sequence';\nimport { getSequenceObject, getGraphSequence } from './puzzleLoaders';\nimport { sequencesMatch } from '../utils/evaluation';\nimport { triangleGraph, squareGraph } from '../utils/graphUtils';\n\n\n// Sequence of coloured blocks with uncoloured blocks at the end\nconst puzzles1 = [\n    {\n        colourPalette: 1,\n        pattern: [1, 1, 1, 0],\n        answer: [1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 1, 1, 1, 0, 0],\n        answer: [1, 1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 1, 2, 1, 2, 0, 0],\n        answer: [1, 2]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 1, 2, 3, 0, 0, 0],\n        answer: [1, 2, 3]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 1, 2, 2, 1, 1, 0, 0],\n        answer: [2, 2]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 2, 1, 2, 2, 0, 0, 0],\n        answer: [1, 2, 2]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 3, 1, 2, 3, 3, 0, 0, 0, 0],\n        answer: [1, 2, 3, 3]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 0, 0],\n        answer: [1, 2, 1, 1]\n    }\n];\n\n// Sequence of coloured blocks with uncoloured blocks in the middle of the sequence\nconst puzzles2 = [\n    {\n        colourPalette: 1,\n        pattern: [1, 1, 0, 1, 1],\n        answer: [1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 1, 0, 1, 2, 1],\n        answer: [2]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 0, 2, 3],\n        answer: [1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 1, 2, 2, 1, 0, 0, 2],\n        answer: [1, 2]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 2, 1, 2, 0, 0, 2, 2],\n        answer: [2, 1]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1],\n        answer: [3]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 0, 0, 3, 1, 2, 3, 2, 1],\n        answer: [2, 1]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 1, 0, 0, 0, 1, 2, 3, 1, 1, 2, 3],\n        answer: [2, 3, 1]\n    }\n];\n\n// Sequence of coloured graphs with uncoloured one at the end\nconst t1 = triangleGraph(1);\nconst t2 = triangleGraph(2);\nconst t112 = triangleGraph([1, 1, 2]);\nconst t221 = triangleGraph([2, 2, 1]);\nconst t121 = triangleGraph([1, 2, 1]);\nconst t211 = triangleGraph([2, 1, 1]);\nconst t123 = triangleGraph([1, 2, 3]);\nconst t231 = triangleGraph([2, 3, 1]);\nconst t312 = triangleGraph([3, 1, 2]);\n\nconst s1122 = squareGraph([1, 1, 2, 2]);\nconst s2211 = squareGraph([2, 2, 1, 1]);\nconst s2112 = squareGraph([2, 1, 1, 2]);\nconst s1221 = squareGraph([1, 2, 2, 1]);\nconst s1212 = squareGraph([1, 2, 1, 2]);\nconst s2121 = squareGraph([2, 1, 2, 1]);\n\nconst puzzles3 = [\n    {\n        colourPalette: 1,\n        graphs: [t1, t1, t1, null],\n        answer: [t1]\n    }, {\n        colourPalette: 2,\n        graphs: [t1, t2, t1, t2, null],\n        answer: [t1]\n    }, {\n        colourPalette: 2,\n        graphs: [t112, t221, t112, t221, null],\n        answer: [t112]\n    }, {\n        colourPalette: 2,\n        graphs: [s1122, s2211, s1122, s2211, null],\n        answer: [s1122]\n    }, {\n        colourPalette: 2,\n        graphs: [s1212, s2121, s1212, s2121, s1212, null],\n        answer: [s2121]\n    }, {\n        colourPalette: 2,\n        graphs: [s1122, s1221, s2211, null],\n        answer: [s2112]\n    }, {\n        colourPalette: 2,\n        graphs: [t112, t121, t211, t112, t121, null],\n        answer: [t211]\n    }, {\n        colourPalette: 3,\n        graphs: [t123, t231, t312, t123, null],\n        answer: [t312]\n    }\n];\n\nconst puzzles = [puzzles1, puzzles2, puzzles3];\n\nconst correctSequence = ({ sequence, target }) =>\n    sequencesMatch(sequence, target, 'colour');\n\nconst correctGraphSequence = ({ sequence, target }) =>\n    sequence.every((graph, index) =>\n        sequencesMatch(graph.nodes, target[index].nodes, 'colour')\n    );\n\nexport const Sequences = (n) => {\n    if (n < 2) {\n        return <PuzzlePage\n            puzzles={puzzles[n]}\n            evaluate={correctSequence}\n            getPuzzleObject={getSequenceObject}\n            displayPuzzle={ColourableSequence} />\n    } else {\n        return <PuzzlePage\n            puzzles={puzzles[n]}\n            evaluate={correctGraphSequence}\n            getPuzzleObject={getGraphSequence}\n            displayPuzzle={GraphSequence} />\n    }\n}\n","import React from 'react';\n\n\nconst Categorisation1 = () => <g>\n    <g className=\"categories\">\n        <circle className=\"colour-1\" cx=\"-24\" cy=\"0\" r=\"23\" />\n        <circle className=\"colour-2\" cx=\"24\" cy=\"0\" r=\"23\" />\n    </g>\n    <g className=\"graph-edges\">\n        <line x1=\"30\" y1=\"0\" x2=\"18\" y2=\"0\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-24\" cy=\"0\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"32\" cy=\"0\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"16\" cy=\"0\" r=\"4\" />\n    </g>\n</g>\n\nconst Categorisation2 = () => <g>\n    <g className=\"categories\">\n        <circle className=\"colour-1\" cx=\"-24\" cy=\"0\" r=\"23\" />\n        <circle className=\"colour-2\" cx=\"24\" cy=\"0\" r=\"23\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-24\" cy=\"0\" r=\"8\" />\n        <circle className=\"colour-2\" cx=\"24\" cy=\"0\" r=\"8\" />\n    </g>\n</g>\n\nconst Categorisation3 = () => <g>\n    <g className=\"categories\">\n        <circle className=\"colour-1\" cx=\"-20\" cy=\"-20\" r=\"19\" />\n        <circle className=\"colour-2\" cx=\"20\" cy=\"-20\" r=\"19\" />\n        <circle className=\"colour-2\" cx=\"-20\" cy=\"20\" r=\"19\" />\n        <circle className=\"colour-3\" cx=\"20\" cy=\"20\" r=\"19\" />\n    </g>\n    <g className=\"graph-edges\">\n        <line x1=\"-25\" y1=\"-20\" x2=\"-15\" y2=\"-20\" />\n        <line x1=\"25\" y1=\"-20\" x2=\"15\" y2=\"-20\" />\n        <line x1=\"-25\" y1=\"20\" x2=\"-15\" y2=\"20\" />\n        <line x1=\"25\" y1=\"20\" x2=\"15\" y2=\"20\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-28\" cy=\"-20\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"-12\" cy=\"-20\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"28\" cy=\"-20\" r=\"4\" />\n        <circle className=\"colour-2\" cx=\"12\" cy=\"-20\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"-28\" cy=\"20\" r=\"4\" />\n        <circle className=\"colour-2\" cx=\"-12\" cy=\"20\" r=\"4\" />\n        <circle className=\"colour-2\" cx=\"28\" cy=\"20\" r=\"4\" />\n        <circle className=\"colour-2\" cx=\"12\" cy=\"20\" r=\"4\" />\n    </g>\n</g>\n\nconst Categorisation4 = () => <g>\n    <g transform=\"translate(0 -26)\">\n        <g className=\"categories\">\n            <circle className=\"colour-2\" r=\"22\" />\n        </g>\n        <g className=\"graph-edges\">\n            <line x1=\"0\" y1=\"-12\" x2=\"-11\" y2=\"6\" />\n            <line x1=\"0\" y1=\"-12\" x2=\"11\" y2=\"6\" />\n            <line x1=\"-11\" y1=\"6\" x2=\"11\" y2=\"6\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"0\" cy=\"-12\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"-11\" cy=\"6\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"11\" cy=\"6\" r=\"4\" />\n        </g>\n    </g>\n\n    <g transform=\"translate(-23 13)\">\n        <g className=\"categories\">\n            <circle className=\"colour-1\" r=\"22\" />\n        </g>\n        <g className=\"graph-edges\">\n            <line x1=\"-15\" x2=\"15\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"-15\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"0\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"15\" r=\"4\" />\n        </g>\n    </g>\n\n    <g transform=\"translate(23 13)\">\n        <g className=\"categories\">\n            <circle className=\"colour-1\" r=\"22\" />\n        </g>\n        <g className=\"graph-edges\">\n            <line x1=\"0\" y1=\"-12\" x2=\"-11\" y2=\"6\" />\n            <line x1=\"0\" y1=\"-12\" x2=\"11\" y2=\"6\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"0\" cy=\"-12\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"-11\" cy=\"6\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"11\" cy=\"6\" r=\"4\" />\n        </g>\n    </g>\n</g>\n\nexport default [Categorisation1, Categorisation2, Categorisation3, Categorisation4];\n","import React from 'react';\nimport { getPointsOnACircle } from '../../utils/graphUtils';\nimport { isColourable } from './utils';\n\n\nconst getCirclePackedInCircle = (R, n) => {\n    const phi = Math.PI * (0.5 - 1 / n);\n    const cPhi = Math.cos(phi);\n    const r = R / (1 + cPhi);\n    const points = getPointsOnACircle(n, { r });\n\n    return {\n        scale: cPhi / (1 + cPhi),\n        categorySize: r * cPhi,\n        categoryPositions: points\n    };\n};\n\nexport const Categories = ({ size, categories, chamber }) => {\n    const { scale, categorySize, categoryPositions } = getCirclePackedInCircle(size, categories.length);\n\n    return <g>\n        { categories.map((category, i) => {\n            let transform = `translate(${ categoryPositions[i][0] } ${ categoryPositions[i][1] })`;\n            if (category.rotate) {\n                transform += ` rotate(${ category.rotate })`;\n            }\n\n            return <g key={i} transform={transform}>\n                <circle\n                    {...isColourable(category, chamber, { className: 'category' })}\n                    r={categorySize * 0.95}\n                    />\n                <g className=\"no-pointer\" transform={`scale(${ scale * 2 } ${ scale * 2 })`}>\n                    { category.component }\n                </g>\n            </g>\n        })}\n    </g>\n}\n","import React from 'react';\n\nimport PuzzlePage from './PuzzlePage';\nimport { Graph } from './PuzzleComponents/Graph';\nimport { Categories } from './PuzzleComponents/Categories';\nimport { getCategoryObjects, getGraphObject } from './puzzleLoaders';\nimport {\n    linearGraph,\n    loopGraph,\n    starGraph,\n    spokeGraph,\n    sunletGraph,\n    prismGraph,\n    antiPrismGraph,\n    gearGraph,\n    getPointsOnACircle,\n    getNodesOnCircle,\n    getLineOfEdges,\n    getLoopOfEdges,\n    subdivideGraph\n} from '../utils/graphUtils';\nimport { sequencesAreEquivalent } from '../utils/evaluation';\n\n\n// Graphs are all the same colour and need to be match by shape\nconst puzzle1 = [\n    {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: { nodes: [[0, 0, 1]] }},\n            { type: 2, item: linearGraph([1, 1]) },\n        ]\n    }, {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, copies: 3, item: linearGraph(3, { colour: 1 }) },\n            { type: 2, copies: 2, item: loopGraph(3, { scale: 0.8, colour: 1 }) }\n        ]\n    }, {\n        colourPalette: 3,\n        randomRotate: true,\n        categories: [\n            { type: 1, copies: 2, item: linearGraph(3, { colour: 1 }) },\n            { type: 2, copies: 2, item: loopGraph(3, { scale: 0.8, colour: 1 }) },\n            { type: 3, copies: 2, item: {\n                nodes: [[0.5, 0.5], [-0.5, 0.5], [0.5, -0.5]],\n                edges: [[0, 1], [0, 2]],\n                colour: 1\n            }}\n        ]\n    }, {\n        colourPalette: 3,\n        randomRotate: true,\n        categories: [\n            { type: 1, copies: 2, item: loopGraph(4, { scale: 0.8, colour: 1 }) },\n            {\n                type: 2,\n                copies: 3,\n                item: {\n                    nodes: getPointsOnACircle(4, { r: 0.8 }),\n                    edges: getLineOfEdges(4),\n                    colour: 1\n                }\n            }, {\n                type: 3,\n                item: {\n                    nodes: getPointsOnACircle(4, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [0, 3]],\n                    colour: 1\n                }\n            },\n        ]\n    }, {\n        colourPalette: 3,\n        randomRotate: true,\n        categories: [\n            {\n                type: 1,\n                copies: 2,\n                item: {\n                    nodes: getPointsOnACircle(4, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [0, 3]],\n                    colour: 1\n                }\n            }, {\n                type: 2,\n                copies: 2,\n                item: {\n                    nodes: getPointsOnACircle(4, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [2, 3]],\n                    colour: 1\n                }\n            }, {\n                type: 3,\n                copies: 2,\n                item: {\n                    nodes: getPointsOnACircle(4, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [0, 3], [2, 3]],\n                    colour: 1\n                }\n            },\n        ]\n    }, {\n        colourPalette: 4,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph(5, { scale: 0.8, colour: 1 }) },\n            {\n                type: 2,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(5, { r: 0.8 }),\n                    edges: getLineOfEdges(5),\n                    colour: 1\n                }\n            }, {\n                type: 3 ,\n                copies: 2,\n                item: {\n                    nodes: getPointsOnACircle(5, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [0, 3], [0, 4]],\n                    colour: 1\n                }\n            }, {\n                type: 4,\n                item: {\n                    nodes: getPointsOnACircle(5, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [0, 3], [3, 4]],\n                    colour: 1\n                }\n            }\n        ]\n    }, {\n        colourPalette: 3,\n        randomRotate: true,\n        categories: [\n            {\n                type: 1,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(6, { r: 0.9 }),\n                    edges: ([[0, 1], [1, 2], [2, 5], [4, 5], [3, 4]]),\n                    colour: 1\n                }\n            }, {\n                type: 2,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(6, { r: 0.9 }),\n                    edges: ([[0, 1], [1, 2], [2, 4], [4, 5], [3, 4]]),\n                    colour: 1\n                }\n            }, {\n                type: 3,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(6, { r: 0.9 }),\n                    edges: ([[0, 1], [1, 2], [1, 4], [4, 5], [3, 4]]),\n                    colour: 1\n                }\n            }\n        ]\n    }, {\n        colourPalette: 4,\n        randomRotate: true,\n        categories: [\n            {\n                type: 1,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(6),\n                    edges: getLoopOfEdges(6).concat([[0, 3], [0, 4], [1, 5]]),\n                    colour: 1\n                }\n            }, {\n                type: 2,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(6),\n                    edges: getLoopOfEdges(6).concat([[0, 3], [0, 4], [1, 4]]),\n                    colour: 1\n                }\n            }, {\n                type: 3,\n                copies: 1, \n                item: {\n                    nodes: getPointsOnACircle(6),\n                    edges: getLoopOfEdges(6).concat([[0, 3], [0, 4], [2, 4]]),\n                    colour: 1\n                }\n            }, {\n                type: 4,\n                copies: 1, \n                item: {\n                    nodes: getPointsOnACircle(6),\n                    edges: getLoopOfEdges(6).concat([[0, 2], [0, 4], [1, 5]]),\n                    colour: 1\n                }\n            }\n        ]\n    }\n]\n\n// Graphs are all the same shape and orientation and need to be matched by colour\nconst puzzle2 = [\n\t{\n        colourPalette: 2,\n        categories: [\n            { type: 1, item: { nodes: [[0, 0, 1]] }},\n            { type: 2, item: { nodes: [[0, 0, 2]] }},\n        ]\n    }, {\n\t\tcolourPalette: 2,\n        categories: [\n            { type: 1, item: linearGraph([1, 1]) },\n            { type: 1, item: linearGraph([1, 1]) },\n            { type: 2, item: linearGraph([2, 2]) },\n            { type: 2, item: linearGraph([2, 2]) },\n        ]\n    }, {\n\t\tcolourPalette: 3,\n        categories: [\n            { type: 1, item: linearGraph([1, 1]) },\n            { type: 2, item: linearGraph([1, 2]) },\n            { type: 2, item: linearGraph([1, 2]) },\n            { type: 3, item: linearGraph([2, 2]) },\n        ]\n    }, {\n        colourPalette: 2,\n        categories: [\n            { type: 1, item: linearGraph([1, 2, 1]) },\n            { type: 1, item: linearGraph([1, 2, 1]) },\n            { type: 2, item: linearGraph([2, 1, 2]) },\n            { type: 2, item: linearGraph([2, 1, 2]) },\n        ]\n    }, {\n        colourPalette: 3,\n        categories: [\n            { type: 1, item: linearGraph([1, 1, 2]) },\n            { type: 1, item: linearGraph([1, 1, 2]) },\n            { type: 2, item: linearGraph([1, 2, 1]) },\n            { type: 3, item: linearGraph([2, 1, 1]) },\n            { type: 3, item: linearGraph([2, 1, 1]) },\n        ]\n    }, {\n        colourPalette: 3,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 2], { scale: 0.75 }) },\n            { type: 1, item: loopGraph([1, 1, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 2, 1], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 2, 1], { scale: 0.75 }) },\n            { type: 3, item: loopGraph([2, 1, 1], { scale: 0.75 }) },\n            { type: 3, item: loopGraph([2, 1, 1], { scale: 0.75 }) },\n        ]\n    }, {\n        colourPalette: 3,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 2, 2], { scale: 0.75 }) },\n            { type: 1, item: loopGraph([1, 1, 2, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 2, 1, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 2, 1, 2], { scale: 0.75 }) },\n            { type: 3, item: loopGraph([2, 1, 2, 1], { scale: 0.75 }) },\n            { type: 3, item: loopGraph([2, 1, 2, 1], { scale: 0.75 }) },\n        ]\n    }, {\n        colourPalette: 4,\n        categories: [\n            { type: 1, item: loopGraph([1, 2, 3, 1, 2, 3], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([3, 2, 1, 3, 2, 1], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([3, 2, 1, 3, 2, 1], { scale: 0.75 }) },\n            { type: 3, item: loopGraph([1, 2, 3, 2, 3, 1], { scale: 0.75 }) },\n            { type: 3, item: loopGraph([1, 2, 3, 2, 3, 1], { scale: 0.75 }) },\n            { type: 4, item: loopGraph([3, 2, 1, 2, 3, 1], { scale: 0.75 }) },\n        ]\n    }\n];\n\n// Graphs are all the same shape but rotated and need to be matched by colour\nconst puzzle3 = [\n    {\n        colourPalette: 3,\n        categories: [\n            { type: 1, item: linearGraph([1, 1]) },\n            { type: 2, item: linearGraph([1, 2]) },\n            { type: 2, item: linearGraph([2, 1]) },\n            { type: 3, item: linearGraph([2, 2]) },\n        ]\n    }, {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: linearGraph([1, 2, 1]) },\n            { type: 1, item: linearGraph([1, 2, 1]) },\n            { type: 1, item: linearGraph([1, 2, 1]) },\n            { type: 2, item: linearGraph([2, 1, 2]) },\n            { type: 2, item: linearGraph([2, 1, 2]) },\n            { type: 2, item: linearGraph([2, 1, 2]) },\n        ]\n    }, {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 2, 2], { scale: 0.75 }) },\n            { type: 1, item: loopGraph([1, 2, 2], { scale: 0.75 }) },\n            { type: 1, item: loopGraph([1, 2, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 1, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 1, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 1, 2], { scale: 0.75 }) },\n        ]\n    }, {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 2, 2], { scale: 0.75 }) },\n            { type: 1, item: loopGraph([1, 1, 2, 2], { scale: 0.75 }) },\n            { type: 1, item: loopGraph([1, 1, 2, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 2, 1, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 2, 1, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 2, 1, 2], { scale: 0.75 }) },\n        ]\n    }, {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 2, 3], { scale: 0.75 }) },\n            { type: 1, item: loopGraph([1, 2, 3], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 3, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 3, 2], { scale: 0.75 }) },\n        ]\n    }, {\n        colourPalette: 3,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 2, 3], { scale: 0.75 }) },\n            { type: 1, item: loopGraph([1, 1, 2, 3], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 1, 3, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 1, 3, 2], { scale: 0.75 }) },\n            { type: 3, item: loopGraph([1, 2, 1, 3], { scale: 0.75 }) },\n            { type: 3, item: loopGraph([1, 2, 1, 3], { scale: 0.75 }) },\n        ]\n    }, {\n        colourPalette: 4,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 2, 3, 4], { scale: 0.75 }) },\n            { type: 1, item: loopGraph([1, 2, 3, 4], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 4, 3, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 4, 3, 2], { scale: 0.75 }) },\n            { type: 3, item: loopGraph([1, 3, 2, 4], { scale: 0.75 }) },\n            { type: 4, item: loopGraph([1, 2, 4, 3], { scale: 0.75 }) },\n        ]\n    }, {\n        colourPalette: 4,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 2, 3, 1, 2, 3], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 3, 2, 1, 3, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 3, 2, 1, 3, 2], { scale: 0.75 }) },\n            { type: 3, item: loopGraph([1, 2, 3, 2, 3, 1], { scale: 0.75 }) },\n            { type: 4, item: loopGraph([1, 2, 1, 3, 2, 3], { scale: 0.75 }) },\n            { type: 4, item: loopGraph([1, 2, 1, 3, 2, 3], { scale: 0.75 }) },\n        ]\n    }\n];\n\nconst triangleWithCenter = getNodesOnCircle([1, 1, 1], { r: 1.2 }).concat([[0, 0, 1]]);\nconst lowTriangle = [[0, -1, 1], [-1, 0.5, 1], [0, 0.5, 1], [1, 0.5, 1]];\nconst rectangle = [[-0.5, -1.25, 1], [-0.5, 1.25, 1], [0.5, 1.25, 1], [0.5, -1.25, 1]]\n\n// Graphs have the same set of connections, but nodes are moved\nconst puzzle4 = [\n    {\n        // Triangles vs straight lines big and smaller\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: linearGraph(3, { scale: 0.8, colour: 1 }) },\n            { type: 1, item: linearGraph(3, { scale: 1.5, colour: 1 }) },\n            { type: 2, item: loopGraph(3, { scale: 0.7 }) },\n            { type: 2, item: loopGraph(3, { scale: 1.4 }) },\n        ]\n    }, {\n        // Triangles vs straight lines\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: linearGraph([1, 1, 1]) },\n            { type: 2, item: loopGraph([1, 1, 1]) },\n            { type: 1,\n                item: {\n                    nodes: [[0.7, 0.7, 1], [-0.7, 0.7, 1], [-0.7, -0.7, 1]],\n                    edges: getLineOfEdges(3)\n                }\n            },\n            { type: 2,\n                item: {\n                    nodes: [[0.7, 0.7, 1], [-0.7, 0.7, 1], [-0.7, -0.7, 1]],\n                    edges: getLoopOfEdges(3)\n                }\n            }\n        ]\n    }, {\n        // Three node- vs four node-triangles\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 1]) },\n            { type: 1,\n                item: {\n                    nodes: [[0, -0.5], [1.25, 0.5], [-1.25, 0.5]],\n                    edges: getLoopOfEdges(3),\n                    colour: 1\n                }\n            },\n            { type: 2,\n                item: {\n                    nodes: [[0, -0.5], [1.25, 0.5], [0, 0.5], [-1.25, 0.5]],\n                    edges: getLoopOfEdges(4),\n                    colour: 1\n                }\n            },\n            { type: 2,\n                item: {\n                    nodes: getPointsOnACircle(3).concat([[0, 0.5]]),\n                    edges: [[0, 3], [3, 1], [1, 2], [2, 0]],\n                    colour: 1\n                }\n            }\n        ]\n    }, {\n        // Quadrilaterals vs stars\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 1, 1]) },\n            { type: 1,\n                item: {\n                    nodes: lowTriangle,\n                    edges: getLoopOfEdges(4)\n                }\n            }, {\n                type: 2,\n                item: {\n                    nodes: lowTriangle,\n                    edges: [[0, 2], [1, 2], [2, 3]]\n                }\n            }, { type: 2, item: starGraph([1, 1, 1, 1]) }\n        ]\n    }, {\n        // Quadrilaterals vs straight lines\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: linearGraph([1, 1, 1, 1]) },\n            { type: 2, item: loopGraph([1, 1, 1, 1]) },\n            {\n                type: 1,\n                item: {\n                    nodes: getNodesOnCircle([1, 1, 1, 1]),\n                    edges: getLineOfEdges(4)\n                }\n            }, {\n                type: 1,\n                item: {\n                    nodes: [[-0.5, -1], [-0.5, 0], [0.5, 0], [0.5, 1]],\n                    edges: getLineOfEdges(4),\n                    colour: 1\n                }\n            }, {\n                type: 2,\n                item: {\n                    nodes: triangleWithCenter,\n                    edges: getLoopOfEdges(4)\n                }\n            }\n        ]\n    }, {\n        // Quadrilaterals vs straight lines with a rectangle\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            {\n                type: 1,\n                item: {\n                    nodes: rectangle,\n                    edges: getLineOfEdges(4)\n                }\n            }, {\n                type: 1,\n                item: {\n                    nodes: rectangle,\n                    edges: [[0, 3], [0, 2], [2, 1]]\n                }\n            }, {\n                type: 1,\n                item: {\n                    nodes: rectangle,\n                    edges: [[1, 2], [2, 3], [3, 0]]\n                }\n            }, {\n                type: 2,\n                item: {\n                    nodes: rectangle,\n                    edges: getLoopOfEdges(4),\n                }\n            }, {\n                type: 2,\n                item: {\n                    nodes: rectangle,\n                    edges: [[0, 2], [2, 1], [1, 3], [3, 0]],\n                }\n            }\n        ]\n    }, {\n        // Stars vs triangles with hanging point\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            {\n                type: 1,\n                item: {\n                    nodes: triangleWithCenter,\n                    edges: [[0, 1], [1, 2], [0, 3], [0, 2]]\n                }\n            }, {\n                type: 2,\n                item: {\n                    nodes: triangleWithCenter,\n                    edges: [[0, 3], [1, 3], [2, 3]]\n                }\n            }, {\n                type: 2,\n                item: {\n                    nodes: lowTriangle,\n                    edges: [[0, 1], [0, 2], [0, 3]]\n                }\n            }, {\n                type: 1,\n                item: {\n                    nodes: lowTriangle,\n                    edges: [[0, 1], [0, 2], [0, 3], [1, 2]]\n                }\n            }, {\n                type: 1,\n                item: {\n                    nodes: lowTriangle,\n                    edges: [[0, 1], [0, 2], [1, 2], [2, 3]]\n                }\n            }\n        ]\n    }, {\n        // Quadrilateral with one diagonal vs two\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            {\n                type: 1,\n                item: {\n                    nodes: getNodesOnCircle(4),\n                    edges: getLoopOfEdges(4).concat([[0, 2], [1, 3]]),\n                    colour: 1\n                }\n            },\n            {\n                type: 1,\n                item: {\n                    nodes: triangleWithCenter,\n                    edges: [[0, 1], [1, 2], [2, 0], [3, 0], [3, 1], [3, 2]]\n                }\n            },\n            {\n                type: 2,\n                item: {\n                    nodes: getNodesOnCircle(4),\n                    edges: getLoopOfEdges(4).concat([[0, 2]]),\n                    colour: 1\n                }\n            },\n            {\n                type: 2,\n                item: {\n                    nodes: triangleWithCenter,\n                    edges: getLoopOfEdges(4).concat([[0, 2]]),\n                    colour: 1\n                }\n            },\n            {\n                type: 2,\n                item: {\n                    nodes: getPointsOnACircle(3).concat([[0, 0.5]]),\n                    edges: [[0, 3], [3, 1], [1, 2], [2, 0], [3, 2]],\n                    colour: 1\n                }\n            }\n        ]\n    }\n];\n\n// Categorising graphs of the same type, e.g. cyclic vs star\nconst puzzle5 = [\n    {\n        // Linear vs cyclic\n        colourPalette: 2,\n        randomRotate: true,\n        itemProps: { colour: 1 },\n        categories: [\n            { type: 1, item: linearGraph(3) },\n            { type: 1, item: linearGraph(4) },\n            { type: 2, item: loopGraph(3) },\n            { type: 2, item: loopGraph(4) },\n            { type: 2, item: loopGraph(5) },\n        ]\n    }, {\n        // Cyclc vs star\n        colourPalette: 2,\n        randomRotate: true,\n        itemProps: { colour: 1, size: 36, r: 7 },\n        categories: [\n            { type: 1, item: starGraph(4) },\n            { type: 1, item: starGraph(5) },\n            { type: 1, item: starGraph(6) },\n            { type: 2, item: loopGraph(3) },\n            { type: 2, item: loopGraph(4) },\n            { type: 2, item: loopGraph(5) },\n        ]\n    }, {\n        // Spoked wheel vs star\n        colourPalette: 2,\n        randomRotate: true,\n        itemProps: { colour: 1, size: 36, r: 7 },\n        categories: [\n            { type: 1, item: starGraph(4) },\n            { type: 1, item: starGraph(5) },\n            { type: 1, item: starGraph(6) },\n            { type: 2, item: spokeGraph(4) },\n            { type: 2, item: spokeGraph(5) },\n            { type: 2, item: spokeGraph(6) },\n        ]\n    }, {\n        // Spoked wheel vs sunlet - remove\n        colourPalette: 2,\n        randomRotate: true,\n        itemProps: { colour: 1, size: 40, r: 5 },\n        categories: [\n            { type: 1, item: spokeGraph(4) },\n            { type: 1, item: spokeGraph(5) },\n            { type: 1, item: spokeGraph(6) },\n            { type: 2, item: sunletGraph(3) },\n            { type: 2, item: sunletGraph(4) },\n            { type: 2, item: sunletGraph(5) },\n        ]\n    }, {\n        // Spokes, sunlet and prism graphs\n        colourPalette: 3,\n        randomRotate: true,\n        itemProps: { colour: 1, size: 45, r: 5.2 },\n        categories: [\n            { type: 1, item: spokeGraph(5) },\n            { type: 1, item: spokeGraph(6) },\n            { type: 2, item: sunletGraph(4) },\n            { type: 2, item: sunletGraph(5) },\n            { type: 3, item: prismGraph(3) },\n            { type: 3, item: prismGraph(4) },\n        ]\n    }, {\n        // Prism vs. anti-prism graphs\n        colourPalette: 2,\n        randomRotate: true,\n        itemProps: { colour: 1, size: 45, r: 5.2 },\n        categories: [\n            { type: 1, item: prismGraph(3) },\n            { type: 1, item: prismGraph(4) },\n            { type: 1, item: prismGraph(5) },\n            { type: 2, item: antiPrismGraph(4) },\n            { type: 2, item: antiPrismGraph(5) },\n            { type: 2, item: antiPrismGraph(6) },\n        ]\n    }, {\n        // Gear graphs vs spoke graphs vs loop graphs\n        colourPalette: 3,\n        randomRotate: true,\n        itemProps: { colour: 1, size: 45, r: 5.2 },\n        categories: [\n            { type: 1, item: subdivideGraph(loopGraph(3)) },\n            { type: 1, item: loopGraph(4) },\n            { type: 2, item: gearGraph(3) },\n            { type: 2, item: gearGraph(4) },\n            { type: 3, item: spokeGraph(4) },\n            { type: 3, item: spokeGraph(5) },\n        ]\n    }\n];\n\n// Sun graphs, complete graphs\n// Crossed prism vs Franklin graph\n// Pan graph, barbell graph, web graph\n\nconst puzzles = [puzzle1, puzzle2, puzzle3, puzzle4, puzzle5];\n\nconst displayCategories = (categories, chamber) => {\n    categories.forEach(item => {\n        item.component = <Graph {...getGraphObject(item.object)} />\n    });\n\n    return <Categories size=\"128\" categories={categories} chamber={chamber} />\n};\n\nconst evaluate = puzzle =>\n    sequencesAreEquivalent(puzzle.map(item => item.category), puzzle.map(item => item.colour));\n\nexport const Categorisation = (n) =>\n    <PuzzlePage\n        puzzles={puzzles[n]}\n        evaluate={evaluate}\n        getPuzzleObject={getCategoryObjects}\n        displayPuzzle={displayCategories} />\n","import React from 'react';\n\n\nconst Combinatorics1 = () => <g>\n    <g className=\"graph-edges\">\n        <line x1=\"-20\" y1=\"-20\" x2=\"20\" y2=\"-20\" />\n        <line x1=\"-20\" y1=\"0\" x2=\"20\" y2=\"0\" />\n        <line x1=\"-20\" y1=\"20\" x2=\"20\" y2=\"20\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-20\" cy=\"-20\" r=\"6\" />\n        <circle className=\"colour-2\" cx=\"0\" cy=\"-20\" r=\"6\" />\n        <circle className=\"colour-2\" cx=\"20\" cy=\"-20\" r=\"6\" />\n\n        <circle className=\"colour-2\" cx=\"-20\" cy=\"0\" r=\"6\" />\n        <circle className=\"colour-1\" cx=\"0\" cy=\"0\" r=\"6\" />\n        <circle className=\"colour-2\" cx=\"20\" cy=\"0\" r=\"6\" />\n\n        <circle className=\"colour-2\" cx=\"-20\" cy=\"20\" r=\"6\" />\n        <circle className=\"colour-2\" cx=\"0\" cy=\"20\" r=\"6\" />\n        <circle className=\"colour-1\" cx=\"20\" cy=\"20\" r=\"6\" />\n    </g>\n</g>\n\nexport default [Combinatorics1]","/*\n * Colour regions on a map such that no two touching regions have the same colour.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from './PuzzlePage';\nimport { Sequence2D } from './PuzzleComponents/Sequence';\nimport { getPermutationObject } from './puzzleLoaders';\nimport { allItemsColoured, extractAttribute } from '../utils/evaluation';\n\n\n// Given a set of rows of linear graphs\n// Colour them so you have all permutations of colours, e.g. one red node and one blue node\nconst puzzles1 = [\n    {\n        colourPalette: 2,\n        pattern: [[1, 2], [2, 0]],\n    }, {\n        colourPalette: 2,\n        pattern: [[1, 2, 2], [2, 1, 2], [2, 2, 0]],\n    }, {\n        colourPalette: 2,\n        pattern: [[2, 2, 1], [1, 2, 2], [0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        pattern: [[2, 1, 2], [0, 0, 0], [0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        pattern: [[1, 2, 2, 2], [2, 1, 2, 2], [0, 0, 0, 0], [0, 0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        pattern: [[1, 1, 2, 2], [1, 2, 1, 2], [1, 2, 2, 1], [2, 1, 1, 2], [2, 1, 2, 1], [2, 0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        pattern: [[1, 1, 2, 2], [1, 0, 0, 0], [1, 0, 0, 0], [2, 0, 0, 0], [2, 0, 0, 0], [2, 0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        pattern: [[1, 1, 2, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],\n    }\n];\n\n// Permutations using linear graphs\nconst puzzles2 = [\n    {\n        colourPalette: 2,\n        loop: true,\n        pattern: [[1, 1, 2, 2], [2, 1, 2, 0]],\n    }\n];\n\nconst puzzles = [puzzles1, puzzles2];\n\n// Check the the given set of sequences matches a set of sequences.\nconst sequencesMatch = ({ sequences, target }) => {\n    // Check all the sequences are fully coloured\n    if (!sequences.every(graph => allItemsColoured(graph.nodes))) {\n        return false;\n    }\n    // Get a set of sequence values\n    const sequenceSet = new Set(sequences.map(sequence => extractAttribute(sequence.nodes, 'colour').join('-')))\n    \n    // Check the this set of sequences matches the set of permutations\n    return (sequenceSet.size === target.size) &&\n        [...sequenceSet].every(value => target.has(value));\n}\n\nexport const PermutationPuzzles = (n) =>\n     <PuzzlePage\n        puzzles={puzzles[n]}\n        evaluate={sequencesMatch}\n        getPuzzleObject={getPermutationObject}\n        displayPuzzle={Sequence2D} />\n","// Create an array of object, where every item is a puzzle\n// Puzzle objects have a component, an icon, a position on the map and a URL slug\n\nimport ColourGraphIcons from './PuzzleMap/Icons/ColourGraphs';\nimport { ColourGraph } from './Puzzles/ColourGraphs';\n\nimport GraphTheoryIcons from './PuzzleMap/Icons/GraphTheory';\nimport MinimumCut from './Puzzles/GraphTheory/MinimumCut';\nimport DominatingSet from './Puzzles/GraphTheory/DominatingSet';\nimport HamiltonianPath from './Puzzles/GraphTheory/HamiltonianPath';\n\nimport ColourMapIcons from './PuzzleMap/Icons/ColourMaps';\nimport { ColourMap } from './Puzzles/ColourMaps';\n\nimport TransformationIcons from './PuzzleMap/Icons/Transformations';\nimport { Transformations } from './Puzzles/Transformations';\n\nimport SequencesIcons from './PuzzleMap/Icons/Sequences';\nimport { Sequences } from './Puzzles/Sequences';\n\nimport CategorisationIcons from './PuzzleMap/Icons/Categorisation';\nimport { Categorisation } from './Puzzles/Categorisation';\n\nimport PermutationIcons from './PuzzleMap/Icons/Combinatorics';\nimport { PermutationPuzzles } from './Puzzles/Combinatorics';\n\n\n// Mapping puzzle names to URLS, icons and components\nexport const puzzleData = {\n    'categorisation-0': {\n        slug: 'categorisation-0',\n        icon: CategorisationIcons[0](),\n        component: () => Categorisation(0),\n    },\n    'categorisation-1': {\n        slug: 'categorisation-1',\n        icon: CategorisationIcons[1](),\n        component: () => Categorisation(1),\n    },\n    'categorisation-2': {\n        slug: 'categorisation-2',\n        icon: CategorisationIcons[2](),\n        component: () => Categorisation(2),\n    },\n    'categorisation-3': {\n        slug: 'categorisation-3',\n        icon: CategorisationIcons[3](),\n        component: () => Categorisation(3),\n    },\n    'categorisation-4': {\n        slug: 'categorisation-4',\n        icon: CategorisationIcons[3](),\n        component: () => Categorisation(4),\n    },\n    'graph-theory-0': {\n        slug: 'hamiltonian-path',\n        icon: GraphTheoryIcons[0](),\n        component: HamiltonianPath, \n    },\n    'graph-theory-1': {\n        slug: 'minimun-dominating-set',\n        icon: GraphTheoryIcons[1](),\n        component: DominatingSet, \n    },\n    'graph-theory-2': {\n        slug: 'minimum-cut',\n        icon: GraphTheoryIcons[2](),\n        component: MinimumCut, \n    },\n    'permutations-0': {\n        slug: 'permutations-0',\n        icon: PermutationIcons[0](),\n        component: () => PermutationPuzzles(0), \n    },\n    'permutations-1': {\n        slug: 'permutations-1',\n        icon: PermutationIcons[0](),\n        component: () => PermutationPuzzles(1), \n    },\n};\n\naddData('colour-graphs', 'colour-graphs', ColourGraphIcons, ColourGraph, 3);\naddData('colour-maps', 'colour-maps', ColourMapIcons, ColourMap, 2);\naddData('transformations', 'transformations', TransformationIcons, Transformations, 4);\naddData('sequences', 'sequences', SequencesIcons, Sequences, 3);\n\nfunction addData(name, slug, icons, components, n) {\n    for (let i = 0; i < n; i++) {\n        puzzleData[`${ name }-${ i }`] = {\n            slug: `${ slug }-${ i }`,\n            icon: icons[i](),\n            component: () => components(i)\n        }\n    }\n}\n\nfunction getData(name, n) {\n    return Array\n        .from({ length: n })\n        .map((_, index) => puzzleData[`${ name }-${ index }`]);\n}\n\n// Puzzle data grouped into categories\nexport const puzzleLayout = [\n    getData('sequences', 3).concat( getData('permutations', 1)),\n    getData('categorisation', 5),\n    getData('transformations', 4),\n    getData('colour-graphs', 3),\n    getData('colour-maps', 2),\n    getData('graph-theory', 3),\n];\n","import React from 'react';\nimport './icons.css';\n\nexport default (props) =>\n    <svg viewBox=\"-55 -55 110 110\">\n        <defs>\n            <filter id=\"glow-spotlight\" x=\"-200%\" y=\"-200%\" width=\"400%\" height=\"400%\">\n                <feGaussianBlur stdDeviation=\"2\" result=\"colouredBlur\" />\n                <feMerge>\n                    <feMergeNode in=\"coloredBlur\"/>\n                    <feMergeNode in=\"SourceGraphic\"/>\n                </feMerge>\n            </filter>\n        </defs>\n        <circle className=\"spotlight\" cx=\"0\" cy=\"0\" r=\"49\" />\n        <circle className=\"spotlight-outline\" cx=\"0\" cy=\"0\" r=\"49\" />\n        { props.children }\n    </svg>\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nimport { puzzleLayout } from '../AppData';\nimport Icon from './Icons/Icon';\nimport './puzzleMap.css';\n\n\nexport default () =>\n    <main className=\"front-page\">\n        <nav className=\"puzzle-map\">\n            {\n                puzzleLayout.map((section, i) =>\n                    <div className=\"puzzle-section\" key={i}>{\n                        section.map(\n                            ({ slug, icon }) => <Link className=\"map-link\" key={slug} to={slug}>\n                                <Icon>{ icon }</Icon>\n                            </Link>\n                        )\n                    }</div>\n                )\n            }\n        </nav>\n    </main>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { puzzleData } from './AppData';\nimport PuzzleMap from './PuzzleMap/PuzzleMap';\n\nimport './base.css';\n\n\nexport default () =>\n    <Router>\n        <Switch>\n            {\n                Object.values(puzzleData).map(({ slug, component }) =>\n                    <Route key={slug} path={`/${ slug }`} component={component} />\n                )\n            }\n            <Route path=\"/\" component={PuzzleMap} />\n        </Switch>\n    </Router>\n"],"sourceRoot":""}