{"version":3,"sources":["PuzzleMap/Icons/ColourGraphs.js","Toolbars/Toolbar.js","Toolbars/Button.js","Puzzles/PuzzlePage.js","Puzzles/PuzzleComponents/Primitives.js","Puzzles/PuzzleComponents/utils.js","Puzzles/PuzzleComponents/Graph.js","Puzzles/puzzleLoaders.js","utils/common.js","utils/graphUtils.js","utils/evaluation.js","Puzzles/ColourGraphs.js","PuzzleMap/Icons/ColourMaps.js","Puzzles/PuzzleComponents/Map.js","Puzzles/ColourMaps.js","PuzzleMap/Icons/Transformations.js","Puzzles/Transformations.js","PuzzleMap/Icons/Sequences.js","Puzzles/PuzzleComponents/Sequence.js","Puzzles/Sequences.js","PuzzleMap/Icons/Categorisation.js","Puzzles/PuzzleComponents/Categories.js","Puzzles/Categorisation.js","puzzleData.js","PuzzleMap/Icons/Icon.js","PuzzleMap/PuzzleMap.js","serviceWorker.js","index.js","App.js"],"names":["ColourGraphs","react_default","a","createElement","className","x","y","width","height","fill","x1","y1","x2","y2","cx","cy","r","d","DELTA_ANGLE","Math","PI","Toolbar","_ref","puzzle","nColours","selectedColour","angle","colours","_loop","i","cos","sin","concat","setColour","setState","push","role","aria-checked","tabIndex","key","onClick","onKeyDown","evt","callback","keyCode","handleKeyDown","selectColourIndicator","Button","props","flashing","viewBox","COLOURS","PuzzlePage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","queryString","parse","location","search","index","parseInt","q","state","solved","update","bind","assertThisInitialized","getPuzzle","nextPuzzle","_this$props","getPuzzleObject","puzzles","colourPalette","nextState","evaluate","length","aria-label","react_router_dom","to","_this$state","style","color","getNextPuzzleButton","id","preserveAspectRatio","result","in","dx","dy","stdDeviation","in2","mode","displayPuzzle","React","Component","withRouter","Line","getColourClassName","item","fixed","colour","getClickToColour","colourItem","Graph","_ref$edges","edges","_ref$nodes","nodes","colourNode","map","edge","Primitives_Line","assign","node","getGraphObject","_ref$size","size","_ref$r","nodeObjects","_ref2","_ref3","slicedToArray","nodeColour","Boolean","edgeObjects","_ref4","_ref5","n1","n2","node1","node2","getGraphAndUncolouredCopy","_ref6","_ref6$nodes","_ref6$edges","_ref6$size","_ref6$r","target","blank","_ref7","_ref8","getMapObject","_ref9","_ref9$regions","regions","_ref9$connections","connections","_ref9$size","regionObjects","_ref10","_ref11","connectionObjects","_ref12","_ref13","getSequenceObject","_ref14","pattern","answer","sequence","n","getCategoryObjects","_ref16","categories","randomRotate","categoryObjects","forEach","category","copies","type","object","rotate","floor","random","arr","j","temp","shuffle","getPointsOnACircle","arguments","undefined","_ref$offsetAngle","offsetAngle","_ref$dx","_ref$dy","points","dAngle","getNodesOnCircle","_ref2$r","_ref2$offsetAngle","_ref2$dx","_ref2$dy","Array","isArray","getLineOfEdges","start","stop","getLoopOfEdges","max","linearGraph","scale","startX","loopGraph","triangleGraph","allItemsHaveValue","items","attr","every","allItemsColoured","allConnectedItemsHaveDifferentColours","filter","cxn","graphIsChromatic","sequencesMatch","seq1","seq2","sequencesAreEquivalent","mapping1","Map","mapping2","value1","get","value2","set","graphNodesAreSameColour","samePatternButDifferent","min","sequenceHasNoMatches","ColourableGraph","Graph_Graph","nodeIndex","ColourMaps","rx","ry","_ref$regions","region","ColourableMap","Map_Map","Transformations","Fragment","href","transform","identity1","reflection1","rotation1","colour1","Transformation","Puzzles_PuzzlePage","Transformations_Transformation","Icons_Sequences","Sequence","_ref$sequence","ColourableSequence","Sequence_Sequence","Icons_Categorisation","Categories","colourCategory","_getCirclePackedInCir","R","phi","cPhi","categoryPositions","categorySize","getCirclePackedInCircle","component","displayCategories","Categories_Categories","puzzleData","addData","name","slug","icons","components","icon","getData","from","_","ColourGraphIcons","ColourMapIcons","CategorisationIcons","TransformationIcons","SequencesIcons","puzzleLayout","Icon","children","PuzzleMap","section","window","hostname","match","ReactDOM","render","react_router","values","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.090a24ae.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst ColourGraphIcon1 = () => <g>\n    <g className=\"graph-edges\">\n        <rect x=\"-20\" y=\"-20\" width=\"40\" height=\"40\" fill=\"none\" />\n        <line x1=\"-20\" y1=\"-20\" x2=\"20\" y2=\"20\" />\n        <line x1=\"-20\" y1=\"20\" x2=\"20\" y2=\"-20\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-20\" cy=\"-20\" r=\"8\" />\n        <circle className=\"colour-2\" cx=\"-20\" cy=\"20\" r=\"8\" />\n        <circle className=\"colour-1\" cx=\"20\" cy=\"20\" r=\"8\" />\n        <circle className=\"colour-2\" cx=\"20\" cy=\"-20\" r=\"8\" />\n        <circle className=\"colour-3\" cx=\"0\" cy=\"0\" r=\"8\" />\n    </g>\n</g>\n\nconst ColourGraphIcon2 = () => <g>\n    <g className=\"graph-edges\">\n        <rect x=\"-32\" y=\"-16\" width=\"64\" height=\"32\" />\n        <line x1=\"0\" y1=\"-16\" x2=\"0\" y2=\"16\" />\n        <line x1=\"-32\" y1=\"-16\" x2=\"0\" y2=\"16\" />\n        <line x1=\"32\" y1=\"-16\" x2=\"0\" y2=\"16\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-32\" cy=\"-16\" r=\"8\" />\n        <circle className=\"colour-2\" cx=\"0\" cy=\"-16\" r=\"8\" />\n        <circle className=\"colour-1\" cx=\"32\" cy=\"-16\" r=\"8\" />\n        <circle className=\"colour-2\" cx=\"32\" cy=\"16\" r=\"8\" />\n        <circle className=\"colour-3\" cx=\"0\" cy=\"16\" r=\"8\" />\n        <circle className=\"colour-2\" cx=\"-32\" cy=\"16\" r=\"8\" />\n    </g>\n</g>\n\nconst ColourGraphIcon3 = () => <g>\n    <g className=\"graph-edges\">\n        <path d=\"M32 0L16 27.7h-32L-32 0 -16 -27.71h32z\" />\n        <line x1=\"16\" y1=\"-27.71\" x2=\"16\" y2=\"27.71\" />\n        <line x1=\"-16\" y1=\"-27.71\" x2=\"-16\" y2=\"27.71\" />\n        <line className=\"edge-outline\" x1=\"-32\" y1=\"0\" x2=\"32\" y2=\"0\" />\n        <line x1=\"-32\" y1=\"0\" x2=\"32\" y2=\"0\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"32\" cy=\"0\" r=\"8\" />\n        <circle className=\"colour-2\" cx=\"16\" cy=\"27.71\" r=\"8\" />\n        <circle className=\"colour-3\" cx=\"-16\" cy=\"27.71\" r=\"8\" />\n        <circle className=\"colour-2\" cx=\"-32\" cy=\"0\" r=\"8\" />\n        <circle className=\"colour-1\" cx=\"-16\" cy=\"-27.71\" r=\"8\" />\n        <circle className=\"colour-3\" cx=\"16\" cy=\"-27.71\" r=\"8\" />\n    </g>\n</g>\n\nexport default [ColourGraphIcon1, ColourGraphIcon2, ColourGraphIcon3];\n","import React from 'react';\n\n\nconst TOOLBAR_R = 136;\nconst DELTA_ANGLE = Math.PI / 18;\n\nconst handleKeyDown = (evt, callback) => {\n    if (evt.key === 'Enter' || evt.keyCode === 32) {\n        callback();\n    }\n};\n\nexport default function ({ puzzle, nColours, selectedColour }) {\n    const r = 8;\n    let angle = Math.PI - DELTA_ANGLE * (nColours - 1) / 2;\n\n    const colours = [];\n    for (let i = 1; i <= nColours; i++) {\n        const cx = (TOOLBAR_R + r) * Math.cos(angle);\n        const cy = (TOOLBAR_R + r) * Math.sin(angle);\n        \n        let className = `colour-palette colour-${i}`;\n        if (selectedColour === i) {\n            className += ' selected';\n        } else if (i === 1 && !selectedColour) {\n            className += ' flashing';\n        }\n\n        const setColour = () => puzzle.setState({ selectedColour: i });\n\n        colours.push(\n            <circle\n                className={className}\n                role=\"radio\"\n                aria-checked={selectedColour === i}\n                tabIndex=\"0\"\n                key={i}\n                cx={cx}\n                cy={cy}\n                r={r}\n                onClick={setColour}\n                onKeyDown={(evt) => handleKeyDown(evt, setColour) }\n            />\n        );\n\n        angle += DELTA_ANGLE;\n    }\n\n    let selectColourIndicator = \"selected-colour-indicator\";\n    if (selectedColour) {\n        selectColourIndicator += ` colour-${selectedColour}`;\n    }\n\n    return <g className=\"toolbar\">\n        <circle className={selectColourIndicator} r=\"132\" />\n        <g className=\"colour-palette\" role=\"radiogroup\">\n            { colours }\n        </g>\n    </g>;\n}\n","import React from 'react';\n\n\nexport default (props) => {\n    let className = props.className || \"\";\n    if (props.flashing) { className += \" flashing\"; }\n\n    return <svg viewBox=\"-12 -12 24 24\">\n        <circle className={className} r=\"9\" onClick={props.onClick} role=\"button\" />\n    </svg>\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from 'react-router';\nimport { parse } from 'query-string';\n\nimport Toolbar from '../Toolbars/Toolbar';\nimport Button from '../Toolbars/Button';\n\nimport './puzzle.css';\n\n\nconst COLOURS = [\n    'rgb(30, 20, 20)',\n    'rgb(20, 146, 196)',\n    'rgb(196, 20, 96)',\n    'rgb(20, 198, 96)',\n    'rgb(220, 220, 20)',\n];\n\nclass PuzzlePage extends React.Component {\n    constructor(props) {\n        super(props);\n   \n        const queryString = parse(props.location.search);\n        const index = parseInt(queryString.q) || 0;\n\n        this.state = {\n            index,\n\t\t\tsolved: false,\n            selectedColour: null,\n        }\n\n        this.update = this.update.bind(this);\n        this.getPuzzle = this.getPuzzle.bind(this);\n        this.nextPuzzle = this.nextPuzzle.bind(this);\n    }\n\n    componentDidMount() {\n        // Load the first puzzle\n        this.getPuzzle(this.state.index);\n    }\n\n    getPuzzle(index) {\n        const { getPuzzleObject, puzzles } = this.props;\n        const puzzle = puzzles[index];\n\n        if (puzzle) {\n            this.setState({\n                puzzle: getPuzzleObject(puzzle),\n                colourPalette: puzzle.colourPalette\n            });\n        }\n    }\n\n    nextPuzzle() {\n        const nextState = this.state.index + 1;\n        this.setState({\n            index: nextState,\n            solved: false,\n            selectedColour: null\n        });\n        this.getPuzzle(nextState);\n    }\n\n    // Child element has updated so evaluate to see if puzzle has been solved\n    update(puzzle) {\n        const solved = this.props.evaluate(puzzle);\n        this.setState({ puzzle, solved });\n    }\n\n    getNextPuzzleButton() {\n        // Only show button if the puzzle has been solved\n        if (!this.state.solved) { return null; }\n\n        if (this.state.index < this.props.puzzles.length - 1) {\n            // Button to go to the next puzzle\n            return <div className=\"menu-button next-puzzle-button\" aria-label=\"Next puzzle\">\n                <Button onClick={this.nextPuzzle} flashing/>\n            </div>\n        } else {\n            // Button to go back to the home page\n            return <Link to=\"/pattern-puzzles/\" className=\"menu-button next-puzzle-button\" aria-label=\"Puzzle completed\">\n                <Button flashing/>\n            </Link>\n        }\n    }\n\n    render() {\n        const { index, puzzle, colourPalette, selectedColour } = this.state;\n        if (!puzzle) { return null; }\n\n        // Determine what the selected colour is if we have selected one\n        const style = selectedColour ? { color: COLOURS[selectedColour] } : {};\n        const className = selectedColour ? \"colour-selected\" : \"\";\n\n        return <main>\n            <nav>\n                <Link to=\"/pattern-puzzles/\" className=\"menu-button back-button\" aria-label=\"Back to menu\">\n                    <Button />\n                </Link>\n\n                { this.getNextPuzzleButton() }\n            </nav>\n\n            <svg id=\"puzzle-chamber\" viewBox=\"-128 -128 256 256\" preserveAspectRatio=\"xMidYMid meet\">\n                <defs>\n                    <filter id=\"shadow-filter\">\n                        <feOffset result=\"offOut\" in=\"SourceAlpha\" dx=\"2\" dy=\"2\"/>\n                        <feGaussianBlur result=\"blurOut\" in=\"offOut\" stdDeviation=\"5\" />\n                        <feBlend in=\"SourceGraphic\" in2=\"blurOut\" mode=\"normal\" />\n                    </filter>\n                    <filter id=\"glow-filter\" x=\"-200%\" y=\"-200%\" width=\"400%\" height=\"400%\">\n                        <feGaussianBlur stdDeviation=\"1.5\" result=\"colouredBlur\" />\n                        <feMerge>\n                            <feMergeNode in=\"coloredBlur\"/>\n                            <feMergeNode in=\"SourceGraphic\"/>\n                        </feMerge>\n                    </filter>\n                </defs>\n\n                <rect className=\"background\" x=\"-200\" y=\"-200\" width=\"400\" height=\"400\" />\n\n                <g id=\"puzzle\" key={index} className={className} style={style}>\n                    { this.props.displayPuzzle(puzzle, selectedColour, this.update) }\n                </g>\n\n                <circle id=\"chamber-window\" r=\"212\" />\n                <Toolbar \n                    puzzle={this}\n                    nColours={colourPalette}\n                    selectedColour={selectedColour}\n                />\n            </svg>\n        </main>\n    }\n};\n\nexport default withRouter(PuzzlePage);\n","import React from 'react';\n\n\nexport const Line = ({ x1, y1, x2, y2 }) =>\n    <line x1={x1} y1={y1} x2={x2} y2={y2} />\n","export function getColourClassName(item) {\n    let className;\n\n    if (!item.fixed) {\n        className = \"colourable \";\n        if (item.colour) {\n            className += `fill-${item.colour}`;\n        } else {\n            className += \"empty-region\";\n        }\n    } else {\n        className = `fill-${item.colour}`;\n    }\n\n    return className;\n}\n\nexport function getClickToColour(colourItem, item, i) {\n    if (colourItem && !item.fixed) {\n        return () => colourItem(i);\n    }\n}\n","import React from 'react';\nimport { Line } from './Primitives';\nimport { getColourClassName, getClickToColour } from './utils';\n\n\nexport const Graph = ({ edges=[], nodes=[], colourNode }) =>\n    <g className=\"graph\">\n        <g className=\"graph-edges\">\n            { edges.map((edge, i) =>\n                <g key={i}>\n                    <Line className=\"edge-outline\" {...edge} />\n                    <Line {...edge} />\n                </g>\n            )}\n        </g>\n\n        <g className=\"graph-nodes\">\n            { nodes.map((node, i) => \n                <circle\n                    key={i}\n                    r={node.r}\n                    cx={node.x}\n                    cy={node.y}\n                    className={getColourClassName(node)}\n                    onClick={getClickToColour(colourNode, node, i)}\n                />\n            )}\n        </g>\n    </g>\n","/***\n * These functions take the raw puzzle data and return an object that can used to\n * display the puzzle and determine when the correct answer is found\n***/\n\nimport { shuffle } from '../utils/common';\n\n// Given arrays of node coordinates and edge coordinates, return an object of nodes and edges\nexport function getGraphObject({ nodes=[], edges=[], size=32, r=8, colour }) {\n    const nodeObjects = nodes.map(([x, y, nodeColour]) => ({\n        r,\n        x: x * size,\n        y: y * size,\n        colour: nodeColour || colour,\n        fixed: Boolean(nodeColour || colour)\n    }));\n\n    const edgeObjects = edges.map(([n1, n2]) => {\n        const node1 = nodeObjects[n1];\n        const node2 = nodeObjects[n2];\n        return {\n            node1,\n            node2,\n            x1: node1.x,\n            y1: node1.y,\n            x2: node2.x,\n            y2: node2.y\n        };\n    });\n\n    return {\n        nodes: nodeObjects,\n        edges: edgeObjects\n    };\n}\n\n// Given arrays of node coordinates and edge coordinates, return two objects of nodes and edges,\n// one includes the node colours and one is empty\nexport function getGraphAndUncolouredCopy({ nodes=[], edges=[], size=32, r=8 }) {\n    const target = getGraphObject({ nodes, edges, size, r });\n\n    // Remove the colours from the nodes\n    const blankNodes = nodes.map(([x, y]) => [x, y]);\n    const blankGraph = getGraphObject({ nodes: blankNodes, edges, size, r });\n\n    return { target, blank: blankGraph };\n}\n\nexport function getMapObject({ regions=[], connections=[], size=1 }) {\n    const regionObjects = regions.map(([x, y, width, height]) => ({\n        x: (x - width / 2) * size,\n        y: (y - height / 2) * size,\n        width: width * size,\n        height: height * size,\n    }));\n\n    const connectionObjects = connections.map(([n1, n2]) => ({\n        node1: regionObjects[n1],\n        node2: regionObjects[n2],\n    }));\n\n    // Create a graph of the map in order to evaluate the solution\n    return {\n        regions: regionObjects,\n        connections: connectionObjects\n    };\n}\n\nexport function getSequenceObject({ pattern, answer }) {\n    //  Get a sequence of node objects\n    const sequence = pattern.map(colour => ({\n        colour,\n        fixed: colour > 0\n    }));\n\n    // Target sequence is the starting sequence with any 0s replaced by the answer items\n    let n = 0;\n    const target = pattern.map(colour => {\n        if (colour > 0) {\n            return { colour };\n        } else {\n            return { colour: answer[n++] };\n        }\n    });\n\n    return { sequence, target };\n}\n\nexport function getGraphSequence({ graphs, answer }) {\n    const sequence = [];\n    const target = [];\n\n    let n = 0;\n    graphs.forEach(graph => {\n        if (graph) {\n            sequence.push(getGraphObject(graph));\n            target.push(getGraphObject(graph));\n        } else {\n            // Target sequence is the starting sequence with any nulls replaced by the answer graphs\n            const answerGraph = getGraphObject(answer[n]);\n            target.push(answerGraph);\n            \n            // Displayed sequence show answer as a blank graph\n            const blankGraph = getGraphObject(answer[n]);\n            blankGraph.nodes.forEach(node => {\n                node.fixed = false;\n                node.colour = 0;\n            });\n            target.push(answerGraph);\n            n++;\n        }\n    });\n\n    return { sequence, target };\n}\n\n// Return an array of category object which have a colour, and an object to display\nexport function getCategoryObjects({ categories, randomRotate }) {\n    const categoryObjects = [];\n    \n    categories.forEach(category => {\n        const copies = category.copies || 1;\n\n        for (let i = 0; i < copies; i++) {\n            categoryObjects.push({\n                category: category.type,\n                object: category.item,\n                rotate: randomRotate ? Math.floor(Math.random() * 12) * 30 : 0\n            });\n        }\n    });\n\n    return shuffle(categoryObjects);\n}\n","export function shuffle(arr) {\n    for (let i = arr.length; i--; ) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    return arr;\n}\n","export function getPointsOnACircle(n, {r=1, offsetAngle=0, dx=0, dy=0}={}) {\n    const points = [];\n    const dAngle = 2 * Math.PI / n;\n    let angle = (offsetAngle * Math.PI / 180 || 0) - 0.5 * dAngle;\n\n    for (let i = 0; i < n; i++) {\n        points.push([\n            dx + r * Math.sin(angle),\n            dy + r * Math.cos(angle),\n        ]);\n        angle += dAngle;\n    }\n\n    return points;\n}\n\nexport function getNodesOnCircle(colours, {r=1, offsetAngle=0, dx=0, dy=0}={}) {\n    // If colours is a number rather than an array, create an empty array of that size\n    // i.e. none of the nodes will have a colour\n    if (!Array.isArray(colours)) {\n        colours = new Array(colours);\n    }\n\n    const n = colours.length;\n    const points = getPointsOnACircle(n, { r, offsetAngle, dx, dy });\n\n    // Combine coordinates with colours\n    const nodes = points.map(([x, y], i) => [x, y, colours[i]]);\n\n    return nodes;\n}\n\nexport function getLineOfEdges(start, stop) {\n    if (stop === undefined) {\n        stop = start - 1;\n        start = 0;\n    }\n\n    var edges = [];\n    for (var i = start; i < stop; i++) {\n        edges.push([i, i + 1]);\n    }\n\n    return edges;\n}\n\nexport function getLoopOfEdges(start, stop) {\n    if (stop === undefined) {\n        stop = Math.max(0, start - 1);\n        start = 0;\n    }\n\n    const edges = getLineOfEdges(start, stop);\n    if (start !== stop) {\n        edges.push([stop, start]);\n    }\n\n    return edges;\n}\n\nexport function linearGraph(colours, scale=1) {\n    if (!Array.isArray(colours)) {\n        colours = new Array(colours);\n    }\n\n    const n = colours.length;\n    const startX = - (n - 1) * scale / 2;\n    const nodes = colours.map((colour, i) => [startX + i * scale, 0, colour])\n    const edges = getLineOfEdges(n);\n\n    return { nodes, edges };\n}\n\nexport function loopGraph(colours, scale=1) {\n    if (!Array.isArray(colours)) {\n        colours = new Array(colours);\n    }\n\n    const nodes = getNodesOnCircle(colours, { r: scale });\n    const edges = getLoopOfEdges(colours.length);\n\n    return { nodes, edges };\n}\n\nexport function triangleGraph(colours, scale=1) {\n    if (!Array.isArray(colours)) {\n        // Can pass in a single colour to set all nodes to that colour\n        colours = [colours, colours, colours];\n    }\n\n    return {\n        nodes: getNodesOnCircle(colours, { r: scale }),\n        edges: getLoopOfEdges(3)\n    };\n}\n","export const allItemsHaveValue = (items=[], attr) =>\n    attr ?\n        items.every(item => item[attr] > 0) :\n        items.every(item => item > 0);\n\nexport const allItemsColoured = (items=[]) => allItemsHaveValue(items, 'colour');\n\nexport const extractAttribute = (items=[], attr) =>\n    items.map(item => item[attr]);\n\nexport function allConnectedItemsHaveDifferentColours(cxns=[]) {\n    const failingCxns = cxns.filter(cxn => cxn.node1.colour === cxn.node2.colour);\n    return failingCxns.length === 0;\n}\n\nexport const graphIsChromatic = ({ nodes, edges }) => \n    allItemsHaveValue(nodes, 'colour') &&\n    allConnectedItemsHaveDifferentColours(edges);\n\nexport const sequencesMatch = (seq1, seq2, attr) => {\n    if (seq1.length !== seq2.length) { return false; }\n    for (let i = 0; i < seq1.length; i++) {\n        const value1 = attr ? seq1[i][attr] : seq1[i];\n        const value2 = attr ? seq2[i][attr] : seq2[i];\n        if (value1 !== value2) {\n            return false;\n        }\n    }\n    return true;\n};\n\nexport const sequenceHasNoMatches = (seq1, seq2) => {\n    const n = Math.min(seq1.length, seq2.length);\n\n    for (let i = 0; i < n; i++) {\n        if (seq1[i] === seq2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test whether there is a consistent mapping between the values in one array to the value the other\nexport const sequencesAreEquivalent = (seq1, seq2) => {\n    if (seq1.length !== seq2.length) { \n        return false;\n    }\n\n    const mapping1 = new Map();\n    const mapping2 = new Map();\n\n    for (let i = 0; i < seq1.length; i++) {\n        const value1 = mapping1.get(seq1[i]);\n        const value2 = mapping2.get(seq2[i]);\n\n        if (value1 === undefined) {\n            mapping1.set(seq1[i], seq2[i]);\n        } else if (value1 !== seq2[i]) {\n            return false;\n        }\n\n        if (value2 === undefined) {\n            mapping2.set(seq2[i], seq1[i]);\n        } else if (value2 !== seq1[i]) {\n            return false;\n        }\n        \n    }\n\n    return true;\n};\n\n// Test whether the nodes of two graphs are the same colour\nexport const graphNodesAreSameColour = ({ blank, target }) => \n    allItemsColoured(blank.nodes) &&\n    sequencesMatch(blank.nodes, target.nodes, 'colour');\n\n// Test whether the nodes of two graphs have the same pattern,\n// i.e. there is a consistent mapping from the colours in one graph to the colour in the target\nexport const graphNodesHaveSamePattern = ({ blank, target }) =>\n    allItemsColoured(blank.nodes) &&\n    sequencesAreEquivalent(blank.nodes, target.nodes);\n\nexport const samePatternButDifferent = (seq1, seq2) =>\n    allItemsHaveValue(seq1) &&\n    allItemsHaveValue(seq2) &&\n    sequenceHasNoMatches(seq1, seq2) &&\n    sequencesAreEquivalent(seq1, seq2);\n","/*\n * Colour all nodes on a graph such that no edges joins two nodes of the same colour.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from './PuzzlePage';\nimport { Graph } from './PuzzleComponents/Graph';\nimport { getGraphObject } from './puzzleLoaders';\nimport { getNodesOnCircle, getLoopOfEdges } from '../utils/graphUtils';\nimport { graphIsChromatic } from '../utils/evaluation';\n\n\nconst puzzles1 = [\n\t{\n\t\tcolourPalette: 1,\n\t\tnodes: [[0, 0]]\n\t}, {\n\t\tcolourPalette: 2,\n\t\tnodes: [[-1, 0], [1, 0]],\n\t\tedges: [[0, 1]],\n\t}, {\n\t\tcolourPalette: 2,\n\t\tnodes: [[-2, 0], [0, 0], [2, 0]],\n\t\tedges: [[0, 1], [1, 2]],\n\t}, {\n\t\tcolourPalette: 3,\n\t\tnodes: getNodesOnCircle(3),\n\t\tedges: getLoopOfEdges(3),\n\t}, {\n\t\tcolourPalette: 2,\n\t\tnodes: getNodesOnCircle(4),\n\t\tedges: getLoopOfEdges(4),\n\t}, {\n\t\tcolourPalette: 3,\n\t\tnodes: getNodesOnCircle(4),\n\t\tedges: getLoopOfEdges(4).concat([[1, 3]]),\n\t}, {\n\t\tcolourPalette: 4,\n\t\tnodes: getNodesOnCircle(4),\n\t\tedges: getLoopOfEdges(4).concat([[1, 3], [0, 2]]),\n\t}, {\n\t\tcolourPalette: 3,\n\t\tnodes: [[0, 0]].concat(getNodesOnCircle(4)),\n\t\tedges: getLoopOfEdges(1, 4).concat([[0, 1], [0, 2], [0, 3], [0, 4]]),\n\t}\n];\n\nconst puzzles2 = [\n    {\n        colourPalette: 2,\n        scale: 24,\n        nodes: [[-2, -1], [0, -1], [2, -1], [2, 1], [0, 1], [-2, 1]],\n        edges: getLoopOfEdges(6),\n    }, {\n        colourPalette: 2,\n        scale: 24,\n        nodes: [[-2, -1], [0, -1], [2, -1], [2, 1], [0, 1], [-2, 1]],\n        edges: getLoopOfEdges(6).concat([[1, 4]]),\n    }, {\n        colourPalette: 2,\n        scale: 24,\n        nodes: [[-2, -1], [0, -1], [2, -1], [2, 1], [0, 1], [-2, 1]],\n        edges: getLoopOfEdges(6).concat([[0, 3]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: [[-2, -1], [0, -1], [2, -1], [2, 1], [0, 1], [-2, 1]],\n        edges: getLoopOfEdges(6).concat([[0, 4]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: [[-2, -1], [0, -1], [2, -1], [2, 1], [0, 1], [-2, 1]],\n        edges: getLoopOfEdges(6).concat([[0, 4], [2, 4]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: [[-2, -1], [0, -1], [2, -1], [2, 1], [0, 1], [-2, 1]],\n        edges: getLoopOfEdges(6).concat([[0, 4], [1, 4], [2, 4]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: [[-2, -1], [0, -1], [2, -1], [2, 1], [0, 1], [-2, 1]],\n        edges: getLoopOfEdges(6).concat([[0, 4], [1, 4], [1, 3]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: getNodesOnCircle(3).concat(getNodesOnCircle(3, { r: 2, offsetAngle: 60 })),\n        edges: getLoopOfEdges(3).concat([[0, 3], [1, 3], [1, 4], [2, 4], [0, 5], [2, 5]]),\n    }, {\n        colourPalette: 3,\n        scale: 16,\n        nodes: getNodesOnCircle(3).concat(getNodesOnCircle(3, { r: 4, offsetAngle: 60 })),\n        edges: getLoopOfEdges(3)\n            .concat(getLoopOfEdges(3, 5))\n            .concat([[0, 3], [1, 3], [1, 4], [2, 4], [0, 5], [2, 5]]),\n    }\n];\n\n// TODO: Give more colourPalette than required\nconst puzzles3 = [\n    {\n        colourPalette: 2,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6),\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[2, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 2], [2, 4]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 2], [2, 4], [0, 4]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[1, 3], [0, 4], [2, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[2, 4], [1, 3], [0, 4], [1, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 3], [1, 4], [2, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 2], [1, 3], [2, 4], [3, 5], [4, 0], [5, 1]]),\n    }\n];\n\nconst puzzles = [puzzles1, puzzles2, puzzles3];\n\nconst ColourableGraph = (puzzle, selectedColour, update) => {\n    const colourNode = nodeIndex => {\n        puzzle.nodes[nodeIndex].colour = selectedColour;\n        update(puzzle);\n    };\n\n    return <Graph {...puzzle} colourNode={colourNode}/>\n};\n\nexport const ColourGraph = (n) =>\n    <PuzzlePage\n        puzzles={puzzles[n]}\n        evaluate={graphIsChromatic}\n\t\tgetPuzzleObject={getGraphObject}\n\t\tdisplayPuzzle={ColourableGraph}\n    />\n","import React from 'react';\n\n\nconst ColourMapIcon1 = () =>\n    <g className=\"graph-nodes\">\n        <rect className=\"colour-1\" x=\"-28\" y=\"-28\" width=\"28\" height=\"28\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"0\" y=\"-28\" width=\"28\" height=\"28\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"-28\" y=\"0\" width=\"28\" height=\"28\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"0\" y=\"0\" width=\"28\" height=\"28\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-3\" x=\"-12\" y=\"-12\" width=\"24\" height=\"24\" rx=\"2\" ry=\"2\" />\n    </g>\n\nconst ColourMapIcon2 = () =>\n    <g className=\"graph-nodes\">\n        <rect className=\"colour-1\" x=\"-30\" y=\"-30\" width=\"30\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"0\" y=\"-30\" width=\"30\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"-30\" y=\"-10\" width=\"20\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-3\" x=\"-10\" y=\"-10\" width=\"20\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"10\" y=\"-10\" width=\"20\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"-30\" y=\"10\" width=\"30\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"0\" y=\"10\" width=\"30\" height=\"20\" rx=\"2\" ry=\"2\" />\n    </g>\n\nexport default [ColourMapIcon1, ColourMapIcon2];\n","import React from 'react';\nimport { getColourClassName, getClickToColour } from './utils';\n\n\nexport const Map = ({ regions=[], colourItem }) =>\n    <g className=\"graph\">\n        <g className=\"graph-nodes\">\n            { regions.map((region, i) =>\n                <rect\n                    key={i}\n                    x={region.x}\n                    y={region.y}\n                    width={region.width}\n                    height={region.height}\n                    rx=\"3\"\n                    ry=\"3\"\n                    className={getColourClassName(region)}\n                    onClick={getClickToColour(colourItem, region, i)}\n                />\n            )}\n        </g>\n    </g>\n","/*\n * Colour regions on a map such that no two touching regions have the same colour.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from './PuzzlePage';\nimport { Map } from './PuzzleComponents/Map';\nimport { getMapObject } from './puzzleLoaders';\nimport { allItemsColoured, allConnectedItemsHaveDifferentColours } from '../utils/evaluation';\n\n\nconst puzzles1 = [\n    {\n        colourPalette: 1,\n        regions: [[0, 0, 32, 32]]\n    }, {\n        colourPalette: 2,\n        regions: [[-16, 0, 32, 32], [16, 0, 32, 32]],\n        connections: [[0, 1]]\n    }, {\n        colourPalette: 2,\n        regions: [[-32, 0, 32, 32], [0, 0, 32, 32], [32, 0, 32, 32]],\n        connections: [[0, 1], [1, 2]]\n    }, {\n        colourPalette: 3,\n        regions: [[-16, 16, 32, 32], [16, 16, 32, 32], [0, -16, 64, 32]],\n        connections: [[0, 1], [1, 2], [0, 2]]\n    }, {\n        colourPalette: 2,\n        regions: [[-16, 16, 32, 32], [16, 16, 32, 32], [-16, -16, 32, 32], [16, -16, 32, 32]],\n        connections: [[0, 1], [2, 3], [0, 2], [1, 3]]\n    }, {\n        colourPalette: 3,\n        regions: [[-16, 16, 32, 32], [16, 16, 32, 32], [-16, -16, 32, 32], [16, -16, 32, 32], [0, 0, 28, 28]],\n        connections: [[0, 1], [2, 3], [0, 2], [1, 3], [0, 4], [1, 4], [2, 4], [3, 4]]\n    }, {\n        colourPalette: 3,\n        regions: [[0, 0, 72, 72], [-12, 12, 24, 24], [12, 12, 24, 24], [-12, -12, 24, 24], [12, -12, 24, 24], [0, 0, 24, 24]],\n        connections: [[1, 2], [3, 4], [1, 3], [2, 4], [0, 1], [0, 2], [0, 3], [0, 4], [5, 1], [5, 2], [5, 3], [5, 4]]\n    }, {\n        colourPalette: 4,\n        regions: [[-16, 16, 32, 32], [16, 16, 32, 32], [0, -16, 64, 32], [0, 0, 28, 28]],\n        connections: [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3]]\n    }\n];\n\nconst puzzles2 = [\n    {\n        colourPalette: 2,\n        regions: [[0, 0, 96, 96], [0, 0, 32, 32]],\n        connections: [[0, 1]]\n    }, {\n        colourPalette: 3,\n        regions: [[-24, 0, 48, 96], [24, 0, 48, 96], [0, 0, 32, 32]],\n        connections: [[0, 1], [1, 2], [0, 2]]\n    }, {\n        colourPalette: 4,\n        regions: [[0, -32, 96, 32], [-24, 16, 48, 64], [24, 16, 48, 64], [0, 0, 32, 32]],\n        connections: [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3]]\n    }, {\n        colourPalette: 3,\n        regions: [[-24, -24, 48, 48], [24, -24, 48, 48], [-24, 24, 48, 48], [24, 24, 48, 48], [0, 0, 32, 32]],\n        connections: [[0, 1], [2, 3], [0, 2], [1, 3], [0, 4], [1, 4], [2, 4], [3, 4]]\n    }, {\n        colourPalette: 3,\n        regions: [[-16, -32, 64, 32], [32, -16, 32, 64], [-32, 16, 32, 64], [16, 32, 64, 32], [0, 0, 32, 32]],\n        connections: [[0, 1], [2, 3], [0, 2], [1, 3], [0, 4], [1, 4], [2, 4], [3, 4]]\n    }, {\n        colourPalette: 2,\n        regions: [\n            [-32, -32, 32, 32], [0, -32, 32, 32], [32, -32, 32, 32],\n            [-32, 0, 32, 32], [0, 0, 32, 32], [32, 0, 32, 32],\n            [-32, 32, 32, 32], [0, 32, 32, 32], [32, 32, 32, 32]\n        ],\n        connections: [\n            [0, 1], [1, 2], [3, 4], [4, 5], [6, 7], [7, 8],\n            [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [5, 8]\n        ]\n    }\n];\n\nconst puzzles = [puzzles1, puzzles2];\n\nconst ColourableMap = (puzzle, selectedColour, update) => {\n    const colourItem = index => {\n        puzzle.regions[index].colour = selectedColour;\n        update(puzzle);\n    }\n\n    return <Map {...puzzle} colourItem={colourItem}/>\n};\n\nconst evaluate = ({ regions, connections }) => \n    allItemsColoured(regions) &&\n    allConnectedItemsHaveDifferentColours(connections);\n\nexport const ColourMap = (n) =>\n\t<PuzzlePage\n\t\tpuzzles={puzzles[n]}\n\t\tevaluate={evaluate}\n\t\tgetPuzzleObject={getMapObject}\n\t\tdisplayPuzzle={ColourableMap} />\n","import React from 'react';\n\n\nconst IdentityIcon1 = () => <React.Fragment>\n    <defs>\n        <g id=\"identity-1-puzzle\">\n            <g className=\"graph-edges\">\n                <line x1=\"-15\" y1=\"13\" x2=\"0\" y2=\"-13\" />\n                <line x1=\"-15\" y1=\"13\" x2=\"15\" y2=\"13\" />\n                <line x1=\"0\" y1=\"-13\" x2=\"15\" y2=\"13\" />\n            </g>\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-1\" cx=\"-15\" cy=\"13\" r=\"5\" />\n                <circle className=\"colour-2\" cx=\"0\" cy=\"-13\" r=\"5\" />\n                <circle className=\"colour-3\" cx=\"15\" cy=\"13\" r=\"5\" />\n            </g>\n        </g>\n    </defs>\n\n    <use href=\"#identity-1-puzzle\" transform=\"translate(-24, -4)\"/>\n    <use href=\"#identity-1-puzzle\" transform=\"translate(24, -4)\"/>\n    <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n</React.Fragment>\n\nconst ReflectionIcon1 = () => <React.Fragment>\n    <defs>\n        <g id=\"reflection-1-puzzle\">\n            <g className=\"graph-edges\">\n                <line x1=\"12\" y1=\"0\" x2=\"-11\" y2=\"-15\" />\n                <line x1=\"12\" y1=\"0\" x2=\"-11\" y2=\"15\" />\n                <line x1=\"-11\" y1=\"-15\" x2=\"-11\" y2=\"15\" />\n            </g>\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-2\" cx=\"12\" cy=\"0\" r=\"5\" />\n                <circle className=\"colour-1\" cx=\"-11\" cy=\"15\" r=\"5\" />\n                <circle className=\"colour-1\" cx=\"-11\" cy=\"-15\" r=\"5\" />\n            </g>\n        </g>\n    </defs>\n\n    <use href=\"#reflection-1-puzzle\" transform=\"translate(-20)\"/>\n    <use href=\"#reflection-1-puzzle\" transform=\"translate(20) scale(-1, 1)\"/>\n    <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n</React.Fragment>\n\nconst RotationIcon1 = () => <React.Fragment>\n    <defs>\n        <g id=\"rotation-1-puzzle\">\n            <g className=\"graph-edges\">\n                <line x1=\"-16\" y1=\"13\" x2=\"-2\" y2=\"-13\" />\n                <line x1=\"-16\" y1=\"13\" x2=\"12\" y2=\"13\" />\n                <line x1=\"-2\" y1=\"-13\" x2=\"12\" y2=\"13\" />\n            </g>\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-1\" cx=\"-16\" cy=\"13\" r=\"5\" />\n                <circle className=\"colour-2\" cx=\"-2\" cy=\"-13\" r=\"5\" />\n                <circle className=\"colour-1\" cx=\"12\" cy=\"13\" r=\"5\" />\n            </g>\n        </g>\n    </defs>\n\n    <use href=\"#rotation-1-puzzle\" transform=\"translate(-20)\"/>\n    <use href=\"#rotation-1-puzzle\" transform=\"translate(20) rotate(180)\"/>\n    <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n</React.Fragment>\n\nconst TransformColourIcon1 = () => <React.Fragment>\n    <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n\n    <g transform=\"translate(-20)\">\n        <g className=\"graph-edges\">\n            <line x1=\"0\" y1=\"16\" x2=\"0\" y2=\"-16\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"0\" cy=\"-16\" r=\"5\" />\n            <circle className=\"colour-2\" cx=\"0\" cy=\"0\" r=\"5\" />\n            <circle className=\"colour-1\" cx=\"0\" cy=\"16\" r=\"5\" />\n        </g>\n    </g>\n\n    <g transform=\"translate(20)\">\n        <g className=\"graph-edges\">\n            <line x1=\"0\" y1=\"16\" x2=\"0\" y2=\"-16\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-2\" cx=\"0\" cy=\"-16\" r=\"5\" />\n            <circle className=\"colour-1\" cx=\"0\" cy=\"0\" r=\"5\" />\n            <circle className=\"colour-2\" cx=\"0\" cy=\"16\" r=\"5\" />\n        </g>\n    </g>\n</React.Fragment>\n\nexport default [IdentityIcon1, ReflectionIcon1, RotationIcon1, TransformColourIcon1];\n","/*\n * Colour all nodes on a graph such that no edges joins two nodes of the same colour.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from './PuzzlePage';\nimport { Graph } from './PuzzleComponents/Graph';\nimport { getGraphAndUncolouredCopy } from './puzzleLoaders';\nimport { getNodesOnCircle, getLoopOfEdges, getLineOfEdges } from '../utils/graphUtils';\nimport { graphNodesAreSameColour, samePatternButDifferent } from '../utils/evaluation';\n\n\nconst identity1 = [\n\t{\n\t\tcolourPalette: 1,\n        nodes: [[0, 0, 1]]\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2]),\n        edges: getLineOfEdges(2)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: [[-1, 0, 1], [0, 0, 2], [1, 0, 1]],\n        edges: [[0, 1], [1, 2]]\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 4,\n        nodes: getNodesOnCircle([1, 2, 3, 4]),\n        edges: getLoopOfEdges(4)\n\t}, {\n        size: 24,\n        colourPalette: 3,\n        nodes: [[-1, -1, 1], [1, -1, 1], [-0.5, 0, 2], [0.5, 0, 3], [-1, 1, 3], [1, 1, 2]],\n        edges: [[0, 2], [2, 3], [3, 1], [2, 4], [3, 5]]\n    }, {\n        size: 24,\n        colourPalette: 4,\n        nodes: [[-1.5, -1, 1], [-0.5, -1, 2], [0.5, -1, 1], [-0.5, 0, 1], [0.5, 0, 3], [-0.5, 1, 3], [0.5, 1, 4], [1.5, 1, 3]],\n        edges: [[0, 1], [1, 2], [1, 3], [3, 4], [4, 6], [5, 6], [6, 7]]\n    }\n];\n\nconst reflection1 = [\n\t{\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 2], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 1]),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3]),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 1, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 2, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 4,\n        nodes: getNodesOnCircle([1, 2, 3, 4]),\n        edges: getLoopOfEdges(4)\n\t}\n];\n\nconst rotation1 = [\n\t{\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 2], { dy: 0.25 }),\n\t\tedges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2], { offsetAngle: 90 }),\n\t\tedges: getLoopOfEdges(2)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2]),\n\t\tedges: getLoopOfEdges(2)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 2, 2]),\n\t\tedges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 1, 2]),\n\t\tedges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 2], { dy: 0.25 }),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3], { dy: 0.25 }),\n\t\tedges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 4,\n        nodes: getNodesOnCircle([1, 2, 3, 4]),\n        edges: getLoopOfEdges(4)\n\t}\n];\n\nconst colour1 = [\n\t{\n\t\tcolourPalette: 1,\n        nodes: [[0, 0, 2]]\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2]),\n        edges: getLineOfEdges(2)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: [[-1, 0, 1], [0, 0, 2], [1, 0, 1]],\n        edges: getLineOfEdges(3)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3]),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3, 2]).concat([[0, 0, 3]]),\n        edges: getLoopOfEdges(4).concat([[0, 4], [1, 4] ,[2, 4], [3, 4]])\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3, 1, 2, 3]),\n        edges: getLoopOfEdges(6)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([2, 3, 1, 3, 2, 1]),\n        edges: getLoopOfEdges(6)\n\t}\n];\n\nconst ColourableGraph = (puzzle, selectedColour, update) => {\n    const colourNode = nodeIndex => {\n        puzzle.blank.nodes[nodeIndex].colour = selectedColour;\n        update(puzzle);\n    }\n\n    return <Graph {...puzzle.blank} colourNode={colourNode}/>\n};\n\nconst Transformation = ({ puzzles, transform, evaluate }) => {\n\tconst displayGraphs = (puzzle, selectedColour, update) => <g>\n        <g transform=\"translate(-60)\">\n            <Graph {...puzzle.target} />\n        </g>\n        <g transform={ \"translate(60) \" + transform }>\n            { ColourableGraph(puzzle, selectedColour, update) }\n        </g>\n\n        <line className=\"reflection-line\" y1=\"-200\" y2=\"200\" />\n    </g>\n\n\treturn <PuzzlePage\n\t\tpuzzles={puzzles}\n\t\tevaluate={evaluate}\n\t\tgetPuzzleObject={getGraphAndUncolouredCopy}\n\t\tdisplayPuzzle={displayGraphs} />\n};\n\nconst patternMatchGraphs = ({ blank, target }) => {\n\tconst seq1 = blank.nodes.map(node => node.colour);\n\tconst seq2 = target.nodes.map(node => node.colour);\n\treturn samePatternButDifferent(seq1, seq2);\n}\n\nconst puzzles = [\n\t<Transformation puzzles={identity1} transform=\"\" evaluate={graphNodesAreSameColour} />,\n\t<Transformation puzzles={reflection1} transform=\"scale(-1 1)\" evaluate={graphNodesAreSameColour}/>,\n\t<Transformation puzzles={rotation1} transform=\"rotate(180)\" evaluate={graphNodesAreSameColour} />,\n\t<Transformation puzzles={colour1} transform=\"\" evaluate={patternMatchGraphs} />,\n];\n\nexport const Transformations = (n) => puzzles[n];\n","import React from 'react';\n\n\nconst SequencesIcon1 = () => \n    <g className=\"graph-nodes\">\n        <rect className=\"colour-1\" x=\"-37.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"-22.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"-7.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"7.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"22.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n    </g>\n\nconst SequencesIcon2 = () => \n    <g className=\"graph-nodes\">\n        {[1, 2, 1, 0, 1, 2, 1].map((colour, index) =>\n            <rect\n                key={index}\n                className={\"colour-\" + colour}\n                x={-42 + index * 12}\n                y=\"-7.5\"\n                width=\"12\" height=\"12\" rx=\"2\" ry=\"2\" />\n        )}\n    </g>\n\nexport default [\n    SequencesIcon1,\n    SequencesIcon2\n];\n","import React from 'react';\nimport { getColourClassName, getClickToColour } from './utils';\n\n\nexport const Sequence = ({ sequence=[], colourItem }) => {\n    const size = Math.min(24, 200 / sequence.length);\n    const startX = -(sequence.length * size) / 2;\n\n    return <g className=\"sequence\">\n        { sequence.map((item, i) => {\n            return <rect\n                key={i}\n                x={startX + i * size }\n                y={-size / 2}\n                width={size - 1}\n                height={size - 1}\n                rx=\"3\"\n                ry=\"3\"\n                className={getColourClassName(item)}\n                onClick={getClickToColour(colourItem, item, i)}\n            />\n        })}\n    </g>\n};\n","/*\n * Colour regions on a map such that no two touching regions have the same colour.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from './PuzzlePage';\nimport { Sequence } from './PuzzleComponents/Sequence';\nimport { getSequenceObject } from './puzzleLoaders';\nimport { allItemsColoured, sequencesMatch } from '../utils/evaluation';\nimport { triangleGraph } from '../utils/graphUtils';\n\n\n// Sequence of coloured blocks with uncoloured blocks at the end\nconst puzzles1 = [\n    {\n        colourPalette: 1,\n        pattern: [1, 1, 1, 0],\n        answer: [1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 1, 1, 1, 0, 0],\n        answer: [1, 1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 1, 2, 1, 2, 0, 0],\n        answer: [1, 2]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 1, 2, 3, 0, 0, 0],\n        answer: [1, 2, 3]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 1, 2, 2, 1, 1, 0, 0],\n        answer: [2, 2]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 2, 1, 2, 2, 0, 0, 0],\n        answer: [1, 2, 2]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 3, 1, 2, 3, 3, 0, 0, 0, 0],\n        answer: [1, 2, 3, 3]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 0, 0],\n        answer: [1, 2, 1, 1]\n    }\n];\n\n// Sequence of coloured blocks with uncoloured blocks in the middle of the sequence\nconst puzzles2 = [\n    {\n        colourPalette: 1,\n        pattern: [1, 1, 0, 1, 1],\n        answer: [1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 1, 0, 1, 2, 1],\n        answer: [2]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 0, 2, 3],\n        answer: [1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 1, 2, 2, 1, 0, 0, 2],\n        answer: [1, 2]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 2, 1, 2, 0, 0, 2, 2],\n        answer: [2, 1]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1],\n        answer: [3]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 0, 0, 3, 1, 2, 3, 2, 1],\n        answer: [2, 1]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 1, 0, 0, 0, 1, 2, 3, 1, 1, 2, 3],\n        answer: [2, 3, 1]\n    }\n];\n\n// Sequence of coloured graphs with uncoloured one at the end\nconst puzzles3 = [\n    {\n        colourPalette: 1,\n        pattern: [triangleGraph(1), triangleGraph(1), triangleGraph(1), null],\n        answer: [triangleGraph(1)]\n    }\n];\n\nconst puzzles = [puzzles1, puzzles2, puzzles3];\n\nconst evaluate = ({ sequence, target }) =>\n    allItemsColoured(sequence) &&\n    sequencesMatch(sequence, target, 'colour');\n\nconst ColourableSequence = (puzzle, selectedColour, update) => {\n    const colourItem = index => {\n        puzzle.sequence[index].colour = selectedColour;\n        update(puzzle);\n    }\n\n    return <Sequence {...puzzle} colourItem={colourItem}/>\n};\n\nexport const Sequences = (n) =>\n    <PuzzlePage\n\t\tpuzzles={puzzles[n]}\n\t\tevaluate={evaluate}\n\t\tgetPuzzleObject={getSequenceObject}\n\t\tdisplayPuzzle={ColourableSequence} />\n","import React from 'react';\n\n\nconst Categorisation1 = () => <g>\n    <g className=\"categories\">\n        <circle className=\"colour-1\" cx=\"-24\" cy=\"0\" r=\"23\" />\n        <circle className=\"colour-2\" cx=\"24\" cy=\"0\" r=\"23\" />\n    </g>\n    <g className=\"graph-edges\">\n        <line x1=\"30\" y1=\"0\" x2=\"18\" y2=\"0\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-24\" cy=\"0\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"32\" cy=\"0\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"16\" cy=\"0\" r=\"4\" />\n    </g>\n</g>\n\nconst Categorisation2 = () => <g>\n    <g className=\"categories\">\n        <circle className=\"colour-1\" cx=\"-24\" cy=\"0\" r=\"23\" />\n        <circle className=\"colour-2\" cx=\"24\" cy=\"0\" r=\"23\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-24\" cy=\"0\" r=\"8\" />\n        <circle className=\"colour-2\" cx=\"24\" cy=\"0\" r=\"8\" />\n    </g>\n</g>\n\nconst Categorisation3 = () => <g>\n    <g className=\"categories\">\n        <circle className=\"colour-1\" cx=\"-20\" cy=\"-20\" r=\"19\" />\n        <circle className=\"colour-2\" cx=\"20\" cy=\"-20\" r=\"19\" />\n        <circle className=\"colour-2\" cx=\"-20\" cy=\"20\" r=\"19\" />\n        <circle className=\"colour-3\" cx=\"20\" cy=\"20\" r=\"19\" />\n    </g>\n    <g className=\"graph-edges\">\n        <line x1=\"-25\" y1=\"-20\" x2=\"-15\" y2=\"-20\" />\n        <line x1=\"25\" y1=\"-20\" x2=\"15\" y2=\"-20\" />\n        <line x1=\"-25\" y1=\"20\" x2=\"-15\" y2=\"20\" />\n        <line x1=\"25\" y1=\"20\" x2=\"15\" y2=\"20\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-28\" cy=\"-20\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"-12\" cy=\"-20\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"28\" cy=\"-20\" r=\"4\" />\n        <circle className=\"colour-2\" cx=\"12\" cy=\"-20\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"-28\" cy=\"20\" r=\"4\" />\n        <circle className=\"colour-2\" cx=\"-12\" cy=\"20\" r=\"4\" />\n        <circle className=\"colour-2\" cx=\"28\" cy=\"20\" r=\"4\" />\n        <circle className=\"colour-2\" cx=\"12\" cy=\"20\" r=\"4\" />\n    </g>\n</g>\n\n    export default [Categorisation1, Categorisation2, Categorisation3];\n","import React from 'react';\nimport { getPointsOnACircle } from '../../utils/graphUtils';\nimport { getColourClassName, getClickToColour } from './utils';\n\n\nconst getCirclePackedInCircle = (R, n) => {\n    const phi = Math.PI * (0.5 - 1 / n);\n    const cPhi = Math.cos(phi);\n    const r = R / (1 + cPhi);\n    const points = getPointsOnACircle(n, { r });\n\n    return {\n        categoryPositions: points,\n        categorySize: r * cPhi\n    };\n};\n\nexport const Categories = ({ size, categories, colourCategory }) => {\n    const { categoryPositions, categorySize } = getCirclePackedInCircle(size, categories.length);\n\n    return <g>\n        { categories.map((category, i) => {\n            let transform = `translate(${ categoryPositions[i][0] } ${ categoryPositions[i][1] })`;\n            if (category.rotate) {\n                transform += ` rotate(${ category.rotate })`;\n            }\n\n            return <g key={i} transform={transform}>\n                <circle\n                    className={'category ' + getColourClassName(category)}\n                    onClick={getClickToColour(colourCategory, category, i)}\n                    r={categorySize * 0.95}\n                    />\n                <g className=\"no-pointer\">\n                    { category.component }\n                </g>\n            </g>\n        })}\n    </g>\n}\n","import React from 'react';\n\nimport PuzzlePage from './PuzzlePage';\nimport { Graph } from './PuzzleComponents/Graph';\nimport { Categories } from './PuzzleComponents/Categories';\nimport { getCategoryObjects, getGraphObject } from './puzzleLoaders';\nimport {\n    linearGraph,\n    loopGraph,\n    triangleGraph,\n    getPointsOnACircle,\n    getLineOfEdges,\n    getLoopOfEdges\n} from '../utils/graphUtils';\nimport { allItemsColoured, sequencesAreEquivalent } from '../utils/evaluation';\n\n\n// Graphs are all the same colour and need to be match by shape\nconst puzzle1 = [\n    {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: { nodes: [[0, 0, 1]] }},\n            { type: 2, item: linearGraph([1, 1]) },\n        ]\n    }, {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, copies: 3, item: linearGraph([1, 1, 1]) },\n            { type: 2, copies: 2, item: triangleGraph(1, 0.8) }\n        ]\n    }, {\n        colourPalette: 3,\n        randomRotate: true,\n        categories: [\n            { type: 1, copies: 2, item: linearGraph([1, 1, 1]) },\n            { type: 2, copies: 2, item: triangleGraph(1, 0.8) },\n            { type: 3, copies: 2, item: {\n                nodes: [[0.5, 0.5], [-0.5, 0.5], [0.5, -0.5]],\n                edges: [[0, 1], [0, 2]],\n                colour: 1\n            }}\n        ]\n    }, {\n        colourPalette: 3,\n        randomRotate: true,\n        categories: [\n            { type: 1, copies: 2, item: loopGraph([1, 1, 1, 1], 0.8) },\n            {\n                type: 2,\n                copies: 3,\n                item: {\n                    nodes: getPointsOnACircle(4, { r: 0.8 }),\n                    edges: getLineOfEdges(4),\n                    colour: 1\n                }\n            }, {\n                type: 3,\n                item: {\n                    nodes: getPointsOnACircle(4, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [0, 3]],\n                    colour: 1\n                }\n            },\n        ]\n    }, {\n        colourPalette: 3,\n        randomRotate: true,\n        categories: [\n            {\n                type: 1,\n                copies: 2,\n                item: {\n                    nodes: getPointsOnACircle(4, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [0, 3]],\n                    colour: 1\n                }\n            }, {\n                type: 2,\n                copies: 2,\n                item: {\n                    nodes: getPointsOnACircle(4, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [2, 3]],\n                    colour: 1\n                }\n            }, {\n                type: 3,\n                copies: 2,\n                item: {\n                    nodes: getPointsOnACircle(4, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [0, 3], [2, 3]],\n                    colour: 1\n                }\n            },\n        ]\n    }, {\n        colourPalette: 4,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 1, 1, 1], 0.8) },\n            {\n                type: 2,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(5, { r: 0.8 }),\n                    edges: getLineOfEdges(5),\n                    colour: 1\n                }\n            }, {\n                type: 3 ,\n                copies: 2,\n                item: {\n                    nodes: getPointsOnACircle(5, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [0, 3], [0, 4]],\n                    colour: 1\n                }\n            }, {\n                type: 4,\n                item: {\n                    nodes: getPointsOnACircle(5, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [0, 3], [3, 4]],\n                    colour: 1\n                }\n            }\n        ]\n    }, {\n        colourPalette: 3,\n        randomRotate: true,\n        categories: [\n            {\n                type: 1,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(6, { r: 0.9 }),\n                    edges: ([[0, 1], [1, 2], [2, 5], [4, 5], [3, 4]]),\n                    colour: 1\n                }\n            }, {\n                type: 2,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(6, { r: 0.9 }),\n                    edges: ([[0, 1], [1, 2], [2, 4], [4, 5], [3, 4]]),\n                    colour: 1\n                }\n            }, {\n                type: 3,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(6, { r: 0.9 }),\n                    edges: ([[0, 1], [1, 2], [1, 4], [4, 5], [3, 4]]),\n                    colour: 1\n                }\n            }\n        ]\n    }, {\n        colourPalette: 4,\n        randomRotate: true,\n        categories: [\n            {\n                type: 1,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(6),\n                    edges: getLoopOfEdges(6).concat([[0, 3], [0, 4], [1, 5]]),\n                    colour: 1\n                }\n            }, {\n                type: 2,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(6),\n                    edges: getLoopOfEdges(6).concat([[0, 3], [0, 4], [1, 4]]),\n                    colour: 1\n                }\n            }, {\n                type: 3,\n                copies: 1, \n                item: {\n                    nodes: getPointsOnACircle(6),\n                    edges: getLoopOfEdges(6).concat([[0, 3], [0, 4], [2, 4]]),\n                    colour: 1\n                }\n            }, {\n                type: 4,\n                copies: 1, \n                item: {\n                    nodes: getPointsOnACircle(6),\n                    edges: getLoopOfEdges(6).concat([[0, 2], [0, 4], [1, 5]]),\n                    colour: 1\n                }\n            }\n        ]\n    }\n]\n\n// Graphs are all the same shape and orientation and need to be matched by colour\nconst puzzle2 = [\n\t{\n        colourPalette: 2,\n        categories: [\n            { type: 1, item: { nodes: [[0, 0, 1]] }},\n            { type: 2, item: { nodes: [[0, 0, 2]] }},\n        ]\n    }, {\n\t\tcolourPalette: 2,\n        categories: [\n            { type: 1, item: linearGraph([1, 1]) },\n            { type: 1, item: linearGraph([1, 1]) },\n            { type: 2, item: linearGraph([2, 2]) },\n            { type: 2, item: linearGraph([2, 2]) },\n        ]\n    }, {\n\t\tcolourPalette: 3,\n        categories: [\n            { type: 1, item: linearGraph([1, 1]) },\n            { type: 2, item: linearGraph([1, 2]) },\n            { type: 2, item: linearGraph([1, 2]) },\n            { type: 3, item: linearGraph([2, 2]) },\n        ]\n    }, {\n        colourPalette: 2,\n        categories: [\n            { type: 1, item: linearGraph([1, 2, 1]) },\n            { type: 1, item: linearGraph([1, 2, 1]) },\n            { type: 2, item: linearGraph([2, 1, 2]) },\n            { type: 2, item: linearGraph([2, 1, 2]) },\n        ]\n    }, {\n        colourPalette: 3,\n        categories: [\n            { type: 1, item: linearGraph([1, 1, 2]) },\n            { type: 1, item: linearGraph([1, 1, 2]) },\n            { type: 2, item: linearGraph([1, 2, 1]) },\n            { type: 3, item: linearGraph([2, 1, 1]) },\n            { type: 3, item: linearGraph([2, 1, 1]) },\n        ]\n    }, {\n        colourPalette: 3,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 2], 0.75) },\n            { type: 1, item: loopGraph([1, 1, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 2, 1], 0.75) },\n            { type: 2, item: loopGraph([1, 2, 1], 0.75) },\n            { type: 3, item: loopGraph([2, 1, 1], 0.75) },\n            { type: 3, item: loopGraph([2, 1, 1], 0.75) },\n        ]\n    }, {\n        colourPalette: 3,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 2, 2], 0.75) },\n            { type: 1, item: loopGraph([1, 1, 2, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 2, 1, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 2, 1, 2], 0.75) },\n            { type: 3, item: loopGraph([2, 1, 2, 1], 0.75) },\n            { type: 3, item: loopGraph([2, 1, 2, 1], 0.75) },\n        ]\n    }, {\n        colourPalette: 4,\n        categories: [\n            { type: 1, item: loopGraph([1, 2, 3, 1, 2, 3], 0.75) },\n            { type: 2, item: loopGraph([3, 2, 1, 3, 2, 1], 0.75) },\n            { type: 2, item: loopGraph([3, 2, 1, 3, 2, 1], 0.75) },\n            { type: 3, item: loopGraph([1, 2, 3, 2, 3, 1], 0.75) },\n            { type: 3, item: loopGraph([1, 2, 3, 2, 3, 1], 0.75) },\n            { type: 4, item: loopGraph([3, 2, 1, 2, 3, 1], 0.75) },\n        ]\n    }\n];\n\n// Graphs are all the same shape but rotated and need to be matched by colour\nconst puzzle3 = [\n    {\n        colourPalette: 3,\n        categories: [\n            { type: 1, item: linearGraph([1, 1]) },\n            { type: 2, item: linearGraph([1, 2]) },\n            { type: 2, item: linearGraph([2, 1]) },\n            { type: 3, item: linearGraph([2, 2]) },\n        ]\n    }, {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: linearGraph([1, 2, 1]) },\n            { type: 1, item: linearGraph([1, 2, 1]) },\n            { type: 1, item: linearGraph([1, 2, 1]) },\n            { type: 2, item: linearGraph([2, 1, 2]) },\n            { type: 2, item: linearGraph([2, 1, 2]) },\n            { type: 2, item: linearGraph([2, 1, 2]) },\n        ]\n    }, {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 2, 2], 0.75) },\n            { type: 1, item: loopGraph([1, 2, 2], 0.75) },\n            { type: 1, item: loopGraph([1, 2, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 1, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 1, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 1, 2], 0.75) },\n        ]\n    }, {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 2, 2], 0.75) },\n            { type: 1, item: loopGraph([1, 1, 2, 2], 0.75) },\n            { type: 1, item: loopGraph([1, 1, 2, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 2, 1, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 2, 1, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 2, 1, 2], 0.75) },\n        ]\n    }, {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 2, 3], 0.75) },\n            { type: 1, item: loopGraph([1, 2, 3], 0.75) },\n            { type: 2, item: loopGraph([1, 3, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 3, 2], 0.75) },\n        ]\n    }, {\n        colourPalette: 3,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 2, 3], 0.75) },\n            { type: 1, item: loopGraph([1, 1, 2, 3], 0.75) },\n            { type: 2, item: loopGraph([1, 1, 3, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 1, 3, 2], 0.75) },\n            { type: 3, item: loopGraph([1, 2, 1, 3], 0.75) },\n            { type: 3, item: loopGraph([1, 2, 1, 3], 0.75) },\n        ]\n    }, {\n        colourPalette: 4,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 2, 3, 4], 0.75) },\n            { type: 1, item: loopGraph([1, 2, 3, 4], 0.75) },\n            { type: 2, item: loopGraph([1, 4, 3, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 4, 3, 2], 0.75) },\n            { type: 3, item: loopGraph([1, 3, 2, 4], 0.75) },\n            { type: 4, item: loopGraph([1, 2, 4, 3], 0.75) },\n        ]\n    }, {\n        colourPalette: 4,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 2, 3, 1, 2, 3], 0.75) },\n            { type: 2, item: loopGraph([1, 3, 2, 1, 3, 2], 0.75) },\n            { type: 2, item: loopGraph([1, 3, 2, 1, 3, 2], 0.75) },\n            { type: 3, item: loopGraph([1, 2, 3, 2, 3, 1], 0.75) },\n            { type: 4, item: loopGraph([1, 2, 1, 3, 2, 3], 0.75) },\n            { type: 4, item: loopGraph([1, 2, 1, 3, 2, 3], 0.75) },\n        ]\n    }\n];\n\nconst puzzles = [puzzle1, puzzle2, puzzle3];\n\nconst displayCategories = (categories, selectedColour, update) => {\n    categories.forEach(item => {\n        item.component = <Graph {...getGraphObject(item.object)} />\n    });\n\n    const colourCategory = index => {\n        categories[index].colour = selectedColour;\n        update(categories);\n    };\n\n    return <Categories size=\"128\" categories={categories} colourCategory={colourCategory} />\n};\n\nconst evaluate = puzzle =>\n    allItemsColoured(puzzle) &&\n    sequencesAreEquivalent(puzzle.map(item => item.category), puzzle.map(item => item.colour));\n\nexport const Categorisation = (n) =>\n    <PuzzlePage\n        puzzles={puzzles[n]}\n        evaluate={evaluate}\n        getPuzzleObject={getCategoryObjects}\n        displayPuzzle={displayCategories} />\n","import ColourGraphIcons from './PuzzleMap/Icons/ColourGraphs';\nimport { ColourGraph } from './Puzzles/ColourGraphs';\n\nimport ColourMapIcons from './PuzzleMap/Icons/ColourMaps';\nimport { ColourMap } from './Puzzles/ColourMaps';\n\nimport TransformationIcons from './PuzzleMap/Icons/Transformations';\nimport { Transformations } from './Puzzles/Transformations';\n\nimport SequencesIcons from './PuzzleMap/Icons/Sequences';\nimport { Sequences } from './Puzzles/Sequences';\n\nimport CategorisationIcons from './PuzzleMap/Icons/Categorisation';\nimport { Categorisation } from './Puzzles/Categorisation';\n\n\n// Mapping puzzle names to URLS, icons and components\nexport const puzzleData = {};\n\naddData('colour-graphs', 'colour-graphs', ColourGraphIcons, ColourGraph, 3);\naddData('colour-maps', 'colour-maps', ColourMapIcons, ColourMap, 2);\naddData('categorisation', 'categorisation', CategorisationIcons, Categorisation, 3);\naddData('transformations', 'transformations', TransformationIcons, Transformations, 4);\naddData('sequences', 'sequences', SequencesIcons, Sequences, 2);\n\nfunction addData(name, slug, icons, components, n) {\n    for (let i = 0; i < n; i++) {\n        puzzleData[`${ name }-${ i }`] = {\n            slug: `${ slug }-${ i }`,\n            icon: icons[i](),\n            component: () => components(i)\n        }\n    }\n}\n\nfunction getData(name, n) {\n    return Array\n        .from({ length: n })\n        .map((_, index) => puzzleData[`${ name }-${ index }`]);\n}\n\n// Puzzle data grouped into categories\nexport const puzzleLayout = [\n    getData('colour-graphs', 3),\n    getData('colour-maps', 2),\n    getData('categorisation', 3),\n    getData('transformations', 4),\n    getData('sequences', 2),\n];\n","import React from 'react';\nimport './icons.css';\n\nexport default (props) =>\n    <svg viewBox=\"-55 -55 110 110\">\n        <defs>\n            <filter id=\"glow-spotlight\" x=\"-200%\" y=\"-200%\" width=\"400%\" height=\"400%\">\n                <feGaussianBlur stdDeviation=\"2\" result=\"colouredBlur\" />\n                <feMerge>\n                    <feMergeNode in=\"coloredBlur\"/>\n                    <feMergeNode in=\"SourceGraphic\"/>\n                </feMerge>\n            </filter>\n        </defs>\n        <circle className=\"spotlight\" cx=\"0\" cy=\"0\" r=\"49\" />\n        <circle className=\"spotlight-outline\" cx=\"0\" cy=\"0\" r=\"49\" />\n        { props.children }\n    </svg>\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nimport { puzzleLayout } from '../puzzleData';\nimport Icon from './Icons/Icon';\nimport './puzzleMap.css';\n\n\nexport default () =>\n    <main className=\"front-page\">\n        <nav className=\"puzzle-map\">\n            {\n                puzzleLayout.map((section, i) =>\n                    <div className=\"puzzle-section\" key={i}>{\n                        section.map(\n                            ({ slug, icon }) => <Link className=\"map-link\" key={slug} to={'/pattern-puzzles/' + slug}>\n                                <Icon>{ icon }</Icon>\n                            </Link>\n                        )\n                    }</div>\n                )\n            }\n        </nav>\n    </main>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { puzzleData } from './puzzleData';\nimport PuzzleMap from './PuzzleMap/PuzzleMap';\n\nimport './base.css';\n\n\nconst BASE_URL = '/pattern-puzzles';\n\nexport default () =>\n    <Router>\n        <Switch>\n            {\n                Object.values(puzzleData).map(({ slug, component }) =>\n                    <Route key={slug} path={`${ BASE_URL }/${ slug }`} component={component} />\n                )\n            }\n            <Route path={`${BASE_URL}/`} component={PuzzleMap} />\n        </Switch>\n    </Router>\n"],"sourceRoot":""}