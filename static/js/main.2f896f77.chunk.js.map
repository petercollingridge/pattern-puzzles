{"version":3,"sources":["PuzzleMap/Icons/ColourGraphs.js","utils/common.js","PuzzleChamber/Toolbars/ButtonSet.js","PuzzleChamber/Toolbars/Button.js","PuzzleChamber/Toolbars/ColourToolbar.js","PuzzleChamber/Toolbars/PuzzlePreviewToolbar.js","PuzzleChamber/PuzzleChamber.js","Puzzles/PuzzleComponents/Primitives.js","Puzzles/utils/isColourable.js","Puzzles/PuzzleComponents/Graph.js","Puzzles/utils/graphUtils.js","Puzzles/utils/graphTypes.js","Puzzles/utils/loadPuzzle.js","Puzzles/utils/evaluate.js","Puzzles/GraphTheory/ColourGraphs.js","PuzzleMap/Icons/GraphTheory.js","Puzzles/GraphTheory/EulerPath.js","Puzzles/GraphTheory/MinimumCut.js","Puzzles/GraphTheory/DominatingSet.js","Puzzles/GraphTheory/HamiltonianPath.js","Puzzles/GridPaths/GridPaths.js","Puzzles/PuzzleComponents/Categories.js","Puzzles/GridPaths/CategoriseGrids.js","PuzzleMap/Icons/GridPaths.js","PuzzleMap/Icons/ColourMaps.js","Puzzles/PuzzleComponents/Map.js","Puzzles/ColourMaps.js","PuzzleMap/Icons/Transformations.js","Puzzles/Transformations.js","PuzzleMap/Icons/Sequences.js","Puzzles/PuzzleComponents/Sequence.js","Puzzles/Sequences.js","PuzzleMap/Icons/Categorisation.js","Puzzles/Categorisation.js","PuzzleMap/Icons/Combinatorics.js","Puzzles/Combinatorics/Permutations.js","Puzzles/Combinatorics/Combinations.js","Puzzles/Combinatorics/Derrangements.js","AppData.js","PuzzleMap/Icons/Icon.js","PuzzleMap/PuzzleMap.js","serviceWorker.js","index.js","App.js"],"names":["ColourGraphs","react_default","a","createElement","className","d","fill","x1","y1","x2","y2","cx","cy","r","sum","arr","func","i","length","getArrayOfN","n","push","nTimes","Array","from","map","getArray","value","isArray","_","getCombinationsWithReplacement","size","result","_loop2","firstItem","slice","forEach","seq","concat","handleKeyDown","evt","callback","key","keyCode","TOOLBAR_R","DELTA_ANGLE","Math","PI","ButtonSet","_ref","buttons","startAngle","positionR","positions","baseAngle","arguments","undefined","direction","angle","x","cos","y","sin","getPositionsAroundCircle","role","_ref2","index","component","props","Object","objectWithoutProperties","position","Component","assign","SVGButton","tabIndex","onKeyDown","onClick","ColourButton","colour","count","puzzle","selectedColour","state","button","Button_SVGButton","aria-checked","setState","dAngle","showColourCounter","Button","viewBox","ColourToolbar","colours","clearPuzzle","colourCount","color","Toolbars_ButtonSet","PuzzlePreviewToolbar","puzzles","maxIndex","getPuzzle","COLOURS","PuzzlePage","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","queryString","parse","location","search","parseInt","q","solved","clear","bind","assertThisInitialized","update","nextPuzzle","backToMenu","_this$props","getPuzzleObject","getSolutionObject","colourPalette","solution","clearButton","nextState","max","history","_this$state","evaluate","aria-label","Button_Button","_this$state2","style","selectColourIndicator","getNextPuzzleButton","id","preserveAspectRatio","in","dx","dy","stdDeviation","in2","mode","width","height","operator","radius","displayPuzzle","Toolbars_ColourToolbar","Toolbars_PuzzlePreviewToolbar","React","withRouter","Line","isColourable","item","chamber","_ref$className","_ref$onColour","onColour","inactive","fixed","colourUses","colourThisItem","Edge","hidden","flashing","edgeColour","Primitives_Line","ColourableEdge","edge","atan2","sqrt","transform","Graph","_ref2$edges","edges","_ref2$nodes","nodes","node","EdgeGraph","_ref3","_ref3$edges","_ref3$nodes","current","ColourableGraph","graph","Graph_Graph","ColourableEdgeGraph","Graph_EdgeGraph","ColourableHamilitonianPath","updateNodes","path","selectedNode","nodeIndex","previousNode","pop","ColourableEulerPath","labelInactiveEdges","node1","node2","some","DominatingSet","targetNode","neighbours","keys","active","every","n2","getPointsOnACircle","_ref$r","_ref$offsetAngle","offsetAngle","_ref$dx","_ref$dy","points","getNodesOnCircle","_ref2$r","_ref2$offsetAngle","_ref2$dx","_ref2$dy","_ref4","slicedToArray","getGraphBBox","_ref5","getLineOfEdges","start","stop","getLoopOfEdges","connectNodeToNodes","subdivideGraph","newEdges","_ref6","_ref7","n1","getRegularPolygonGraph","scale","triangleGraph","squareGraph","linearGraph","params","_params$scale","startX","loopGraph","_params$scale2","gridGraph","nColumns","nRows","startY","j","starGraph","_params$scale3","shift","spokeGraph","sunletGraph","innerColours","outerColours","p","prismGraph","antiPrismGraph","gearGraph","getGraphObject","_ref$nodes","_ref$edges","_ref$size","nodeObjects","nodeColour","Boolean","edgeObjects","getGraphAndUncolouredCopy","_ref6$nodes","_ref6$edges","_ref6$size","_ref6$r","target","blank","_ref8","getMapObject","_ref9","_ref9$regions","regions","_ref9$connections","connections","_ref9$size","regionObjects","_ref10","_ref11","connectionObjects","_ref12","_ref13","colourNumberToColourObject","getSequenceObject","_ref14","pattern","answer","sequence","getGraphSet","_ref16","graphs","graphType","loop","getGraphSequence","_ref17","answerGraph","blankGraph","getCategoryObjects","_ref18","categories","randomRotate","_ref18$itemProps","itemProps","categoryObjects","category","copies","type","object","rotate","floor","random","temp","shuffle","allItemsHaveValue","items","attr","allItemsColoured","extractAttribute","graphToStringOfNodes","join","graphToStringOfSortedNodes","sort","setOfSetsEqual","targetSet","sequenceSet","Set","toConsumableArray","has","sequenceSetMatches","allConnectedItemsHaveDifferentColours","cxns","matches","cxn","graphIsChromatic","sequencesMatch","seq1","seq2","sequencesAreEquivalent","mapping1","Map","mapping2","value1","get","value2","set","graphNodesAreSameColour","samePatternButDifferent","min","sequenceHasNoMatches","rectCoords","Icons_GraphTheory","getGraph","EulerPath","PuzzleChamber","GraphTheory","visited","frontier","nodeCount","nextNodeId","nextNode","graphIsDisjoint","R3","end","graphObject","finalIndex","values","GridPath","Categories","_getCirclePackedInCir","R","phi","cPhi","categorySize","categoryPositions","getCirclePackedInCircle","getGridGraph","displayCategories","CategoriseGrids","Icons_GridPaths","ColourMaps","rx","ry","_ref$regions","ColourableMap","Map_Map","Transformations","Fragment","href","identity1","reflection1","rotation1","colour1","Transformation","Transformations_Transformation","Icons_Sequences","getSize","Sequence","_ref$sequence","_ref$y","ColourableSequence","Sequence_Sequence","GraphRow","GAP","gap","totalWidth","gapSize","bbox","GraphColumn","totalHeight","t1","t2","t112","t221","t121","t211","t123","t231","t312","s1122","s2211","s2112","s1221","s1212","s2121","correctSequence","correctGraphSequence","Icons_Categorisation","puzzle1","puzzle2","puzzle3","triangleWithCenter","lowTriangle","rectangle","Categorisation","Combinatorics","permute","remainingItems","previousItem","curr","next","splice","getPermutations","getPermutationsWithReplacement","_loop","displayGraphSequence","PermutationPuzzles","getSolutions","solutionSet","solutions","getSolutionSet","combinationLength","combinations","combination","nGraphs","allNodes","getRepeatArray","allGraphsAreChromatic","graphStrings","allGraphsInSequenceAreDifferent","puzzleData","categorisation-0","slug","icon","CategorisationIcons","categorisation-1","categorisation-2","categorisation-3","categorisation-4","graph-theory-0","GraphTheoryIcons","HamiltonianPath","graph-theory-1","graph-theory-2","MinimumCut","graph-theory-3","permutations-0","PermutationIcons","permutations-1","combinations-0","CombinationPuzzles","derrangements-0","graph-path-2","GridPathIcons","addData","name","icons","components","getData","ColourGraphIcons","ColourMapIcons","TransformationIcons","SequencesIcons","puzzleLayout","Icon","children","PuzzleMap","section","react_router_dom","to","window","hostname","match","ReactDOM","render","react_router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f896f77.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst ColourGraphIcon1 = () => <g>\n    <g className=\"graph-edges edge-outline\">\n        <path d=\"M-20 -20h40v40h-40z\" fill=\"none\" />\n        <line x1=\"-20\" y1=\"-20\" x2=\"20\" y2=\"20\" />\n        <line x1=\"-20\" y1=\"20\" x2=\"20\" y2=\"-20\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-20\" cy=\"-20\" r=\"7\" />\n        <circle className=\"colour-2\" cx=\"-20\" cy=\"20\" r=\"7\" />\n        <circle className=\"colour-1\" cx=\"20\" cy=\"20\" r=\"7\" />\n        <circle className=\"colour-2\" cx=\"20\" cy=\"-20\" r=\"7\" />\n        <circle className=\"colour-3\" cx=\"0\" cy=\"0\" r=\"7\" />\n    </g>\n</g>\n\nconst ColourGraphIcon2 = () => <g>\n    <g className=\"graph-edges edge-outline\">\n        <path d=\"M-32 -16h64v32h-64z\" fill=\"none\" />\n        <line x1=\"0\" y1=\"-16\" x2=\"0\" y2=\"16\" />\n        <line x1=\"-32\" y1=\"-16\" x2=\"0\" y2=\"16\" />\n        <line x1=\"32\" y1=\"-16\" x2=\"0\" y2=\"16\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-32\" cy=\"-16\" r=\"7\" />\n        <circle className=\"colour-2\" cx=\"0\" cy=\"-16\" r=\"7\" />\n        <circle className=\"colour-1\" cx=\"32\" cy=\"-16\" r=\"7\" />\n        <circle className=\"colour-2\" cx=\"32\" cy=\"16\" r=\"7\" />\n        <circle className=\"colour-3\" cx=\"0\" cy=\"16\" r=\"7\" />\n        <circle className=\"colour-2\" cx=\"-32\" cy=\"16\" r=\"7\" />\n    </g>\n</g>\n\nconst ColourGraphIcon3 = () => <g>\n    <g className=\"graph-edges edge-outline\">\n        <path d=\"M32 0L16 27.7h-32L-32 0 -16 -27.71h32z\" />\n        <line x1=\"16\" y1=\"-27.71\" x2=\"16\" y2=\"27.71\" />\n        <line x1=\"-16\" y1=\"-27.71\" x2=\"-16\" y2=\"27.71\" />\n        <line x1=\"-32\" y1=\"0\" x2=\"32\" y2=\"0\" />\n        <line x1=\"-32\" y1=\"0\" x2=\"32\" y2=\"0\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"32\" cy=\"0\" r=\"7\" />\n        <circle className=\"colour-2\" cx=\"16\" cy=\"27.71\" r=\"7\" />\n        <circle className=\"colour-3\" cx=\"-16\" cy=\"27.71\" r=\"7\" />\n        <circle className=\"colour-2\" cx=\"-32\" cy=\"0\" r=\"7\" />\n        <circle className=\"colour-1\" cx=\"-16\" cy=\"-27.71\" r=\"7\" />\n        <circle className=\"colour-3\" cx=\"16\" cy=\"-27.71\" r=\"7\" />\n    </g>\n</g>\n\nexport default [ColourGraphIcon1, ColourGraphIcon2, ColourGraphIcon3];\n","export function sum(arr, func) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += func ? func(arr[i]) : arr[i];\n    }\n    return sum;\n}\n\nexport function shuffle(arr) {\n    for (let i = arr.length; i--; ) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    return arr;\n}\n\n// Get an array of [1, 2, 3, ..., n]\nexport function getArrayOfN(n) {\n    const arr = [];\n    for (let i = 1; i <= n; i++) {\n        arr.push(i)\n    }\n    return arr;\n}\n\n// Get an array of values from calling function <func> n times\nexport function nTimes(n, func) {\n    return Array.from({ length: n }).map(func);\n}\n\n// If arr is not an array return an empty array with that length\n// If arr is a number, then return an array with n items with the given value\n// Allows colours to be a number or an array of numbers\nexport function getArray(arr, value) {\n    if (Array.isArray(arr)) {\n        return arr;\n    }\n    return nTimes(arr, (_) => value);\n}\n\n// Returns an array of <item> repeated <n> times\nexport function getRepeatArray(item, n) {\n    const arr = [];\n    for (let i = 0; i < n; i++) {\n        arr.push(item);\n    }\n    return arr;\n}\n\nexport function getPermutations(arr) {\n    const result = [];\n  \n    const permute = (remainingItems, seq) => {\n        if (remainingItems.length === 0) {\n            result.push(seq)\n        } else {\n            let previousItem = false;\n            for (let i = 0; i < remainingItems.length; i++) {\n                const curr = remainingItems.slice();\n                const next = curr.splice(i, 1);\n                if (next[0] !== previousItem) {\n                    permute(curr, seq.concat(next));\n                    previousItem = next[0];\n                }\n            }\n        }\n   }\n  \n   // Copy arr and then sort it\n   permute(arr.slice().sort(), []);\n  \n   return result;\n}\n\n// Return all possible sequences of colours\n// e.g. ([1, 2], 2) => (1, 1), (1, 2), (2, 1), (2, 2)\nexport function getPermutationsWithReplacement(colours, size) {\n    if (size <= 0) { return [[]]; }\n\n    const result = [];\n    for (let i = 0; i < colours.length; i++) {\n        const firstItem = colours[i];\n        const subSequence = getPermutationsWithReplacement(colours, size - 1);\n        subSequence.forEach((seq) => {\n            result.push([firstItem].concat(seq));\n        });\n    }\n\n    return result;\n}\n\nexport function getCombinationsWithReplacement(arr, size) {\n    if (size === 0) { return [[]]; }\n    const result = [];\n\n    for (let i = 0; i < arr.length; i++) {\n        const firstItem = arr[i];\n        const subSequence = getCombinationsWithReplacement(arr.slice(i), size - 1);\n        subSequence.forEach((seq) => {\n            result.push([firstItem].concat(seq));\n        });\n    }\n\n    return result;\n}\n\n// Click enter or space triggers a given callback\nexport const handleKeyDown = (evt, callback) => {\n    if (evt.key === 'Enter' || evt.keyCode === 32) {\n        callback();\n    }\n};\n\nexport function hashCode(str) {\n    let hash = 0, i, chr;\n    for (i = 0; i < str.length; i++) {\n        chr = str.charCodeAt(i);\n        hash = ((hash << 5) - hash) + chr;\n        hash |= 0;\n    }\n    return hash;\n}","import React from 'react';\nimport { nTimes } from '../../utils/common';\n\n\n// Size of chamber\nconst TOOLBAR_R = 136;\n\n// Angle between button\nconst DELTA_ANGLE = Math.PI / 18;\n\nfunction getPositionsAroundCircle(n, r, baseAngle=0) {\n    const direction = baseAngle < 0 ? 1 : -1;\n    const startAngle = baseAngle - direction * (DELTA_ANGLE * (n - 1) / 2);\n\n    // Array of button positions\n    return nTimes(n, (_, i) => {\n        const angle = startAngle + direction * i * DELTA_ANGLE;\n        return {\n            angle,\n            x: r * Math.cos(angle),\n            y: r * Math.sin(angle)\n        }\n    });\n}\n\nfunction ButtonSet({ buttons, startAngle }) {\n    const r = 8;\n    const positionR = TOOLBAR_R + r;\n    const positions = getPositionsAroundCircle(buttons.length, positionR, startAngle);\n\n    return (\n        <g className=\"toolbar\" role=\"radiogroup\">\n            {\n                buttons.map(({ component, ...props }, index) => {\n                    const position = positions[index];\n                    const Component = component;\n                    props.angle = position.angle;\n                    return (\n                        <Component\n                            key={index}\n                            role=\"radio\"\n                            cx={position.x}\n                            cy={position.y}\n                            r={r}\n                            {...props}\n                        />\n                    );\n                })\n            }\n        </g>\n    );\n}\n\nexport default ButtonSet;\n","import React from 'react';\nimport { handleKeyDown, nTimes } from '../../utils/common';\n\n\nexport const SVGButton = (props) =>\n    <circle\n        r=\"9\"\n        role=\"button\"\n        tabIndex=\"0\"\n        onKeyDown={evt => handleKeyDown(evt, props.onClick)}\n        {...props} />\n\n// Get an array of dots around the colour button to show how many times we can use it\nconst showColourCounter = (n, colour, x, y, angle, r) => {\n    if (!n) { return null; }\n    const dAngle = Math.PI * 2 / (3 * n);\n    angle += dAngle * (n - 1) / 2;\n\n    return nTimes(n, (_, index) => (\n        <circle\n            key={index}\n            className={`fill-${ colour }`}\n            r={r * 0.3}\n            cx={x + (r * 1.6) * Math.cos(angle - index * dAngle)}\n            cy={y + (r * 1.6) * Math.sin(angle - index * dAngle)}\n        />\n    ));\n}\n\nexport const ColourButton = ({\n    colour,\n    count,\n    angle,\n    puzzle,\n    ...props,\n}) => {\n    const selectedColour = puzzle.state.selectedColour;\n    const setColour = () => puzzle.setState({ selectedColour: colour });\n\n    const button = (\n        <SVGButton\n            className={`colour-palette colour-${ colour }`}\n            aria-checked={selectedColour === colour}\n            r=\"8\"\n            onClick={setColour}\n            {...props}\n        />\n    );\n\n    if (count > 0) {\n        return (\n            <g key={colour}>\n                { button }\n                { showColourCounter(count, colour, props.cx, props.cy, angle, props.r) }\n         </g>\n        );\n    } else {\n        return button;\n    }\n};\n\nexport const Button = (props) =>\n    <svg viewBox=\"-15 -15 31 31\">\n        <SVGButton r=\"9\" {...props} />\n    </svg>\n","import React from 'react';\n\nimport ButtonSet from './ButtonSet';\nimport { SVGButton, ColourButton } from './Button';\n\n\nfunction ColourToolbar({ puzzle, colours, clearPuzzle, startAngle }) {\n    const buttons = colours.map((colourCount, index) => ({\n        component: ColourButton,\n        colour: index + 1,\n        count: colourCount,\n        puzzle,\n    }));\n\n    if (clearPuzzle) {\n        buttons.push({\n            component: SVGButton,\n            key: \"clear-button\",\n            color: \"white\",\n            className: \"colour-palette\",\n            onClick: clearPuzzle\n        });\n    }\n\n    return <ButtonSet buttons={buttons} startAngle={startAngle} />;\n}\n\nexport default ColourToolbar;\n","import React from 'react';\n\nimport ButtonSet from './ButtonSet';\nimport { SVGButton } from './Button';\n\n\nfunction PuzzlePreviewToolbar({ puzzle, startAngle }) {\n    const puzzles = puzzle.props.puzzles;\n    const buttons = puzzles.map((_, index) => {\n        let className = 'puzzle-preview';\n        let onClick;\n        if (index === puzzle.state.index) {\n            className += ' selected';\n        } else if (index <= puzzle.state.maxIndex) {\n            className += ' puzzle-done';\n            onClick = () => puzzle.getPuzzle(index);\n        }\n        return {\n            component: SVGButton,\n            color: \"white\",\n            className,\n            puzzle,\n            onClick,\n        };\n    });\n\n    return <ButtonSet buttons={buttons} startAngle={startAngle} />;\n};\n\nexport default PuzzlePreviewToolbar;\n","import React from 'react';\nimport { withRouter } from 'react-router';\nimport { parse } from 'query-string';\n\nimport { getArray } from '../utils/common';\nimport ColourToolbar from './Toolbars/ColourToolbar';\nimport PuzzlePreviewToolbar from './Toolbars/PuzzlePreviewToolbar';\nimport { Button } from './Toolbars/Button';\n\nimport './puzzle.css';\nimport './puzzleChamber.css';\n\n\nconst COLOURS = [\n    'rgb(170, 170, 170)',\n    'rgb(20, 146, 196)',\n    'rgb(196, 20, 96)',\n    'rgb(20, 198, 96)',\n    'rgb(220, 220, 20)',\n];\n\nclass PuzzlePage extends React.Component {\n    constructor(props) {\n        super(props);\n   \n        const queryString = parse(props.location.search);\n        const index = parseInt(queryString.q) || 0;\n\n        this.state = {\n            index,\n            maxIndex: index,\n            solved: false,\n            selectedColour: null,\n        }\n\n        this.clear = this.clear.bind(this);\n        this.update = this.update.bind(this);\n        this.getPuzzle = this.getPuzzle.bind(this);\n        this.nextPuzzle = this.nextPuzzle.bind(this);\n        this.backToMenu = this.backToMenu.bind(this);\n    }\n\n    componentDidMount() {\n        // Load the first puzzle\n        this.getPuzzle(this.state.index);\n    }\n\n    getPuzzle(index) {\n        this.setState({ index });\n        const { getPuzzleObject, puzzles } = this.props;\n        const getSolutionObject = this.props.getSolutionObject || (puzzle => puzzle);\n        const puzzle = puzzles[index];\n\n        // If colourPalette is a number then convert it into an array of -1s\n        // to indicate that each colour can be used infinitely\n        const colourPalette = getArray(this.props.colourPalette || puzzle.colourPalette, -1);\n\n        if (puzzle) {\n            this.setState({\n                puzzle: getPuzzleObject(puzzle),\n                solution: getSolutionObject(puzzle),\n                clearButton: puzzle.clearButton,\n                colourPalette,\n            });\n        }\n    }\n\n    nextPuzzle() {\n        const nextState = this.state.index + 1;\n        const maxIndex = Math.max(nextState, this.state.maxIndex);\n        this.setState({\n            maxIndex,\n            solved: false,\n            selectedColour: null\n        });\n        this.getPuzzle(nextState);\n    }\n\n    backToMenu() {\n        this.props.history.push(\"/\")\n    }\n\n    clear() {\n        this.getPuzzle(this.state.index);\n    }\n\n    // Child element has updated so evaluate to see if puzzle has been solved\n    update() {\n        const { puzzle, solution } = this.state;\n        const solved = this.props.evaluate(puzzle, solution);\n        this.setState({ puzzle, solved });\n    }\n\n    getNextPuzzleButton() {\n        // Only show button if the puzzle has been solved\n        if (!this.state.solved) { return null; }\n\n        if (this.state.index < this.props.puzzles.length - 1) {\n            // Button to go to the next puzzle\n            return <div className=\"menu-button next-puzzle-button\" aria-label=\"Next puzzle\">\n                <Button onClick={this.nextPuzzle}/>\n            </div>\n        } else {\n            // Button to go back to the home page\n            return <div className=\"menu-button next-puzzle-button\" aria-label=\"Puzzle completed\" role=\"link\">\n                <Button onClick={this.backToMenu}/>\n            </div>\n        }\n    }\n\n    render() {\n        const { index, puzzle, selectedColour } = this.state;\n        if (!puzzle) { return null; }\n\n        const colourPalette = this.state.colourPalette || this.props.colourPalette;\n        const clearPuzzle = (this.state.clearButton || this.props.clearButton) ? this.clear : null;\n\n        // Determine what the selected colour is if we have selected one\n        const style = {\n            color: COLOURS[selectedColour || 0]\n        };\n        const className = selectedColour ? \"colour-selected\" : \"\";\n\n        let selectColourIndicator = \"selected-colour-indicator\";\n        if (selectedColour) {\n            selectColourIndicator += ` colour-${selectedColour}`;\n        }\n\n        return <main>\n            <nav>\n                <div className=\"menu-button back-button\" aria-label=\"Back to menu\" role=\"link\">\n                    <Button onClick={this.backToMenu}/>\n                </div>\n\n                { this.getNextPuzzleButton() }\n            </nav>\n\n            <svg id=\"puzzle-chamber\" viewBox=\"-128 -128 256 256\" preserveAspectRatio=\"xMidYMid meet\">\n                <defs>\n                    <filter id=\"shadow-filter\">\n                        <feOffset result=\"offOut\" in=\"SourceAlpha\" dx=\"2\" dy=\"2\"/>\n                        <feGaussianBlur result=\"blurOut\" in=\"offOut\" stdDeviation=\"5\" />\n                        <feBlend in=\"SourceGraphic\" in2=\"blurOut\" mode=\"normal\" />\n                    </filter>\n                    <filter id=\"glow-filter\" x=\"-250%\" y=\"-250%\" width=\"500%\" height=\"500%\">\n                        <feMorphology in=\"mask\" result=\"dilated\" operator=\"dilate\" radius=\"1\" />\n                        <feGaussianBlur stdDeviation=\"3\" result=\"colouredBlur\" />\n                        <feMerge>\n                            <feMergeNode in=\"coloredBlur\"/>\n                            <feMergeNode in=\"SourceGraphic\"/>\n                        </feMerge>\n                    </filter>\n                </defs>\n\n                <rect className=\"background\" x=\"-200\" y=\"-200\" width=\"400\" height=\"400\" />\n\n                <g id=\"puzzle\" key={index} className={className} style={style}>\n                    { this.props.displayPuzzle(puzzle, this) }\n                </g>\n\n                <circle id=\"chamber-window\" r=\"212\" />\n                <circle className={selectColourIndicator} r=\"132\" />\n\n                <ColourToolbar \n                    puzzle={this}\n                    colours={colourPalette}\n                    clearPuzzle={clearPuzzle}\n                    selectedColour={selectedColour}\n                    startAngle={-Math.PI}\n                />\n\n                <PuzzlePreviewToolbar puzzle={this} />\n\n            </svg>\n        </main>\n    }\n};\n\nexport default withRouter(PuzzlePage);\n","import React from 'react';\n\n\nexport const Line = ({ className, x1, y1, x2, y2 }) =>\n    <line className={className} x1={x1} y1={y1} x2={x2} y2={y2} />\n","import { handleKeyDown } from '../../utils/common';\n\n\n// Given a node, return props to make it colourable\nexport function isColourable(item, chamber, {className=\"\", onColour=null}={}) {\n    if (item.colour) {\n        className += ` fill-${item.colour}`;\n    } else if (item.inactive) {\n        className += \" inactive\";\n    } else {\n        className += \" no-fill\";\n    }\n\n    if (item.fixed || item.inactive) {\n        return { className };\n    }\n\n    className += \" colourable\";\n\n    const colour = chamber.state.selectedColour;\n    const colourUses = chamber.state.colourPalette.slice();\n\n    const colourThisItem = () => {\n        if (!colour) { return; }\n\n        if (item.colour === colour) {\n            // Remove exisiting colour\n            item.colour = 0;\n            colourUses[colour - 1]++;\n        } else if (colourUses[colour - 1] !== 0) {\n            // If item is already coloured, add that colour back\n            if (item.colour) {\n                colourUses[item.colour - 1]++;\n            }\n            // Colour item\n            item.colour = colour;\n            colourUses[colour - 1]--;\n        }\n\n        if (onColour) { onColour(item); }\n        chamber.setState({ colourPalette: colourUses })\n        chamber.update();\n    };\n\n    return {\n        className,\n        tabIndex: 0,\n        onClick: colourThisItem,\n        onKeyDown: (evt) => handleKeyDown(evt, colourThisItem)\n    };\n}\n","/****************************************************************\n * Graph object consisting of node and edges.\n * Both nodes and edges may be coloured or colourable.\n*****************************************************************/\nimport React from 'react';\nimport { Line } from './Primitives';\nimport { isColourable } from '../utils/isColourable';\n\n\n// A connection between two nodes\nfunction Edge(props) {\n    if (props.hidden) { return null; }\n    const flashing = props.flashing ? 'flashing' : '';\n    const edgeColour = props.colour ? `stroke-${ props.colour }`: '';\n    return (\n        <g className={flashing}>\n            <Line className=\"edge-outline\" {...props} />\n            <Line className={edgeColour} {...props} />\n        </g>\n    );\n}\n\nfunction ColourableEdge({ chamber, onColour, edge }) {\n    const dx = edge.x2 - edge.x1;\n    const dy = edge.y2 - edge.y1;\n    const angle = Math.atan2(dy, dx) * 180 / Math.PI;\n    const length = Math.sqrt(dx * dx + dy * dy);\n\n    return (\n        <rect\n            transform={`translate(${edge.x1} ${edge.y1}) rotate(${angle})`}\n            y={-3}\n            width={length}\n            height={6}\n            {...isColourable(edge, chamber, { onColour })}\n        />\n    );\n}\n\n// Display a graph in which the nodes have the potential to be coloured\nexport const Graph = ({ edges=[], nodes=[], chamber, onColour }) =>\n    <g className=\"graph\">\n        <g className=\"graph-edges\">\n            { edges.map((edge, i) => <Edge key={i} {...edge} /> )}\n        </g>\n        <g className=\"graph-nodes\">\n            { nodes.map((node, i) => \n                <g key={i} transform={`translate(${ node.x } ${ node.y })`}>\n                    <circle className=\"node-outline\" r={node.r} />\n                    <circle r={node.r} {...isColourable(node, chamber, { onColour })} />\n                </g>\n            )}\n        </g>\n    </g>\n\n// A graph where the edges can be selected\nexport const EdgeGraph = ({ edges=[], nodes=[], chamber, onColour }) => {\n    return <g className=\"graph\">\n        <g className=\"graph-edges\">\n            { edges.map((edge, i) => <ColourableEdge key={i} chamber={chamber} onColour={onColour} edge={edge} />) }\n        </g>\n        <g className=\"graph-nodes\">\n            { nodes.map((node, i) => {\n                let className = node.colour ? `fill-${node.colour}` : 'no-fill';\n                if (node.current) { className += ' current'; }\n                return (\n                    <g key={i} transform={`translate(${node.x} ${node.y})`}>\n                        <circle className=\"node-outline\" r={node.r} />\n                        <circle className={className} r={node.r} />\n                    </g>\n                );\n            }\n            )}\n        </g>\n    </g>\n}\n\nexport const ColourableGraph = (graph, chamber) => <Graph {...graph} chamber={chamber} />\n\nexport const ColourableEdgeGraph = (graph, chamber) => <EdgeGraph {...graph} chamber={chamber} />\n\n// Colour an Euler path - visiting every nodes once\n// A colourable graph where one node starts coloured and you can colour its edges\n// Colouring an edge will colour the next node and let you colour its edges\nexport const ColourableHamilitonianPath = (graph, chamber) => {\n    const colour = chamber.state.selectedColour;\n\n    const updateNodes = () => {\n        if (!graph.path) { return; }\n\n        const selectedNode = graph.path[graph.path.length - 1];\n        if (selectedNode) {\n            graph.nodes.forEach(node => {\n                if (node === selectedNode) {\n                    node.inactive = false;\n                } else if (node.edges[selectedNode.index] && !node.colour) {\n                    // Nodes that are next to the selected node and aren't coloured can be coloured\n                    node.inactive = false;\n                } else {\n                    node.inactive = true;\n                }\n            });\n        } else {\n            // No nodes left in the path, so all nodes are active\n            graph.nodes.forEach(node => node.fixed = false);\n        }\n    }\n\n    const onColour = selectedNode => {\n        const nodeIndex = selectedNode.index;\n\n        if (selectedNode.colour) {\n            selectedNode.current = true;\n\n            if (!graph.path) { graph.path = []; }\n\n            // Colour the edge of the path\n            const previousNode = graph.path.slice(-1)[0];\n            if (previousNode) {\n                previousNode.edges[nodeIndex].colour = colour;\n            }\n\n            // Add new node to the path\n            graph.path.push(selectedNode);\n        } else {\n            // Remove the node we clicked on\n            graph.path.pop();\n            const previousNode = graph.path.slice(-1)[0];\n            if (previousNode) {\n                previousNode.edges[nodeIndex].colour = 0;\n            }\n            // The active node is now the previous node in the path\n            selectedNode = previousNode;\n        }\n\n        updateNodes();\n    };\n\n    updateNodes();\n    return <Graph {...graph} chamber={chamber} onColour={onColour} />\n};\n\n// Colour an Euler path - visiting every edge once, but vertices more than once\n// A colourable graph where you start by colouring one node, then and you can colour its edges\n// Colouring an edge will colour the next node and let you colour its edges\nexport function ColourableEulerPath(graph, chamber) {\n    // Inactive edges are those not next to the current nodes\n    function labelInactiveEdges() {\n        graph.edges.forEach(edge => {\n            edge.inactive = (!edge.node1.current && !edge.node2.current) ||\n                (edge.colour && edge !== graph.path[graph.path.length - 1]);\n        });\n    }\n\n    // Function that updates graph state when an edge is coloured,\n    // making the next node in the path current and activating the others.\n    const onColourEdge = edge => {\n        // Update path depending on whether we are colouring or decolouring an edge\n        if (edge.colour) {\n            graph.path.push(edge);\n        } else {\n            graph.path.pop();\n        }\n\n        if (edge.node1.current) {\n            edge.node1.colour = edge.colour;\n            edge.node1.current = false;\n            edge.node2.current = true;\n        } else {\n            edge.node2.colour = edge.colour;\n            edge.node2.current = false;\n            edge.node1.current = true;\n        }\n        labelInactiveEdges();\n    };\n\n    const onColourNode = node => {\n        node.colour = 0;\n        node.current = true;\n        graph.path = [];\n        labelInactiveEdges();\n    };\n\n    if (graph.nodes.some(node => node.current)) {\n        return <EdgeGraph {...graph} chamber={chamber} onColour={onColourEdge} />;\n    } else {\n        // Need to select a node first\n        return <Graph {...graph} chamber={chamber} onColour={onColourNode} />;\n    }\n}\n\n// A colourable graph, where colouring a node also colours any adjacent nodes\nexport const DominatingSet = (graph, chamber) => {\n    const onColour = node => {\n        const nodeIndex = node.index;\n        const targetNode = graph.nodes[nodeIndex];\n        const neighbours = Object.keys(targetNode.edges);\n\n        if (targetNode.colour) {\n            // Colour neighbours\n            neighbours.forEach(n => {\n                // Colour node if it is not coloured\n                if (!graph.nodes[n].colour) {\n                    graph.nodes[n].colour = 2;\n                }\n                // Colour edge\n                targetNode.edges[n].active = 2;\n            })\n        } else {\n            // Remove colour from neighbour unless they are next to other coloured nodes\n            neighbours.forEach(n => {\n                targetNode.edges[n].active = 0;\n                const node = graph.nodes[n];\n                if (node.colour === 2) {\n                    // Check neighbours for nodes that are coloured\n                    if (Object.keys(node.edges).every(n2 => graph.nodes[n2].colour !== 1)) {\n                        node.colour = 0;\n                    } \n                } else if (node.colour === 1) {\n                    // This node is next to a different coloured node, so colour with colour 2\n                    targetNode.colour = 2;\n                    targetNode.edges[n].active = 2;\n                }\n            })\n        }\n    }\n\n    return <Graph {...graph} chamber={chamber} onColour={onColour} />\n};\n","import { getArray } from '../../utils/common';\n\n\nexport function getPointsOnACircle(n, {r=1, offsetAngle=0, dx=0, dy=0}={}) {\n    const points = [];\n    const dAngle = 2 * Math.PI / n;\n    let angle = (offsetAngle * Math.PI / 180 || 0) - 0.5 * dAngle;\n\n    for (let i = 0; i < n; i++) {\n        points.push([\n            dx + r * Math.sin(angle),\n            dy + r * Math.cos(angle),\n        ]);\n        angle += dAngle;\n    }\n\n    return points;\n}\n\nexport function getNodesOnCircle(colours, {r=1, offsetAngle=0, dx=0, dy=0}={}) {\n    colours = getArray(colours);\n    const n = colours.length;\n    const points = getPointsOnACircle(n, { r, offsetAngle, dx, dy });\n\n    // Combine coordinates with colours\n    const nodes = points.map(([x, y], i) => [x, y, colours[i]]);\n\n    return nodes;\n}\n\nexport function getGraphBBox({ nodes }) {\n    if (nodes.length === 0) {\n        return { x1: 0, x2: 0, y1: 0, y2: 0 };\n    }\n\n    let x1 = nodes[0].x - nodes[0].r;\n    let x2 = nodes[0].x + nodes[0].r;\n    let y1 = nodes[0].y - nodes[0].r;\n    let y2 = nodes[0].y + nodes[0].r;\n\n    for (let i = 0; i < nodes.length; i++) {\n        const node = nodes[i];\n        if (node.x - node.r < x1) {\n            x1 = node.x - node.r;\n        }\n        if (node.x + node.r > x2) {\n            x2 = node.x + node.r;\n        }\n        if (node.y - node.r < y1) {\n            y1 = node.y - node.r;\n        }\n        if (node.y + node.r > y2) {\n            y2 = node.y + node.r;\n        }\n    }\n\n    return { x1, y1, width: x2 - x1, height: y2 - y1 };\n}\n\n// Given a <start> and <stop> value, return an array of arrays,\n// where each sub-array is a pair of consequtive values between <start> and <stop>\n// e.g. (3, 6) => [[3, 4], [4, 5], [5, 6]]\nexport function getLineOfEdges(start, stop) {\n    if (stop === undefined) {\n        stop = start - 1;\n        start = 0;\n    }\n\n    var edges = [];\n    for (var i = start; i < stop; i++) {\n        edges.push([i, i + 1]);\n    }\n\n    return edges;\n}\n\nexport function getLoopOfEdges(start, stop) {\n    if (stop === undefined) {\n        stop = Math.max(0, start - 1);\n        start = 0;\n    }\n\n    const edges = getLineOfEdges(start, stop);\n    // Link start to stop, unless they are the same or one different (a linear graph of 2)\n    if (stop - start > 1) {\n        edges.push([stop, start]);\n    }\n    return edges;\n}\n\nexport function connectNodeToNodes(node1, nodes) {\n    return nodes.map(node => [node1, node]);\n}\n\n// Given a graph, add a node along each existing edge\nexport function subdivideGraph(graph) {\n    const newEdges = [];\n    const nodes = graph.nodes;\n    let n = nodes.length;\n\n    graph.edges.forEach(([n1, n2]) => {\n        const node1 = nodes[n1];\n        const node2 = nodes[n2];\n        nodes.push([(node1[0] + node2[0]) / 2, (node1[1] + node2[1]) / 2, node1[2]]);\n        newEdges.push([n1, n], [n2, n]);\n        n++;\n    })\n\n    graph.edges = newEdges;\n\n    return graph;\n}\n\nfunction getRegularPolygonGraph(size, colours, scale=1) {\n    // Can pass in a single colour to set all nodes to that colour\n    if (!Array.isArray(colours)) {\n        colours = Array.from({ length: size }).map(_ => colours);\n    }\n\n    return {\n        nodes: getNodesOnCircle(colours, { r: scale }),\n        edges: getLoopOfEdges(size)\n    };\n}\n\nexport function triangleGraph(colours, scale=1) {\n    return getRegularPolygonGraph(3, colours, scale);\n}\n\nexport function squareGraph(colours, scale=1) {\n    return getRegularPolygonGraph(4, colours, scale);\n}\n","import { nTimes, getArray } from '../../utils/common';\nimport {\n    getLineOfEdges,\n    getLoopOfEdges,\n    getNodesOnCircle,\n    subdivideGraph,\n} from './graphUtils';\n\n\nexport function linearGraph(colours, params={}) {\n    const { scale=1, colour, ...props } = params;\n    colours = getArray(colours, colour);\n    \n    const n = colours.length;\n    const startX = (1 - n) * scale / 2;\n    const nodes = colours.map((colour, i) => [startX + i * scale, 0, colour])\n    const edges = getLineOfEdges(n);\n\n    return Object.assign(props, { nodes, edges });\n}\n\nexport function loopGraph(colours, params={}) {\n    const { scale=1, colour, ...props } = params;\n    colours = getArray(colours, colour);\n\n    const nodes = getNodesOnCircle(colours, { r: scale });\n    const edges = getLoopOfEdges(colours.length);\n\n    return Object.assign(props, { nodes, edges });\n}\n\nexport function gridGraph(nColumns, nRows, params={}) {\n    const scale = params.scale || 1;\n    const nodes = [];\n    const edges = [];\n\n    const startX = -scale * (nColumns - 1) / 2;\n    const startY = -scale * (nRows - 1) / 2;\n\n    let nodeIndex = 0;\n    for (let i = 0; i < nColumns; i++) {\n        for (let j = 0; j < nRows; j++) {\n            nodes.push([\n                startX + i * scale,\n                startY + j * scale,\n            ]);\n\n            if (i) {\n                edges.push([nodeIndex, nodeIndex - nRows]);\n            }\n            if (j) {\n                edges.push([nodeIndex, nodeIndex - 1]);\n            }\n            nodeIndex++;\n        }\n    }\n\n    return { nodes, edges };\n}\n\nexport function starGraph(colours, params={}) {\n    const { scale=1, colour, ...props } = params;\n    colours = getArray(colours, colour);\n\n    const firstNode = colours.shift();\n    const nodes = [[0, 0, firstNode]].concat(getNodesOnCircle(colours, { r: scale }));\n    const edges = colours.map((_, index) => [0, index + 1]);\n\n    return Object.assign(props, { nodes, edges });\n}\n\nexport function spokeGraph(colours, params={}) {\n    const graph = starGraph(colours, params);\n    graph.edges = graph.edges.concat(getLoopOfEdges(1, colours - 1))\n    return graph;\n}\n\n// AKA helm graph\n// A loop graph, with a spoke coming out of every vertex\n// Colours can be an integer that determines the nodes in the inner loop\n// Or an array of colours for all nodes\nexport function sunletGraph(colours, params={}) {\n    let n, innerColours, outerColours;\n\n    if (Array.isArray(colours)) {\n        n = colours.length / 2;\n        innerColours = colours.slice(0, n);\n        outerColours = colours.slice(n);\n    } else {\n        // colours is the number of nodes, so get two arrays of that length, full of 1s\n        n = colours;\n        innerColours = getArray(n, 1);\n        outerColours = getArray(n, 1);\n    }\n\n    // Determine radius of inner shape so its side length is the same as the remaining radial spoke length\n    const scale = params.scale || 1;\n    const p = 1 / (1  + 2 * Math.sin(Math.PI / n));\n    params.scale = scale * p;\n\n    const graph = loopGraph(innerColours, params);\n    graph.nodes = graph.nodes.concat(getNodesOnCircle(outerColours, { r: scale }));\n    graph.edges = graph.edges.concat(nTimes(n, (_, index) => [index, index + n]));\n\n    return graph;\n}\n\nexport function prismGraph(n, params={}) {\n    const graph = sunletGraph(n, params);\n    graph.edges = graph.edges.concat(getLoopOfEdges(n, 2 * n - 1));\n    return graph;\n}\n\nexport function antiPrismGraph(n, params={}) {\n    const p = 1 / (1  + 2 * Math.sin(Math.PI / n));\n    const scale = params.scale || 1;\n    params.scale = scale * p;\n\n    const graph = loopGraph(n, params);\n    graph.nodes = graph.nodes.concat(getNodesOnCircle(n, { r: scale, offsetAngle: 180 / n }));\n    graph.edges = graph.edges.concat(nTimes(n, (_, index) => [index, n + index]));\n    graph.edges = graph.edges.concat(nTimes(n, (_, index) => [index, n + ((index + n - 1) % n)]));\n    graph.edges = graph.edges.concat(getLoopOfEdges(n, 2 * n - 1));\n    return graph;\n}\n\nexport function gearGraph(n, params={}) {\n    const graph = subdivideGraph(loopGraph(n, params));\n    graph.nodes.push([0, 0, undefined]);\n    graph.edges = graph.edges.concat(nTimes(n, (_, index) => [index, 2 * n]))\n    return graph;\n}\n\nfunction getRegularPolygonGraph(size, colours, scale=1) {\n    // Can pass in a single colour to set all nodes to that colour\n    if (!Array.isArray(colours)) {\n        colours = Array.from({ length: size }).map(_ => colours);\n    }\n\n    return {\n        nodes: getNodesOnCircle(colours, { r: scale }),\n        edges: getLoopOfEdges(size)\n    };\n}\n\nexport function triangleGraph(colours, scale=1) {\n    return getRegularPolygonGraph(3, colours, scale);\n}\n\nexport function squareGraph(colours, scale=1) {\n    return getRegularPolygonGraph(4, colours, scale);\n}\n","/***\n * These functions take the raw puzzle data and return an object that can used to\n * display the puzzle and determine when the correct answer is found\n***/\n\nimport { shuffle, getCombinationsWithReplacement } from '../../utils/common';\nimport { linearGraph, loopGraph } from './graphTypes';\n\n// Given arrays of node coordinates and edge coordinates, return an object of nodes and edges\nexport function getGraphObject({ nodes=[], edges=[], size=32, r=8, colour }) {\n    const nodeObjects = nodes.map(([x, y, nodeColour], index) => ({\n        r,\n        index,\n        x: x * size,\n        y: y * size,\n        colour: nodeColour || colour,\n        fixed: Boolean(nodeColour || colour),\n        edges: {}\n    }));\n\n    const edgeObjects = edges.map(([n1, n2]) => {\n        const node1 = nodeObjects[n1];\n        const node2 = nodeObjects[n2];\n        const edge = {\n            node1,\n            node2,\n            x1: node1.x,\n            y1: node1.y,\n            x2: node2.x,\n            y2: node2.y\n        };\n\n        // Edges map another node to the edge object\n        node1.edges[node2.index] = edge;\n        node2.edges[node1.index] = edge;\n\n        return edge;\n    });\n\n    return {\n        nodes: nodeObjects,\n        edges: edgeObjects\n    };\n}\n\n// Given arrays of node coordinates and edge coordinates, return two objects of nodes and edges,\n// one includes the node colours and one is empty\nexport function getGraphAndUncolouredCopy({ nodes=[], edges=[], size=32, r=8 }) {\n    const target = getGraphObject({ nodes, edges, size, r });\n\n    // Remove the colours from the nodes\n    const blankNodes = nodes.map(([x, y]) => [x, y]);\n    const blankGraph = getGraphObject({ nodes: blankNodes, edges, size, r });\n\n    return { target, blank: blankGraph };\n}\n\nexport function getMapObject({ regions=[], connections=[], size=1 }) {\n    const regionObjects = regions.map(([x, y, width, height]) => ({\n        x: (x - width / 2) * size,\n        y: (y - height / 2) * size,\n        width: width * size,\n        height: height * size,\n    }));\n\n    const connectionObjects = connections.map(([n1, n2]) => ({\n        node1: regionObjects[n1],\n        node2: regionObjects[n2],\n    }));\n\n    // Create a graph of the map in order to evaluate the solution\n    return {\n        regions: regionObjects,\n        connections: connectionObjects\n    };\n}\n\n// Convert a number to n object with a colour attribute equal to that number and a fixed attribute\nconst colourNumberToColourObject = colour => ({\n    colour,\n    fixed: colour > 0\n});\n\nexport function getSequenceObject({ pattern, answer }) {\n    //  Get a sequence of node objects\n    const sequence = pattern.map(colourNumberToColourObject);\n\n    // Target sequence is the starting sequence with any 0s replaced by the answer items\n    let n = 0;\n    const target = pattern.map(colour => {\n        if (colour > 0) {\n            return { colour };\n        } else {\n            return { colour: answer[n++] };\n        }\n    });\n\n    return { sequence, target };\n}\n\nexport function getCombinationObject({ pattern, items }) {\n    //  Get an array of linear graphs\n    const sequences = pattern.map(sequence => getGraphObject(linearGraph(sequence)));\n\n    // Find all combinations based on the length of the first item in the pattern\n    const combinations = getCombinationsWithReplacement(items, pattern[0].length);\n    const combinationSet = new Set(combinations.map(combination => combination.join('-')))\n\n    return { sequences, target: combinationSet };\n}\n\n// Given an array of arrays of numbers, return an array of graph objects\n// These can be linear graphs or looped graphs\nexport function getGraphSet({ graphs, loop }) {\n    const graphType = loop ? loopGraph : linearGraph;\n    const sequence = graphs.map(graph => getGraphObject(graphType(graph)));\n    return { sequence };\n}\n\n// TODO: Combine with getGraphSet\nexport function getGraphSequence({ sequence, answer }) {\n    const graphs = [];\n    const target = [];\n\n    let n = 0;\n    sequence.forEach(graph => {\n        if (graph) {\n            graphs.push(getGraphObject(graph));\n            target.push(getGraphObject(graph));\n        } else {\n            // Target sequence is the starting sequence with any nulls replaced by the answer graphs\n            const answerGraph = getGraphObject(answer[n]);\n            target.push(answerGraph);\n            \n            // Displayed sequence show answer as a blank graph\n            const blankGraph = getGraphObject(answer[n]);\n            blankGraph.nodes.forEach(node => {\n                node.fixed = false;\n                node.colour = 0;\n            });\n\n            graphs.push(blankGraph);\n            target.push(answerGraph);\n            n++;\n        }\n    });\n\n    return { sequence: graphs, target };\n}\n\n// Return an array of category object which have a colour, and an object to display\nexport function getCategoryObjects({ categories, randomRotate, itemProps={} }) {\n    const categoryObjects = [];\n    \n    categories.forEach(category => {\n        const copies = category.copies || 1;\n        const item = Object.assign(category.item, itemProps);\n\n        for (let i = 0; i < copies; i++) {\n            categoryObjects.push({\n                category: category.type,\n                colour: category.colour || 0,\n                object: item,\n                rotate: randomRotate ? Math.floor(Math.random() * 12) * 30 : 0\n            });\n        }\n    });\n\n    return shuffle(categoryObjects);\n}\n","// Test whether all items are bigger than 0 or have an attrubute with value bigger than 0\nexport const allItemsHaveValue = (items=[], attr) =>\n    attr ?\n        items.every(item => item[attr] > 0) :\n        items.every(item => item > 0);\n\nexport const allItemsColoured = (items=[]) => allItemsHaveValue(items, 'colour');\n\nexport const extractAttribute = (items=[], attr) => items.map(item => item[attr]);\n\n// Convert a graph into a string of node colours, separates by hypens, e.g. 1-1-2\nconst graphToStringOfNodes = graph => extractAttribute(graph.nodes, 'colour').join('-');\n\nconst graphToStringOfSortedNodes = graph => extractAttribute(graph.nodes, 'colour').sort().join('-');\n\n// Check that two sets of sets contain sam set of sets\n// e.g. ((1, 1), (1, 2)) = ((2, 1), (1,1))\nexport function setOfSetsEqual({ sequence }, targetSet) {\n    const sequenceSet = new Set(sequence.map(graphToStringOfSortedNodes));\n\n    // Check the this set of sequences matches the set of permutations\n    return (sequenceSet.size === targetSet.size)\n        && [...sequenceSet].every(value => targetSet.has(value));\n}\n\n// Check the the given set of sequences matches a set of sequences.\nexport function sequenceSetMatches({ sequence }, targetSet) {\n    // Check all the sequences are fully coloured\n    if (!sequence.every(graph => allItemsColoured(graph.nodes))) {\n        return false;\n    }\n\n    // Get a set of sequence values,\n    // where a sequence value is a string of numbers separated by hypens, e.g. 1-2\n    const sequenceSet = new Set(sequence.map(graphToStringOfNodes));\n\n    // Check the this set of sequences matches the set of permutations\n    return (sequenceSet.size === targetSet.size)\n        && [...sequenceSet].every(value => targetSet.has(value));\n};\n\nexport function allGraphsInSequenceAreDifferent(sequence) {\n    const graphStrings = sequence.map(graphToStringOfNodes);\n    const n = graphStrings.length;\n    for (let i = 0; i < n - 1; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (graphStrings[i] === graphStrings[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nexport function allConnectedItemsHaveDifferentColours(cxns=[]) {\n    // Colour any edge that connects two nodes of the same colour\n    let matches = 0;\n    cxns.forEach((cxn) => {\n        if (cxn.node1.colour && cxn.node1.colour === cxn.node2.colour) {\n            cxn.colour = cxn.node1.colour;\n            cxn.flashing = true;\n            matches++;\n        } else {\n            cxn.colour = null;\n            cxn.flashing = false;\n        }\n    });\n    return matches === 0;\n}\n\nexport const graphIsChromatic = ({ nodes, edges }) => \n    allConnectedItemsHaveDifferentColours(edges) &&\n    allItemsColoured(nodes);\n\nexport const sequencesMatch = (seq1, seq2, attr) => {\n    if (seq1.length !== seq2.length) { return false; }\n    for (let i = 0; i < seq1.length; i++) {\n        const value1 = attr ? seq1[i][attr] : seq1[i];\n        const value2 = attr ? seq2[i][attr] : seq2[i];\n        if (value1 !== value2) {\n            return false;\n        }\n    }\n    return true;\n};\n\nexport const sequenceHasNoMatches = (seq1, seq2) => {\n    const n = Math.min(seq1.length, seq2.length);\n\n    for (let i = 0; i < n; i++) {\n        if (seq1[i] === seq2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test whether there is a consistent mapping between the values in one array to the value the other\nexport const sequencesAreEquivalent = (seq1, seq2) => {\n    if (seq1.length !== seq2.length) { \n        return false;\n    }\n\n    const mapping1 = new Map();\n    const mapping2 = new Map();\n\n    for (let i = 0; i < seq1.length; i++) {\n        const value1 = mapping1.get(seq1[i]);\n        const value2 = mapping2.get(seq2[i]);\n\n        if (value1 === undefined) {\n            mapping1.set(seq1[i], seq2[i]);\n        } else if (value1 !== seq2[i]) {\n            return false;\n        }\n\n        if (value2 === undefined) {\n            mapping2.set(seq2[i], seq1[i]);\n        } else if (value2 !== seq1[i]) {\n            return false;\n        }\n        \n    }\n\n    return true;\n};\n\n// Test whether the nodes of two graphs are the same colour\nexport const graphNodesAreSameColour = ({ blank, target }) => \n    allItemsColoured(blank.nodes) &&\n    sequencesMatch(blank.nodes, target.nodes, 'colour');\n\n// Test whether the nodes of two graphs have the same pattern,\n// i.e. there is a consistent mapping from the colours in one graph to the colour in the target\nexport const graphNodesHaveSamePattern = ({ blank, target }) =>\n    allItemsColoured(blank.nodes) &&\n    sequencesAreEquivalent(blank.nodes, target.nodes);\n\nexport const samePatternButDifferent = (seq1, seq2) =>\n    allItemsHaveValue(seq1) &&\n    allItemsHaveValue(seq2) &&\n    sequenceHasNoMatches(seq1, seq2) &&\n    sequencesAreEquivalent(seq1, seq2);\n\n\nexport const graphIsDisjoint = (nodes) => {\n    nodes.forEach(node => node.visited = false);\n    \n    // Begin with the first node\n    const frontier = [nodes[0]];\n    nodes[0].visited = true;\n    let nodeCount = 1;\n\n    while(frontier.length > 0) {\n        const node = frontier.pop();\n        const edges = node.edges;\n\n        for (const nextNodeId in edges) {\n            // If edge not cut and node hasn't been visited\n            if (!edges[nextNodeId].colour) {\n                const nextNode = nodes[nextNodeId];\n                if (!nextNode.visited) {\n                    frontier.push(nextNode)\n                    nextNode.visited = true;\n                    nodeCount++;\n                }\n            }\n        }\n    }\n\n    return nodeCount < nodes.length;\n}","/*\n * Colour all nodes on a graph such that no edges joins two nodes of the same colour.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { ColourableGraph } from '../PuzzleComponents/Graph';\nimport { getGraphObject } from '../utils/loadPuzzle';\nimport { getNodesOnCircle, getLoopOfEdges } from '../utils/graphUtils';\nimport { graphIsChromatic } from '../utils/evaluate';\n\n\nconst puzzles1 = [\n\t{\n\t\tcolourPalette: 1,\n\t\tnodes: [[0, 0]]\n\t}, {\n\t\tcolourPalette: 2,\n\t\tnodes: [[-1, 0], [1, 0]],\n\t\tedges: [[0, 1]],\n\t}, {\n\t\tcolourPalette: 2,\n\t\tnodes: [[-2, 0], [0, 0], [2, 0]],\n\t\tedges: [[0, 1], [1, 2]],\n\t}, {\n\t\tcolourPalette: 3,\n\t\tnodes: getNodesOnCircle(3),\n\t\tedges: getLoopOfEdges(3),\n\t}, {\n\t\tcolourPalette: 2,\n\t\tnodes: getNodesOnCircle(4),\n\t\tedges: getLoopOfEdges(4),\n\t}, {\n\t\tcolourPalette: 3,\n\t\tnodes: getNodesOnCircle(4),\n\t\tedges: getLoopOfEdges(4).concat([[1, 3]]),\n\t}, {\n\t\tcolourPalette: 4,\n\t\tnodes: getNodesOnCircle(4),\n\t\tedges: getLoopOfEdges(4).concat([[1, 3], [0, 2]]),\n\t}, {\n\t\tcolourPalette: 3,\n\t\tnodes: [[0, 0]].concat(getNodesOnCircle(4)),\n\t\tedges: getLoopOfEdges(1, 4).concat([[0, 1], [0, 2], [0, 3], [0, 4]]),\n\t}\n];\n\nconst rectCoords = [[-2, -1], [0, -1], [2, -1], [2, 1], [0, 1], [-2, 1]];\nconst puzzles2 = [\n    {\n        colourPalette: 2,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6),\n    }, {\n        colourPalette: 2,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[1, 4]]),\n    }, {\n        colourPalette: 2,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[0, 3]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[0, 4]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[0, 4], [2, 4]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[0, 4], [1, 4], [2, 4]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: rectCoords,\n        edges: getLoopOfEdges(6).concat([[0, 4], [1, 4], [1, 3]]),\n    }, {\n        colourPalette: 3,\n        scale: 24,\n        nodes: getNodesOnCircle(3).concat(getNodesOnCircle(3, { r: 2, offsetAngle: 60 })),\n        edges: getLoopOfEdges(3).concat([[0, 3], [1, 3], [1, 4], [2, 4], [0, 5], [2, 5]]),\n    }, {\n        colourPalette: 3,\n        scale: 16,\n        nodes: getNodesOnCircle(3).concat(getNodesOnCircle(3, { r: 4, offsetAngle: 60 })),\n        edges: getLoopOfEdges(3)\n            .concat(getLoopOfEdges(3, 5))\n            .concat([[0, 3], [1, 3], [1, 4], [2, 4], [0, 5], [2, 5]]),\n    }\n];\n\n// TODO: Give more colourPalette than required\nconst puzzles3 = [\n    {\n        colourPalette: 2,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6),\n    }, {\n        colourPalette: 2,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[2, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 2], [2, 4]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 2], [2, 4], [0, 4]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[1, 3], [0, 4], [2, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[2, 4], [1, 3], [0, 4], [1, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 3], [1, 4], [2, 5]]),\n    }, {\n        colourPalette: 3,\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[0, 2], [1, 3], [2, 4], [3, 5], [4, 0], [5, 1]]),\n    }\n];\n\nconst puzzles = [puzzles1, puzzles2, puzzles3];\n\nexport const ColourGraph = (n) =>\n    <PuzzlePage\n        puzzles={puzzles[n]}\n        evaluate={graphIsChromatic}\n        getPuzzleObject={getGraphObject}\n        displayPuzzle={ColourableGraph}\n    />\n","import React from 'react';\n\n\nconst HamiltonianPath = () => <g>\n    <g className=\"graph-edges\">\n        <line x1=\"-30\" y1=\"20\" x2=\"0\" y2=\"-32\" />\n\n        <g className=\"colour-1\">\n            <line x1=\"-12\" y1=\"8\" x2=\"0\" y2=\"-12\" />\n            <line x1=\"-12\" y1=\"8\" x2=\"12\" y2=\"8\" />\n            <line x1=\"0\" y1=\"-12\" x2=\"12\" y2=\"8\" />\n            <line x1=\"0\" y1=\"-32\" x2=\"30\" y2=\"20\" />\n            <line x1=\"-30\" y1=\"20\" x2=\"30\" y2=\"20\" />\n            <line x1=\"0\" y1=\"-32\" x2=\"0\" y2=\"-12\" />\n        </g>\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-12\" cy=\"8\" r=\"6\" />\n        <circle className=\"colour-1\" cx=\"0\" cy=\"-12\" r=\"6\" />\n        <circle className=\"colour-1\" cx=\"12\" cy=\"8\" r=\"6\" />\n\n        <circle className=\"colour-1\" cx=\"-30\" cy=\"20\" r=\"6\" />\n        <circle className=\"colour-1\" cx=\"0\" cy=\"-32\" r=\"6\" />\n        <circle className=\"colour-1\" cx=\"30\" cy=\"20\" r=\"6\" />\n    </g>\n</g>\n\nconst DominatingSet = () => <g>\n    <g className=\"graph-edges\">\n        <path className=\"colour-none\" d=\"M-20 -20h40v40h-40z\" />\n\n        <g className=\"colour-1\">\n            <line x1=\"-20\" y1=\"-20\" x2=\"20\" y2=\"20\" />\n            <line x1=\"-20\" y1=\"20\" x2=\"20\" y2=\"-20\" />\n        </g>\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-2\" cx=\"-20\" cy=\"-20\" r=\"6\" />\n        <circle className=\"colour-2\" cx=\"-20\" cy=\"20\" r=\"6\" />\n        <circle className=\"colour-2\" cx=\"20\" cy=\"20\" r=\"6\" />\n        <circle className=\"colour-2\" cx=\"20\" cy=\"-20\" r=\"6\" />\n        <circle className=\"colour-1\" cx=\"0\" cy=\"0\" r=\"6\" />\n    </g>\n</g>\n\nconst MinimumCut = () => <g>\n    <g className=\"graph-edges\">\n        <line x1=\"-32\" y1=\"16\" x2=\"-32\" y2=\"-16\" />\n        <line x1=\"-32\" y1=\"16\" x2=\"-12\" y2=\"0\" />\n        <line x1=\"-32\" y1=\"-16\" x2=\"-12\" y2=\"0\" />\n        <line x1=\"32\" y1=\"16\" x2=\"32\" y2=\"-16\" />\n        <line x1=\"32\" y1=\"16\" x2=\"12\" y2=\"0\" />\n        <line x1=\"32\" y1=\"-16\" x2=\"12\" y2=\"0\" />\n\n        <g className=\"colour-none\">\n            <line x1=\"-12\" y1=\"0\" x2=\"12\" y2=\"0\" />\n        </g>\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-32\" cy=\"-16\" r=\"6\" />\n        <circle className=\"colour-1\" cx=\"-32\" cy=\"16\" r=\"6\" />\n        <circle className=\"colour-1\" cx=\"-12\" cy=\"0\" r=\"6\" />\n        <circle className=\"colour-2\" cx=\"32\" cy=\"-16\" r=\"6\" />\n        <circle className=\"colour-2\" cx=\"32\" cy=\"16\" r=\"6\" />\n        <circle className=\"colour-2\" cx=\"12\" cy=\"0\" r=\"6\" />\n    </g>\n</g>\n\nconst GridGraph = () => <g>\n    <g className=\"graph-edges\">\n        <path className=\"colour-none\" d=\"M-24 -12h24m0 24h24\"/>\n        <path className=\"colour-1\" d=\"M-24 -12v24h24v-24h24v24\" />\n    </g>\n    <g className=\"graph-nodes colour-1\">\n        <circle cx=\"-24\" cy=\"-12\" r=\"6\" />\n        <circle cx=\"0\" cy=\"-12\" r=\"6\" />\n        <circle cx=\"24\" cy=\"-12\" r=\"6\" />\n        <circle cx=\"-24\" cy=\"12\" r=\"6\" />\n        <circle cx=\"0\" cy=\"12\" r=\"6\" />\n        <circle cx=\"24\" cy=\"12\" r=\"6\" />\n    </g>\n</g>\n\nconst GridGraph2 = () => <g>\n    <g className=\"graph-edges\">\n        <path className=\"colour-none\" d=\"M-24 -24h24m-24 24h48m0 24h-24\"/>\n        <path className=\"colour-1\" d=\"M-24 -24v48h24v-48h24v48\" />\n    </g>\n    <g className=\"graph-nodes colour-1\">\n        <circle cx=\"-24\" cy=\"-24\" r=\"6\" />\n        <circle cx=\"0\" cy=\"-24\" r=\"6\" />\n        <circle cx=\"24\" cy=\"-24\" r=\"6\" />\n        <circle cx=\"-24\" cy=\"0\" r=\"6\" />\n        <circle cx=\"0\" cy=\"0\" r=\"6\" />\n        <circle cx=\"24\" cy=\"0\" r=\"6\" />\n        <circle cx=\"-24\" cy=\"24\" r=\"6\" />\n        <circle cx=\"0\" cy=\"24\" r=\"6\" />\n        <circle cx=\"24\" cy=\"24\" r=\"6\" />\n    </g>\n</g>\n\nconst EulerPath = () => <g>\n    <g className=\"graph-edges\">\n        <path className=\"colour-1\" d=\"M-15 -8h30v30h-30v-30l15 -22l15 22\" />\n    </g>\n    <g className=\"graph-nodes colour-1\">\n        <circle cx=\"-15\" cy=\"-8\" r=\"6\" />\n        <circle cx=\"15\" cy=\"-8\" r=\"6\" />\n        <circle cx=\"-15\" cy=\"22\" r=\"6\" />\n        <circle cx=\"15\" cy=\"22\" r=\"6\" />\n        <circle cx=\"0\" cy=\"-30\" r=\"6\" />\n    </g>\n</g>\n\nexport default {\n    HamiltonianPath,\n    DominatingSet,\n    MinimumCut,\n    GridGraph,\n    GridGraph2,\n    EulerPath,\n};\n","/*\n * Construct a Euler path along a graph.\n * Given a starting node, move along the edges, visiting each edge only once\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { getGraphObject } from '../utils/loadPuzzle';\nimport { ColourableEulerPath } from '../PuzzleComponents/Graph';\n\nimport { allItemsColoured } from '../utils/evaluate';\nimport { loopGraph } from '../utils/graphTypes';\nimport { getNodesOnCircle, getLoopOfEdges } from '../utils/graphUtils';\n\n\nconst puzzles1 = [{\n    graph: loopGraph(4),\n}, {\n    graph: (() => {\n        const graph = loopGraph(4);\n        graph.edges.push([0, 2]);\n        return graph;\n    })(),\n}, {\n    graph: (() => {\n        const graph = loopGraph(4);\n        graph.nodes.push([0, 0]);\n        graph.edges.push([3, 4]);\n        return graph;\n    })(),\n}, {\n    graph: (() => {\n        const graph = loopGraph(4);\n        graph.nodes.push([0, -1.6]);\n        graph.edges.push([2, 4], [3, 4]);\n        return graph;\n    })(),\n}, {\n    graph: {\n        nodes: getNodesOnCircle(6),\n        edges: getLoopOfEdges(6).concat([[1, 4]])\n    }\n}];\n\nconst puzzles = [puzzles1];\n\n// Get a graph object with the first node coloured\nconst getGraph = (puzzle) => {\n    puzzle.graph.size = 50;\n    const graphObject = getGraphObject(puzzle.graph);\n    return graphObject;\n};\n\nconst EulerPath = (n) =>\n    <PuzzlePage\n        colourPalette={1}\n        clearButton\n        puzzles={puzzles[n]}\n        evaluate={({ edges }) => allItemsColoured(edges)}\n        getPuzzleObject={getGraph}\n        displayPuzzle={ColourableEulerPath}\n    />\n\nexport default EulerPath;\n","/*\n * Find the smallest dominating set.\n * Colour the vertices of a graph such that each vertex is coloured or adjacent\n * to a vertex that is coloured. The number of vertices you can colour is limited.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { getGraphObject } from '../utils/loadPuzzle';\nimport { ColourableEdgeGraph } from '../PuzzleComponents/Graph';\nimport { linearGraph, loopGraph } from '../utils/graphTypes';\nimport { getNodesOnCircle, getLoopOfEdges } from '../utils/graphUtils';\nimport { graphIsDisjoint } from '../utils/evaluate';\n\n\nconst puzzles = [\n    {\n        colourPalette: [1],\n        graph: linearGraph(2, { scale: 2, r: 10 })\n    }, {\n        colourPalette: [1],\n        graph: linearGraph(3, { scale: 2, r: 10 })\n    }, {\n        colourPalette: [2],\n        graph: loopGraph(4, { scale: 2, r: 10 })\n    }, {\n        colourPalette: [1],\n        graph: {\n            r: 10,\n            nodes: [[-2.5, -1.6], [-2.5, 1.6], [-0.8, 0], [0.8, 0], [2.5, -1.6], [2.5, 1.6]],\n            edges: [[0, 1], [0, 2], [1, 2], [2, 3], [3, 4], [3, 5], [4, 5]]\n        }\n    }, {\n        colourPalette: [1],\n        graph: {\n            r: 10,\n            nodes: getNodesOnCircle(3, { colour: 1, r: 2 }).concat([[0, 0, 1]]),\n            edges: [[0, 1], [1, 2], [0, 2], [2, 3]]\n        }\n    }, {\n        colourPalette: [2],\n        graph: {\n            r: 10,\n            nodes: [\n                [-3, -1], [-1, -1], [1, -1], [3, -1],\n                [3, 1], [1, 1], [-1, 1], [-3, 1] \n            ],\n            edges: getLoopOfEdges(8).concat([[0, 6], [1, 7], [2, 4], [3, 5]])\n        }\n    }, {\n        colourPalette: [2],\n        graph: {\n            r: 10,\n            nodes: [\n                [-3, -1], [-1, -1], [1, -1], [3, -1],\n                [3, 1], [1, 1], [-1, 1], [-3, 1] \n            ],\n            edges: getLoopOfEdges(8).concat([[0, 6], [1, 5], [2, 6], [2, 4], [3, 5]])\n        }\n    }, {\n        colourPalette: [2],\n        graph: {\n            r: 8,\n            nodes: [\n                [-2.4, -1.8], [-3, -0], [-2.4, 1.8], [-1.8, 0],\n                [ 2.4, -1.8], [ 3, -0], [ 2.4, 1.8], [ 1.8, 0],\n                [0, -0.9], [-0.6, 0], [0, 0.9], [0.6, 0] \n            ],\n            edges: [\n                [0, 1], [1, 2], [2, 3], [3, 0], [1, 3],\n                [4, 5], [5, 6], [6, 7], [7, 4], [5, 7],\n                [8, 9], [9, 10], [10, 11], [11, 8], [8, 10],\n                [3, 9], [7, 11], [0, 4], [2, 6]\n            ]\n        }\n    }\n];\n\nconst GraphTheory = () => \n    <PuzzlePage\n        clearButton\n        puzzles={puzzles}\n        evaluate={({ nodes }) => graphIsDisjoint(nodes)}\n\t\tgetPuzzleObject={({ graph }) => getGraphObject(graph)}\n\t\tdisplayPuzzle={ColourableEdgeGraph}\n    />\n\nexport default GraphTheory;\n","/*\n * Find the smallest dominating set.\n * Colour the vertices of a graph such that each vertex is coloured or adjacent\n * to a vertex that is coloured. The number of vertices you can colour is limited.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { getGraphObject } from '../utils/loadPuzzle';\nimport { DominatingSet } from '../PuzzleComponents/Graph';\n\nimport { allItemsColoured } from '../utils/evaluate';\nimport { getNodesOnCircle, getLoopOfEdges, connectNodeToNodes } from '../utils/graphUtils';\nimport { linearGraph, loopGraph, spokeGraph } from '../utils/graphTypes';\n\n\nconst puzzles = [\n    {\n        colourPalette: [1],\n        graph: linearGraph(3, { scale: 2, r: 10 })\n    }, {\n        colourPalette: [1],\n        graph: spokeGraph(5, { scale: 2, r: 10 })\n    }, {\n        colourPalette: [2],\n        graph: loopGraph(6, { scale: 2, r: 10 })\n    }, {\n        colourPalette: [2],\n        graph: {\n            nodes: getNodesOnCircle(6, { r: 2 }).concat([[0, 0, 0]]),\n            edges: getLoopOfEdges(6).concat(connectNodeToNodes(6, [0, 1, 3, 4])),\n            r: 10\n        }\n    }, {\n        colourPalette: [3],\n        graph: {\n            nodes: getNodesOnCircle(5, { r: 3 }).concat(getNodesOnCircle(5, { r: 1.5 })),\n            edges: getLoopOfEdges(5).concat([\n                [0, 5], [1, 6], [2, 7], [3, 8], [4, 9],\n                [5, 7], [6, 8], [7, 9], [5, 8], [6, 9]\n            ]),\n            r: 10\n        }\n    }, {\n        colourPalette: [4],\n        graph: {\n            nodes: getNodesOnCircle(6, { r: 1.5 })\n                .concat(getNodesOnCircle(3, { r: 3, offsetAngle: 30 }))\n                .concat([[0, 0, 0]]),\n            edges: getLoopOfEdges(6)\n                .concat([[0, 6], [2, 7], [4, 8]])\n                .concat(connectNodeToNodes(9, [1, 3, 5])),\n            r: 10\n        }\n    }, {\n        colourPalette: [4],\n        graph: {\n            nodes: getNodesOnCircle(8, { r: 3 }).concat(getNodesOnCircle(4, { r: 1.5 })).concat([[0, 0, 0]]),\n            edges: getLoopOfEdges(8)\n                .concat(getLoopOfEdges(8, 11))\n                .concat(connectNodeToNodes(12, [8, 9, 10, 11]))\n                .concat([\n                    [0, 8], [1, 9], [2, 9], [3, 10], [4, 10], [5, 11], [6, 11], [7, 8]\n                ]),\n            r: 10\n        }\n    }, {\n        colourPalette: [5],\n        graph: {\n            nodes: getNodesOnCircle(12, { r: 3 }).concat(getNodesOnCircle(4, { r: 1.5 })).concat([[0, 0, 0]]),\n            edges: getLoopOfEdges(12)\n                .concat(getLoopOfEdges(12, 15))\n                .concat(connectNodeToNodes(16, [12, 13, 14, 15]))\n                .concat([\n                    [0, 12], [2, 13], [3, 13], [5, 14], [6, 14], [8, 15], [9, 15], [11, 12]\n                ]),\n            r: 10\n        }\n    }\n];\n\nconst GraphTheory = () => \n    <PuzzlePage\n        clearButton\n        puzzles={puzzles}\n        evaluate={({ nodes }) => allItemsColoured(nodes)}\n        getPuzzleObject={({ graph }) => getGraphObject(graph)}\n        displayPuzzle={DominatingSet}\n    />\n\nexport default GraphTheory;\n","/*\n * Construct a Hamiltonian path along a graph.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { getGraphObject } from '../utils/loadPuzzle';\nimport { ColourableHamilitonianPath } from '../PuzzleComponents/Graph';\n\nimport { allItemsColoured } from '../utils/evaluate';\nimport { loopGraph } from '../utils/graphTypes';\nimport {\n    getNodesOnCircle,\n    getLoopOfEdges,\n    getLineOfEdges,\n} from '../utils/graphUtils';\n\n\nconst R3 = Math.sqrt(3);\n\nconst puzzles = [\n    {\n        graph: loopGraph(6)\n    }, {\n        graph: {\n            nodes: getNodesOnCircle(6),\n            edges: getLoopOfEdges(6).concat([[1, 4]])\n        }\n    }, {\n        graph: {\n            nodes: getNodesOnCircle(6),\n            edges: getLineOfEdges(6)\n        }\n    }, {\n        graph: {\n            nodes: getNodesOnCircle(6),\n            edges: getLineOfEdges(6).concat([[2, 5]])\n        }\n    }, {\n        graph: {\n            nodes: getNodesOnCircle(6),\n            edges: [[2, 3], [3, 4], [4, 5], [5, 0], [1, 4], [0, 3]]\n        }\n    }, {\n        graph: {\n            nodes: getNodesOnCircle(3, { r: 0.75 })\n                    .concat(getNodesOnCircle(3, { r: 2 })),\n            edges: getLoopOfEdges(3)\n                    .concat(getLoopOfEdges(3, 5))\n                    .concat([[2, 5]])\n        }\n    }, {\n        graph: {\n            nodes: getNodesOnCircle(3, { r: 0.75 })\n                    .concat(getNodesOnCircle(3, { r: 2 }))\n                    .concat([[-R3, -2], [R3, -2]]),\n            edges: getLoopOfEdges(3)\n                    .concat(getLoopOfEdges(3, 5))\n                    .concat([[0, 3], [2, 5], [3, 6], [4, 7]])\n        }\n    }, {\n        graph: {\n            nodes: getNodesOnCircle(3, { r: 0.75 })\n                    .concat(getNodesOnCircle(3, { r: 2 }))\n                    .concat([[-R3, -2], [R3, -2]]),\n            edges: getLoopOfEdges(3)\n                    .concat(getLoopOfEdges(3, 5))\n                    .concat([[2, 5], [3, 6], [4, 7], [5, 6], [5, 7]])\n        }\n    }\n];\n\n// Get a graph object with the first node coloured\nconst getGraph = ({ graph }) => {\n    graph.size = 50;\n    const graphObject = getGraphObject(graph);\n    return graphObject;\n};\n\nconst GraphTheory = () =>\n    <PuzzlePage\n        colourPalette={1}\n        clearButton\n        puzzles={puzzles}\n        evaluate={({ nodes }) => allItemsColoured(nodes)}\n        getPuzzleObject={getGraph}\n        displayPuzzle={ColourableHamilitonianPath}\n    />\n\nexport default GraphTheory;\n","/*\n * Given a grid, construct a path that goes through every node exactly once.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { getGraphObject } from '../utils/loadPuzzle';\nimport { ColourableHamilitonianPath } from '../PuzzleComponents/Graph';\n\nimport { allItemsColoured } from '../utils/evaluate';\nimport { gridGraph } from '../utils/graphTypes';\n\n// TODO: Instead of paths have cycles\n// TODO: Grids with missing points\n\n// Find a path from the starting node to the end node\nconst puzzles1 = [{\n    graph: gridGraph(3, 1),\n    start: 0,\n    end: 2,\n}, {\n    graph: gridGraph(2, 2),\n    start: 0,\n    end: 2,\n}, {\n    graph: gridGraph(3, 2),\n    start: 0,\n    end: 2,\n}, {\n    graph: gridGraph(3, 2),\n    start: 0,\n    end: 1,\n}, {\n    graph: gridGraph(3, 2),\n    start: 0,\n    end: 5,\n}, {\n    graph: gridGraph(4, 2),\n    start: 0,\n    end: 1,\n}, {\n    graph: gridGraph(4, 2),\n    start: 2,\n    end: 4,\n}, {\n    graph: gridGraph(4, 2),\n    start: 0,\n    end: 6,\n}];\n\n// Same a puzzle1 but with larger grids\nconst puzzles2 = [{\n    graph: gridGraph(3, 3),\n    start: 0,\n    end: 4,\n}, {\n    graph: gridGraph(3, 3),\n    start: 0,\n    end: 8,\n}, {\n    graph: gridGraph(3, 3),\n    start: 0,\n    end: 6,\n}, {\n    graph: gridGraph(4, 3),\n    start: 0,\n    end: 3,\n}, {\n    graph: gridGraph(4, 3),\n    start: 0,\n    end: 9,\n}, {\n    graph: gridGraph(4, 3),\n    start: 0,\n    end: 11,\n}, {\n    graph: gridGraph(4, 3),\n    start: 0,\n    end: 7,\n}, {\n    graph: gridGraph(4, 3),\n    start: 3,\n    end: 8,\n}];\n\nconst puzzles = [puzzles1, puzzles2];\n\nconst getGraph = ({ graph, start, end }) => {\n    const graphObject = getGraphObject(graph);\n    graphObject.path = [graphObject.nodes[start]];\n    graphObject.nodes[start].colour = 1;\n    graphObject.nodes[start].fixed = true;\n    graphObject.nodes[start].current = true;\n    graphObject.nodes[end].colour = 2;\n    graphObject.end = graphObject.nodes[end];\n    graphObject.end.colour = 2;\n    graphObject.end.fixed = true;\n\n    return graphObject;\n}\n\nconst evaluate = (graph) => {\n    if (allItemsColoured(graph.nodes)) {\n        // Add final path segment\n        const finalIndex = graph.path[graph.path.length - 1].index;\n        graph.end.edges[finalIndex].colour = 1;\n\n        // Hide non-coloured ends\n        graph.edges.forEach(edge => {\n            if (!edge.colour) {\n                edge.hidden = true;\n            }\n        });\n        return true;\n    } else {\n        // Remove colour of final path segment\n        Object.values(graph.end.edges).forEach(edge => edge.colour = 0);\n\n        // Make sure all edges are showing\n        graph.edges.forEach(edge => edge.hidden = false);\n    }\n}\n\nconst GridPath = (n) =>\n    <PuzzlePage\n        colourPalette={1}\n        clearButton\n        puzzles={puzzles[n]}\n        evaluate={evaluate}\n        getPuzzleObject={getGraph}\n        displayPuzzle={ColourableHamilitonianPath}\n    />\n\nexport default GridPath;\n","import React from 'react';\nimport { getPointsOnACircle } from '../utils/graphUtils';\nimport { isColourable } from '../utils/isColourable';\n\n\nfunction getCirclePackedInCircle(R, n) {\n    const phi = Math.PI * (0.5 - 1 / n);\n    const cPhi = Math.cos(phi);\n    const r = R / (1 + cPhi);\n    const points = getPointsOnACircle(n, { r });\n\n    return {\n        scale: cPhi / (1 + cPhi),\n        categorySize: r * cPhi,\n        categoryPositions: points\n    };\n}\n\nexport function Categories({ size, categories, chamber }) {\n    const { scale, categorySize, categoryPositions } = getCirclePackedInCircle(size, categories.length);\n\n    return <g>\n        { categories.map((category, i) => {\n            let transform = `translate(${ categoryPositions[i][0] } ${ categoryPositions[i][1] })`;\n            if (category.rotate) {\n                transform += ` rotate(${ category.rotate })`;\n            }\n\n            return <g key={i} transform={transform}>\n                <circle\n                    {...isColourable(category, chamber, { className: 'category' })}\n                    r={categorySize * 0.95}\n                    />\n                <g className=\"no-pointer\" transform={`scale(${ scale * 2 } ${ scale * 2 })`}>\n                    { category.component }\n                </g>\n            </g>\n        })}\n    </g>\n}\n","/*\n * Given a grid, categorise it depend on whether you can create a path through it or not.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { gridGraph } from '../utils/graphTypes';\nimport { Graph } from '../PuzzleComponents/Graph';\nimport { Categories } from '../PuzzleComponents/Categories';\nimport { getCategoryObjects, getGraphObject } from '../utils/loadPuzzle';\n\nimport { extractAttribute, sequencesAreEquivalent } from '../utils/evaluate';\n\n\nconst puzzle1 = [{\n    colourPalette: 2,\n    categories: [\n        { type: 1, item: getGridGraph(2, 2, 0, 2) },\n        { type: 2, item: getGridGraph(2, 2, 0, 3) },\n    ]\n}, {\n    colourPalette: 2,\n    categories: [\n        { type: 1, item: getGridGraph(3, 2, 0, 1) },\n        { type: 1, item: getGridGraph(3, 2, 0, 2) },\n        { type: 2, item: getGridGraph(3, 2, 2, 3) },\n    ]\n}, {\n    colourPalette: 2,\n    categories: [\n        { type: 1, item: getGridGraph(3, 2, 0, 5) },\n        { type: 2, item: getGridGraph(3, 2, 0, 4) },\n        { type: 2, item: getGridGraph(3, 2, 0, 3) },\n    ]\n}];\n\nconst puzzles = [puzzle1];\n\nfunction getGridGraph(width, height, start, end) {\n    const graph = gridGraph(width, height);\n    graph.nodes[start][2] = 1;\n    graph.nodes[end][2] = 2;\n    return graph\n}\n\nconst displayCategories = (categories, chamber) => {\n    categories.forEach(item => {\n        item.component = <Graph {...getGraphObject(item.object)} chamber={chamber} />\n    });\n\n    return <Categories size=\"128\" categories={categories} chamber={chamber} />\n};\n\nconst evaluate = puzzle => {\n    return sequencesAreEquivalent(\n        extractAttribute(puzzle, 'category'),\n        extractAttribute(puzzle, 'colour')\n    );\n}\n\nconst CategoriseGrids = (n) =>\n    <PuzzlePage\n        puzzles={puzzles[n]}\n        evaluate={evaluate}\n        getPuzzleObject={getCategoryObjects}\n        displayPuzzle={displayCategories} />\n\nexport default CategoriseGrids;\n","import React from 'react';\n\n\nconst GridGraph = () => <g>\n    <g className=\"graph-edges\">\n        <path className=\"colour-none\" d=\"M-24 -12h24m0 24h24\"/>\n        <path className=\"colour-1\" d=\"M-24 -12v24h24v-24h24v24\" />\n    </g>\n    <g className=\"graph-nodes colour-1\">\n        <circle cx=\"-24\" cy=\"-12\" r=\"6\" />\n        <circle cx=\"0\" cy=\"-12\" r=\"6\" />\n        <circle cx=\"24\" cy=\"-12\" r=\"6\" />\n        <circle cx=\"-24\" cy=\"12\" r=\"6\" />\n        <circle cx=\"0\" cy=\"12\" r=\"6\" />\n        <circle cx=\"24\" cy=\"12\" r=\"6\" />\n    </g>\n</g>\n\nconst GridGraph2 = () => <g>\n    <g className=\"graph-edges\">\n        <path className=\"colour-none\" d=\"M-24 -24h24m-24 24h48m0 24h-24\"/>\n        <path className=\"colour-1\" d=\"M-24 -24v48h24v-48h24v48\" />\n    </g>\n    <g className=\"graph-nodes colour-1\">\n        <circle cx=\"-24\" cy=\"-24\" r=\"6\" />\n        <circle cx=\"0\" cy=\"-24\" r=\"6\" />\n        <circle cx=\"24\" cy=\"-24\" r=\"6\" />\n        <circle cx=\"-24\" cy=\"0\" r=\"6\" />\n        <circle cx=\"0\" cy=\"0\" r=\"6\" />\n        <circle cx=\"24\" cy=\"0\" r=\"6\" />\n        <circle cx=\"-24\" cy=\"24\" r=\"6\" />\n        <circle cx=\"0\" cy=\"24\" r=\"6\" />\n        <circle cx=\"24\" cy=\"24\" r=\"6\" />\n    </g>\n</g>\n\nconst GridGraphCategories = () => <g>\n    <g className=\"categories\">\n        <circle className=\"colour-1\" cx=\"-24\" cy=\"0\" r=\"23\" />\n        <circle className=\"colour-2\" cx=\"24\" cy=\"0\" r=\"23\" />\n    </g>\n    <g className=\"graph-edges\">\n        <path className=\"colour-none\" d=\"M-32 -8h16\" />\n        <path d=\"M32 -8h-16v16h16z\" />\n        <path  className=\"colour-1\" d=\"M-32 -8v16h16v-16\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-32\" cy=\"-8\" r=\"4\" />\n        <circle className=\"colour-2\" cx=\"-16\" cy=\"-8\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"-32\" cy=\"8\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"-16\" cy=\"8\" r=\"4\" />\n\n        <circle className=\"colour-1\" cx=\"32\" cy=\"-8\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"16\" cy=\"-8\" r=\"4\" />\n        <circle className=\"colour-2\" cx=\"32\" cy=\"8\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"16\" cy=\"8\" r=\"4\" />\n    </g>\n</g>\n\nexport default [\n    GridGraph,\n    GridGraph2,\n    GridGraphCategories,\n];\n","import React from 'react';\n\n\nconst ColourMapIcon1 = () =>\n    <g className=\"graph-nodes\">\n        <rect className=\"colour-1\" x=\"-28\" y=\"-28\" width=\"28\" height=\"28\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"0\" y=\"-28\" width=\"28\" height=\"28\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"-28\" y=\"0\" width=\"28\" height=\"28\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"0\" y=\"0\" width=\"28\" height=\"28\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-3\" x=\"-12\" y=\"-12\" width=\"24\" height=\"24\" rx=\"2\" ry=\"2\" />\n    </g>\n\nconst ColourMapIcon2 = () =>\n    <g className=\"graph-nodes\">\n        <rect className=\"colour-1\" x=\"-30\" y=\"-30\" width=\"30\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"0\" y=\"-30\" width=\"30\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"-30\" y=\"-10\" width=\"20\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-3\" x=\"-10\" y=\"-10\" width=\"20\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"10\" y=\"-10\" width=\"20\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"-30\" y=\"10\" width=\"30\" height=\"20\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"0\" y=\"10\" width=\"30\" height=\"20\" rx=\"2\" ry=\"2\" />\n    </g>\n\nexport default [ColourMapIcon1, ColourMapIcon2];\n","import React from 'react';\nimport { isColourable } from '../utils/isColourable';\n\n\nexport const Map = ({ regions=[], chamber }) =>\n    <g className=\"graph\">\n        <g className=\"graph-nodes\">\n            { regions.map((item, i) =>\n                <rect\n                    key={i}\n                    x={item.x}\n                    y={item.y}\n                    width={item.width}\n                    height={item.height}\n                    rx=\"3\"\n                    ry=\"3\"\n                    {...isColourable(item, chamber)}\n                />\n            )}\n        </g>\n    </g>\n\nexport const ColourableMap = (puzzle, chamber) =>\n    <Map {...puzzle} chamber={chamber} />\n","/*\n * Colour regions on a map such that no two touching regions have the same colour.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../PuzzleChamber/PuzzleChamber';\nimport { ColourableMap } from './PuzzleComponents/Map';\nimport { getMapObject } from './utils/loadPuzzle';\nimport { allItemsColoured, allConnectedItemsHaveDifferentColours } from './utils/evaluate';\n\n\nconst puzzles1 = [\n    {\n        colourPalette: 1,\n        regions: [[0, 0, 32, 32]]\n    }, {\n        colourPalette: 2,\n        regions: [[-16, 0, 32, 32], [16, 0, 32, 32]],\n        connections: [[0, 1]]\n    }, {\n        colourPalette: 2,\n        regions: [[-32, 0, 32, 32], [0, 0, 32, 32], [32, 0, 32, 32]],\n        connections: [[0, 1], [1, 2]]\n    }, {\n        colourPalette: 3,\n        regions: [[-16, 16, 32, 32], [16, 16, 32, 32], [0, -16, 64, 32]],\n        connections: [[0, 1], [1, 2], [0, 2]]\n    }, {\n        colourPalette: 2,\n        regions: [[-16, 16, 32, 32], [16, 16, 32, 32], [-16, -16, 32, 32], [16, -16, 32, 32]],\n        connections: [[0, 1], [2, 3], [0, 2], [1, 3]]\n    }, {\n        colourPalette: 3,\n        regions: [[-16, 16, 32, 32], [16, 16, 32, 32], [-16, -16, 32, 32], [16, -16, 32, 32], [0, 0, 28, 28]],\n        connections: [[0, 1], [2, 3], [0, 2], [1, 3], [0, 4], [1, 4], [2, 4], [3, 4]]\n    }, {\n        colourPalette: 3,\n        regions: [[0, 0, 72, 72], [-12, 12, 24, 24], [12, 12, 24, 24], [-12, -12, 24, 24], [12, -12, 24, 24], [0, 0, 24, 24]],\n        connections: [[1, 2], [3, 4], [1, 3], [2, 4], [0, 1], [0, 2], [0, 3], [0, 4], [5, 1], [5, 2], [5, 3], [5, 4]]\n    }, {\n        colourPalette: 4,\n        regions: [[-16, 16, 32, 32], [16, 16, 32, 32], [0, -16, 64, 32], [0, 0, 28, 28]],\n        connections: [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3]]\n    }\n];\n\nconst puzzles2 = [\n    {\n        colourPalette: 2,\n        regions: [[0, 0, 96, 96], [0, 0, 32, 32]],\n        connections: [[0, 1]]\n    }, {\n        colourPalette: 3,\n        regions: [[-24, 0, 48, 96], [24, 0, 48, 96], [0, 0, 32, 32]],\n        connections: [[0, 1], [1, 2], [0, 2]]\n    }, {\n        colourPalette: 4,\n        regions: [[0, -32, 96, 32], [-24, 16, 48, 64], [24, 16, 48, 64], [0, 0, 32, 32]],\n        connections: [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3]]\n    }, {\n        colourPalette: 3,\n        regions: [[-24, -24, 48, 48], [24, -24, 48, 48], [-24, 24, 48, 48], [24, 24, 48, 48], [0, 0, 32, 32]],\n        connections: [[0, 1], [2, 3], [0, 2], [1, 3], [0, 4], [1, 4], [2, 4], [3, 4]]\n    }, {\n        colourPalette: 3,\n        regions: [[-16, -32, 64, 32], [32, -16, 32, 64], [-32, 16, 32, 64], [16, 32, 64, 32], [0, 0, 32, 32]],\n        connections: [[0, 1], [2, 3], [0, 2], [1, 3], [0, 4], [1, 4], [2, 4], [3, 4]]\n    }, {\n        colourPalette: 2,\n        regions: [\n            [-32, -32, 32, 32], [0, -32, 32, 32], [32, -32, 32, 32],\n            [-32, 0, 32, 32], [0, 0, 32, 32], [32, 0, 32, 32],\n            [-32, 32, 32, 32], [0, 32, 32, 32], [32, 32, 32, 32]\n        ],\n        connections: [\n            [0, 1], [1, 2], [3, 4], [4, 5], [6, 7], [7, 8],\n            [0, 3], [1, 4], [2, 5], [3, 6], [4, 7], [5, 8]\n        ]\n    }\n];\n\nconst puzzles = [puzzles1, puzzles2];\n\nconst evaluate = ({ regions, connections }) => \n    allItemsColoured(regions) &&\n    allConnectedItemsHaveDifferentColours(connections);\n\nexport const ColourMap = (n) =>\n\t<PuzzlePage\n\t\tpuzzles={puzzles[n]}\n\t\tevaluate={evaluate}\n\t\tgetPuzzleObject={getMapObject}\n\t\tdisplayPuzzle={ColourableMap} />\n","import React from 'react';\n\n\nconst IdentityIcon1 = () => <React.Fragment>\n    <defs>\n        <g id=\"identity-1-puzzle\">\n            <g className=\"graph-edges\">\n                <line x1=\"-15\" y1=\"13\" x2=\"0\" y2=\"-13\" />\n                <line x1=\"-15\" y1=\"13\" x2=\"15\" y2=\"13\" />\n                <line x1=\"0\" y1=\"-13\" x2=\"15\" y2=\"13\" />\n            </g>\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-1\" cx=\"-15\" cy=\"13\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"0\" cy=\"-13\" r=\"6\" />\n                <circle className=\"colour-3\" cx=\"15\" cy=\"13\" r=\"6\" />\n            </g>\n        </g>\n    </defs>\n\n    <use href=\"#identity-1-puzzle\" transform=\"translate(-24, -4)\"/>\n    <use href=\"#identity-1-puzzle\" transform=\"translate(24, -4)\"/>\n    <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n</React.Fragment>\n\nconst ReflectionIcon1 = () => <React.Fragment>\n    <defs>\n        <g id=\"reflection-1-puzzle\">\n            <g className=\"graph-edges\">\n                <line x1=\"12\" y1=\"0\" x2=\"-11\" y2=\"-15\" />\n                <line x1=\"12\" y1=\"0\" x2=\"-11\" y2=\"15\" />\n                <line x1=\"-11\" y1=\"-15\" x2=\"-11\" y2=\"15\" />\n            </g>\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-2\" cx=\"12\" cy=\"0\" r=\"6\" />\n                <circle className=\"colour-1\" cx=\"-11\" cy=\"15\" r=\"6\" />\n                <circle className=\"colour-1\" cx=\"-11\" cy=\"-15\" r=\"6\" />\n            </g>\n        </g>\n    </defs>\n\n    <use href=\"#reflection-1-puzzle\" transform=\"translate(-20)\"/>\n    <use href=\"#reflection-1-puzzle\" transform=\"translate(20) scale(-1, 1)\"/>\n    <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n</React.Fragment>\n\nconst RotationIcon1 = () => <React.Fragment>\n    <defs>\n        <g id=\"rotation-1-puzzle\">\n            <g className=\"graph-edges\">\n                <line x1=\"-16\" y1=\"13\" x2=\"-2\" y2=\"-13\" />\n                <line x1=\"-16\" y1=\"13\" x2=\"12\" y2=\"13\" />\n                <line x1=\"-2\" y1=\"-13\" x2=\"12\" y2=\"13\" />\n            </g>\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-1\" cx=\"-16\" cy=\"13\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"-2\" cy=\"-13\" r=\"6\" />\n                <circle className=\"colour-1\" cx=\"12\" cy=\"13\" r=\"6\" />\n            </g>\n        </g>\n    </defs>\n\n    <use href=\"#rotation-1-puzzle\" transform=\"translate(-20)\"/>\n    <use href=\"#rotation-1-puzzle\" transform=\"translate(20) rotate(180)\"/>\n    <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n</React.Fragment>\n\nconst TransformColourIcon1 = () => <React.Fragment>\n    <line className=\"reflection-line\" y1=\"-50\" y2=\"50\" />\n\n    <g transform=\"translate(-20)\">\n        <g className=\"graph-edges\">\n            <line x1=\"0\" y1=\"20\" x2=\"0\" y2=\"-16\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"0\" cy=\"-20\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"0\" cy=\"0\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"0\" cy=\"20\" r=\"6\" />\n        </g>\n    </g>\n\n    <g transform=\"translate(20)\">\n        <g className=\"graph-edges\">\n            <line x1=\"0\" y1=\"20\" x2=\"0\" y2=\"-20\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-2\" cx=\"0\" cy=\"-20\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"0\" cy=\"0\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"0\" cy=\"20\" r=\"6\" />\n        </g>\n    </g>\n</React.Fragment>\n\nexport default [IdentityIcon1, ReflectionIcon1, RotationIcon1, TransformColourIcon1];\n","/*\n * Colour all nodes on a graph such that no edges joins two nodes of the same colour.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../PuzzleChamber/PuzzleChamber';\nimport { Graph, ColourableGraph } from './PuzzleComponents/Graph';\nimport { getGraphAndUncolouredCopy } from './utils/loadPuzzle';\nimport { getNodesOnCircle, getLoopOfEdges, getLineOfEdges } from './utils/graphUtils';\nimport { graphNodesAreSameColour, samePatternButDifferent } from './utils/evaluate';\n\n\nconst identity1 = [\n\t{\n\t\tcolourPalette: 1,\n        nodes: [[0, 0, 1]]\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2]),\n        edges: getLineOfEdges(2)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: [[-1, 0, 1], [0, 0, 2], [1, 0, 1]],\n        edges: [[0, 1], [1, 2]]\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 4,\n        nodes: getNodesOnCircle([1, 2, 3, 4]),\n        edges: getLoopOfEdges(4)\n\t}, {\n        size: 24,\n        colourPalette: 3,\n        nodes: [[-1, -1, 1], [1, -1, 1], [-0.5, 0, 2], [0.5, 0, 3], [-1, 1, 3], [1, 1, 2]],\n        edges: [[0, 2], [2, 3], [3, 1], [2, 4], [3, 5]]\n    }, {\n        size: 24,\n        colourPalette: 4,\n        nodes: [[-1.5, -1, 1], [-0.5, -1, 2], [0.5, -1, 1], [-0.5, 0, 1], [0.5, 0, 3], [-0.5, 1, 3], [0.5, 1, 4], [1.5, 1, 3]],\n        edges: [[0, 1], [1, 2], [1, 3], [3, 4], [4, 6], [5, 6], [6, 7]]\n    }\n];\n\nconst reflection1 = [\n\t{\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 2], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3], {offsetAngle: 30}),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 1]),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3]),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 1, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 2, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 4,\n        nodes: getNodesOnCircle([1, 2, 3, 4]),\n        edges: getLoopOfEdges(4)\n\t}\n];\n\nconst rotation1 = [\n\t{\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 2], { dy: 0.25 }),\n\t\tedges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2], { offsetAngle: 90 }),\n\t\tedges: getLoopOfEdges(2)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2]),\n\t\tedges: getLoopOfEdges(2)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 2, 2]),\n\t\tedges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 1, 1, 2]),\n\t\tedges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 2], { dy: 0.25 }),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3], { dy: 0.25 }),\n\t\tedges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 4,\n        nodes: getNodesOnCircle([1, 2, 3, 4]),\n        edges: getLoopOfEdges(4)\n\t}\n];\n\nconst colour1 = [\n\t{\n\t\tcolourPalette: 1,\n        nodes: [[0, 0, 2]]\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2]),\n        edges: getLineOfEdges(2)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: [[-1, 0, 1], [0, 0, 2], [1, 0, 1]],\n        edges: getLineOfEdges(3)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3]),\n        edges: getLoopOfEdges(3)\n\t}, {\n\t\tcolourPalette: 2,\n        nodes: getNodesOnCircle([1, 2, 1, 2]),\n        edges: getLoopOfEdges(4)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3, 2]).concat([[0, 0, 3]]),\n        edges: getLoopOfEdges(4).concat([[0, 4], [1, 4] ,[2, 4], [3, 4]])\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([1, 2, 3, 1, 2, 3]),\n        edges: getLoopOfEdges(6)\n\t}, {\n\t\tcolourPalette: 3,\n        nodes: getNodesOnCircle([2, 3, 1, 3, 2, 1]),\n        edges: getLoopOfEdges(6)\n\t}\n];\n\nconst Transformation = ({ puzzles, transform, evaluate }) => {\n\tconst displayGraphs = (puzzle, chamber) =>\n\t\t<g>\n\t\t\t<g transform=\"translate(-60)\">\n\t\t\t\t<Graph {...puzzle.target} />\n\t\t\t</g>\n\t\t\t<g transform={ \"translate(60) \" + transform }>\n\t\t\t\t{ ColourableGraph(puzzle.blank, chamber) }\n\t\t\t</g>\n\n\t\t\t<line className=\"reflection-line\" y1=\"-200\" y2=\"200\" />\n\t\t</g>\n\n\treturn <PuzzlePage\n\t\tpuzzles={puzzles}\n\t\tevaluate={evaluate}\n\t\tgetPuzzleObject={getGraphAndUncolouredCopy}\n\t\tdisplayPuzzle={displayGraphs} />\n};\n\nconst patternMatchGraphs = ({ blank, target }) => {\n\tconst seq1 = blank.nodes.map(node => node.colour);\n\tconst seq2 = target.nodes.map(node => node.colour);\n\treturn samePatternButDifferent(seq1, seq2);\n}\n\nconst puzzles = [\n\t<Transformation puzzles={identity1} transform=\"\" evaluate={graphNodesAreSameColour} />,\n\t<Transformation puzzles={reflection1} transform=\"scale(-1 1)\" evaluate={graphNodesAreSameColour}/>,\n\t<Transformation puzzles={rotation1} transform=\"rotate(180)\" evaluate={graphNodesAreSameColour} />,\n\t<Transformation puzzles={colour1} transform=\"\" evaluate={patternMatchGraphs} />,\n];\n\nexport const Transformations = (n) => puzzles[n];\n","import React from 'react';\n\n\nconst SequencesIcon1 = () => \n    <g className=\"graph-nodes\">\n        <rect className=\"colour-1\" x=\"-37.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"-22.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"-7.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-2\" x=\"7.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n        <rect className=\"colour-1\" x=\"22.5\" y=\"-7.5\" width=\"15\" height=\"15\" rx=\"2\" ry=\"2\" />\n    </g>\n\nconst SequencesIcon2 = () => \n    <g className=\"graph-nodes\">\n        {[1, 2, 1, 0, 1, 2, 1].map((colour, index) =>\n            <rect\n                key={index}\n                className={\"colour-\" + colour}\n                x={-42 + index * 12}\n                y=\"-7.5\"\n                width=\"12\" height=\"12\" rx=\"2\" ry=\"2\" />\n        )}\n    </g>\n\nconst SequencesIcon3 = () => <React.Fragment>\n    <defs>\n        <g id=\"triangle\" className=\"graph-edges\">\n            <line x1=\"-15\" y1=\"13\" x2=\"0\" y2=\"-13\" />\n            <line x1=\"-15\" y1=\"13\" x2=\"15\" y2=\"13\" />\n            <line x1=\"0\" y1=\"-13\" x2=\"15\" y2=\"13\" />\n        </g>\n        <g id=\"triangle-1\">\n            <use href=\"#triangle\" />\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-1\" cx=\"-15\" cy=\"13\" r=\"7\" />\n                <circle className=\"colour-2\" cx=\"0\" cy=\"-13\" r=\"7\" />\n                <circle className=\"colour-1\" cx=\"15\" cy=\"13\" r=\"7\" />\n            </g>\n        </g>\n        <g id=\"triangle-2\">\n            <use href=\"#triangle\" />\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-2\" cx=\"-15\" cy=\"13\" r=\"7\" />\n                <circle className=\"colour-1\" cx=\"0\" cy=\"-13\" r=\"7\" />\n                <circle className=\"colour-2\" cx=\"15\" cy=\"13\" r=\"7\" />\n            </g>\n        </g>\n    </defs>\n\n    <use href=\"#triangle-1\" transform=\"translate(-34, -4) scale(0.45)\"/>\n    <use href=\"#triangle-2\" transform=\"translate(-11, -4) scale(0.45)\"/>\n    <use href=\"#triangle-1\" transform=\"translate(11, -4) scale(0.45)\"/>\n    <use href=\"#triangle-2\" transform=\"translate(34, -4) scale(0.45)\"/>\n</React.Fragment>\n\nexport default [\n    SequencesIcon1,\n    SequencesIcon2,\n    SequencesIcon3,\n];\n","import React from 'react';\nimport { Graph } from './Graph';\nimport { sum } from '../../utils/common';\nimport { isColourable } from '../utils/isColourable';\nimport { getGraphBBox } from '../utils/graphUtils';\n\n\n// Calculate the size of items in a sequence based on the number of items in the sequence\nconst getSize = n =>  Math.min(24, 200 / n);\n\n// Sequence of blocks in a line, some of which may be colourable\nconst Sequence = ({ sequence=[], y=0, chamber }) => {\n    const size = getSize(sequence.length);\n    const startX = -(sequence.length * size) / 2;\n\n    return <g className=\"sequence\">\n        { sequence.map((item, i) =>\n            <rect\n                key={i}\n                x={startX + i * size }\n                y={y - size / 2}\n                width={size - 1}\n                height={size - 1}\n                rx=\"3\"\n                ry=\"3\"\n                {...isColourable(item, chamber)}\n            />\n        )}\n    </g>\n};\n\n// Wrapper function to return Sequence component\nexport function ColourableSequence(puzzle, chamber) {\n    return <Sequence {...puzzle} chamber={chamber} />;\n}\n\n// Given an array of sequences, draw each graph in the sequence, one after another\nexport function GraphRow({ sequence }, chamber) {\n    // Get size of graphs with 10% for the gap\n    const GAP = sequence.gap || 0.1\n\n    const n = sequence.length;\n    let totalWidth = sum(sequence.map(getGraphBBox), graph => graph.width);\n    const gapSize = GAP * totalWidth / (n - 1);\n\n    if (n > 1) { totalWidth *= (1 + GAP); }\n\n    const scale = Math.min(1, 240 / totalWidth);\n    totalWidth *= scale;\n\n    const graphs = [];\n    let x = -totalWidth / 2;\n\n    sequence.forEach((graph, index) => {\n        const bbox = getGraphBBox(graph);\n        graphs.push(\n            <g key={index} transform={`translate(${x - bbox.x1} 0) scale(${scale})`}>\n                <Graph {...graph} chamber={chamber}/>\n            </g>\n        );\n        x += scale * (gapSize + bbox.width);\n    });\n    \n    return graphs;\n}\n// Given an array of sequences, draw each graph in the sequence, one under another\nexport function GraphColumn({ sequence }, chamber) {\n    // Get size of graphs with 10% for the gap\n    const GAP = 1;\n\n    const n = sequence.length;\n    let totalHeight = sum(sequence.map(getGraphBBox), graph => graph.height);\n\n    const gapSize = GAP * totalHeight / (n + 1);\n    if (n > 1) { totalHeight *= (1 + GAP); }\n    const scale = Math.min(1, 240 / totalHeight);\n    totalHeight *= scale;\n\n    const graphs = [];\n    let y = -totalHeight / 2;\n\n    sequence.forEach((graph, index) => {\n        const bbox = getGraphBBox(graph);\n        graphs.push(\n            <g key={index} transform={`translate(0 ${y - bbox.y1}) scale(${scale})`}>\n                <Graph {...graph} chamber={chamber}/>\n            </g>\n        );\n        y += scale * (gapSize + bbox.height);\n    });\n    \n    return graphs;\n}\n\n// Draw a set of graphs, one below the other\nexport const Sequence2D = (puzzle, chamber) => {\n    const graphs = puzzle.sequences;\n    const size = 1.25 * getSize(Math.max(graphs.length, graphs[0].nodes.length));\n    const startY = -((graphs.length - 1) * size) / 2;\n\n    return graphs.map((graph, index) =>\n        <g key={index} transform={`translate(0 ${startY + index * size})`}>\n            <Graph {...graph} chamber={chamber}/>\n        </g>\n    );\n}\n","/*\n * Given a sequence of objects, continue it or fill in the missing bits.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../PuzzleChamber/PuzzleChamber';\nimport { ColourableSequence, GraphRow } from './PuzzleComponents/Sequence';\nimport { getSequenceObject, getGraphSequence } from './utils/loadPuzzle';\nimport { sequencesMatch } from './utils/evaluate';\nimport { triangleGraph, squareGraph } from './utils/graphUtils';\n\n\n// Sequence of coloured blocks with uncoloured blocks at the end\nconst puzzles1 = [\n    {\n        colourPalette: 1,\n        pattern: [1, 1, 1, 0],\n        answer: [1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 1, 1, 1, 0, 0],\n        answer: [1, 1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 1, 2, 1, 2, 0, 0],\n        answer: [1, 2]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 1, 2, 3, 0, 0, 0],\n        answer: [1, 2, 3]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 1, 2, 2, 1, 1, 0, 0],\n        answer: [2, 2]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 2, 1, 2, 2, 0, 0, 0],\n        answer: [1, 2, 2]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 3, 1, 2, 3, 3, 0, 0, 0, 0],\n        answer: [1, 2, 3, 3]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 0, 0, 0, 0],\n        answer: [1, 2, 1, 1]\n    }\n];\n\n// Sequence of coloured blocks with uncoloured blocks in the middle of the sequence\nconst puzzles2 = [\n    {\n        colourPalette: 1,\n        pattern: [1, 1, 0, 1, 1],\n        answer: [1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 1, 0, 1, 2, 1],\n        answer: [2]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 0, 2, 3],\n        answer: [1]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 1, 2, 2, 1, 0, 0, 2],\n        answer: [1, 2]\n    }, {\n        colourPalette: 2,\n        pattern: [1, 2, 2, 1, 2, 0, 0, 2, 2],\n        answer: [2, 1]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1],\n        answer: [3]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 2, 3, 0, 0, 3, 1, 2, 3, 2, 1],\n        answer: [2, 1]\n    }, {\n        colourPalette: 3,\n        pattern: [1, 1, 0, 0, 0, 1, 2, 3, 1, 1, 2, 3],\n        answer: [2, 3, 1]\n    }\n];\n\n// Sequence of coloured graphs with uncoloured one at the end\nconst t1 = triangleGraph(1);\nconst t2 = triangleGraph(2);\nconst t112 = triangleGraph([1, 1, 2]);\nconst t221 = triangleGraph([2, 2, 1]);\nconst t121 = triangleGraph([1, 2, 1]);\nconst t211 = triangleGraph([2, 1, 1]);\nconst t123 = triangleGraph([1, 2, 3]);\nconst t231 = triangleGraph([2, 3, 1]);\nconst t312 = triangleGraph([3, 1, 2]);\n\nconst s1122 = squareGraph([1, 1, 2, 2]);\nconst s2211 = squareGraph([2, 2, 1, 1]);\nconst s2112 = squareGraph([2, 1, 1, 2]);\nconst s1221 = squareGraph([1, 2, 2, 1]);\nconst s1212 = squareGraph([1, 2, 1, 2]);\nconst s2121 = squareGraph([2, 1, 2, 1]);\n\nconst puzzles3 = [\n    {\n        colourPalette: 1,\n        sequence: [t1, t1, t1, null],\n        answer: [t1]\n    }, {\n        colourPalette: 2,\n        sequence: [t1, t2, t1, t2, null],\n        answer: [t1]\n    }, {\n        colourPalette: 2,\n        sequence: [t112, t221, t112, t221, null],\n        answer: [t112]\n    }, {\n        colourPalette: 2,\n        sequence: [s1122, s2211, s1122, s2211, null],\n        answer: [s1122]\n    }, {\n        colourPalette: 2,\n        sequence: [s1212, s2121, s1212, s2121, s1212, null],\n        answer: [s2121]\n    }, {\n        colourPalette: 2,\n        sequence: [s1122, s1221, s2211, null],\n        answer: [s2112]\n    }, {\n        colourPalette: 2,\n        sequence: [t112, t121, t211, t112, t121, null],\n        answer: [t211]\n    }, {\n        colourPalette: 3,\n        sequence: [t123, t231, t312, t123, null],\n        answer: [t312]\n    }\n];\n\nconst puzzles = [puzzles1, puzzles2, puzzles3];\n\nconst correctSequence = ({ sequence, target }) =>\n    sequencesMatch(sequence, target, 'colour');\n\nconst correctGraphSequence = ({ sequence, target }) =>\n    sequence.every((graph, index) =>\n        sequencesMatch(graph.nodes, target[index].nodes, 'colour')\n    );\n\nexport const Sequences = (n) => {\n    if (n < 2) {\n        return <PuzzlePage\n            puzzles={puzzles[n]}\n            evaluate={correctSequence}\n            getPuzzleObject={getSequenceObject}\n            displayPuzzle={ColourableSequence} />\n    } else {\n        return <PuzzlePage\n            puzzles={puzzles[n]}\n            evaluate={correctGraphSequence}\n            getPuzzleObject={getGraphSequence}\n            displayPuzzle={GraphRow} />\n    }\n}\n","import React from 'react';\n\n\nconst Categorisation1 = () => <g>\n    <g className=\"categories\">\n        <circle className=\"colour-1\" cx=\"-24\" cy=\"0\" r=\"23\" />\n        <circle className=\"colour-2\" cx=\"24\" cy=\"0\" r=\"23\" />\n    </g>\n    <g className=\"graph-edges\">\n        <line x1=\"30\" y1=\"0\" x2=\"18\" y2=\"0\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-24\" cy=\"0\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"32\" cy=\"0\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"16\" cy=\"0\" r=\"4\" />\n    </g>\n</g>\n\nconst Categorisation2 = () => <g>\n    <g className=\"categories\">\n        <circle className=\"colour-1\" cx=\"-24\" cy=\"0\" r=\"23\" />\n        <circle className=\"colour-2\" cx=\"24\" cy=\"0\" r=\"23\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-24\" cy=\"0\" r=\"8\" />\n        <circle className=\"colour-2\" cx=\"24\" cy=\"0\" r=\"8\" />\n    </g>\n</g>\n\nconst Categorisation3 = () => <g>\n    <g className=\"categories\">\n        <circle className=\"colour-1\" cx=\"-20\" cy=\"-20\" r=\"19\" />\n        <circle className=\"colour-2\" cx=\"20\" cy=\"-20\" r=\"19\" />\n        <circle className=\"colour-2\" cx=\"-20\" cy=\"20\" r=\"19\" />\n        <circle className=\"colour-3\" cx=\"20\" cy=\"20\" r=\"19\" />\n    </g>\n    <g className=\"graph-edges\">\n        <line x1=\"-25\" y1=\"-20\" x2=\"-15\" y2=\"-20\" />\n        <line x1=\"25\" y1=\"-20\" x2=\"15\" y2=\"-20\" />\n        <line x1=\"-25\" y1=\"20\" x2=\"-15\" y2=\"20\" />\n        <line x1=\"25\" y1=\"20\" x2=\"15\" y2=\"20\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-28\" cy=\"-20\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"-12\" cy=\"-20\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"28\" cy=\"-20\" r=\"4\" />\n        <circle className=\"colour-2\" cx=\"12\" cy=\"-20\" r=\"4\" />\n        <circle className=\"colour-1\" cx=\"-28\" cy=\"20\" r=\"4\" />\n        <circle className=\"colour-2\" cx=\"-12\" cy=\"20\" r=\"4\" />\n        <circle className=\"colour-2\" cx=\"28\" cy=\"20\" r=\"4\" />\n        <circle className=\"colour-2\" cx=\"12\" cy=\"20\" r=\"4\" />\n    </g>\n</g>\n\nconst Categorisation4 = () => <g>\n    <g transform=\"translate(0 -26)\">\n        <g className=\"categories\">\n            <circle className=\"colour-2\" r=\"22\" />\n        </g>\n        <g className=\"graph-edges\">\n            <line x1=\"0\" y1=\"-12\" x2=\"-11\" y2=\"6\" />\n            <line x1=\"0\" y1=\"-12\" x2=\"11\" y2=\"6\" />\n            <line x1=\"-11\" y1=\"6\" x2=\"11\" y2=\"6\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"0\" cy=\"-12\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"-11\" cy=\"6\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"11\" cy=\"6\" r=\"4\" />\n        </g>\n    </g>\n\n    <g transform=\"translate(-23 13)\">\n        <g className=\"categories\">\n            <circle className=\"colour-1\" r=\"22\" />\n        </g>\n        <g className=\"graph-edges\">\n            <line x1=\"-15\" x2=\"15\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"-15\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"0\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"15\" r=\"4\" />\n        </g>\n    </g>\n\n    <g transform=\"translate(23 13)\">\n        <g className=\"categories\">\n            <circle className=\"colour-1\" r=\"22\" />\n        </g>\n        <g className=\"graph-edges\">\n            <line x1=\"0\" y1=\"-12\" x2=\"-11\" y2=\"6\" />\n            <line x1=\"0\" y1=\"-12\" x2=\"11\" y2=\"6\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"0\" cy=\"-12\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"-11\" cy=\"6\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"11\" cy=\"6\" r=\"4\" />\n        </g>\n    </g>\n</g>\n\nconst Categorisation5 = () => <g>\n    <g transform=\"translate(0 -26)\">\n        <g className=\"categories\">\n            <circle className=\"colour-2\" r=\"22\" />\n        </g>\n        <g className=\"graph-edges\">\n            <line x1=\"0\" y1=\"-12\" x2=\"-11\" y2=\"6\" />\n            <line x1=\"0\" y1=\"-12\" x2=\"11\" y2=\"6\" />\n            <line x1=\"-11\" y1=\"6\" x2=\"11\" y2=\"6\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"0\" cy=\"-12\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"-11\" cy=\"6\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"11\" cy=\"6\" r=\"4\" />\n        </g>\n    </g>\n\n    <g transform=\"translate(-23 13)\">\n        <g className=\"categories\">\n            <circle className=\"colour-1\" r=\"22\" />\n        </g>\n        <g className=\"graph-edges\">\n            <line x1=\"-15\" x2=\"15\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"-15\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"0\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"15\" r=\"4\" />\n        </g>\n    </g>\n\n    <g transform=\"translate(23 13)\">\n        <g className=\"categories\">\n            <circle className=\"colour-2\" r=\"22\" />\n        </g>\n        <g className=\"graph-edges\">\n            <line x1=\"-10\" y1=\"-10\" x2=\"-10\" y2=\"10\" />\n            <line x1=\"-10\" y1=\"-10\" x2=\"10\" y2=\"-10\" />\n            <line x1=\"10\" y1=\"10\" x2=\"-10\" y2=\"10\" />\n            <line x1=\"10\" y1=\"10\" x2=\"10\" y2=\"-10\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"-10\" cy=\"-10\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"-10\" cy=\"10\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"10\" cy=\"-10\" r=\"4\" />\n            <circle className=\"colour-1\" cx=\"10\" cy=\"10\" r=\"4\" />\n        </g>\n    </g>\n</g>\n\nexport default [\n    Categorisation1, \n    Categorisation2,\n    Categorisation3,\n    Categorisation4,\n    Categorisation5,\n];\n","import React from 'react';\n\nimport PuzzlePage from '../PuzzleChamber/PuzzleChamber';\nimport { Graph } from './PuzzleComponents/Graph';\nimport { Categories } from './PuzzleComponents/Categories';\nimport { getCategoryObjects, getGraphObject } from './utils/loadPuzzle';\nimport {\n    linearGraph,\n    loopGraph,\n    starGraph,\n    spokeGraph,\n    sunletGraph,\n    prismGraph,\n    antiPrismGraph,\n    gearGraph,\n} from './utils/graphTypes';\nimport {\n    getPointsOnACircle,\n    getNodesOnCircle,\n    getLineOfEdges,\n    getLoopOfEdges,\n    subdivideGraph,\n}  from './utils/graphUtils';\nimport { extractAttribute, sequencesAreEquivalent } from './utils/evaluate';\n\n\n// Graphs are all the same colour and need to be match by shape\nconst puzzle1 = [\n    {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: { nodes: [[0, 0, 1]] }},\n            { type: 2, item: linearGraph([1, 1]) },\n        ]\n    }, {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, copies: 3, item: linearGraph(3, { colour: 1 }) },\n            { type: 2, copies: 2, item: loopGraph(3, { scale: 0.8, colour: 1 }) }\n        ]\n    }, {\n        colourPalette: 3,\n        randomRotate: true,\n        categories: [\n            { type: 1, copies: 2, item: linearGraph(3, { colour: 1 }) },\n            { type: 2, copies: 2, item: loopGraph(3, { scale: 0.8, colour: 1 }) },\n            { type: 3, copies: 2, item: {\n                nodes: [[0.5, 0.5], [-0.5, 0.5], [0.5, -0.5]],\n                edges: [[0, 1], [0, 2]],\n                colour: 1\n            }}\n        ]\n    }, {\n        colourPalette: 3,\n        randomRotate: true,\n        categories: [\n            { type: 1, copies: 2, item: loopGraph(4, { scale: 0.8, colour: 1 }) },\n            {\n                type: 2,\n                copies: 3,\n                item: {\n                    nodes: getPointsOnACircle(4, { r: 0.8 }),\n                    edges: getLineOfEdges(4),\n                    colour: 1\n                }\n            }, {\n                type: 3,\n                item: {\n                    nodes: getPointsOnACircle(4, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [0, 3]],\n                    colour: 1\n                }\n            },\n        ]\n    }, {\n        colourPalette: 3,\n        randomRotate: true,\n        categories: [\n            {\n                type: 1,\n                copies: 2,\n                item: {\n                    nodes: getPointsOnACircle(4, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [0, 3]],\n                    colour: 1\n                }\n            }, {\n                type: 2,\n                copies: 2,\n                item: {\n                    nodes: getPointsOnACircle(4, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [2, 3]],\n                    colour: 1\n                }\n            }, {\n                type: 3,\n                copies: 2,\n                item: {\n                    nodes: getPointsOnACircle(4, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [0, 3], [2, 3]],\n                    colour: 1\n                }\n            },\n        ]\n    }, {\n        colourPalette: 4,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph(5, { scale: 0.8, colour: 1 }) },\n            {\n                type: 2,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(5, { r: 0.8 }),\n                    edges: getLineOfEdges(5),\n                    colour: 1\n                }\n            }, {\n                type: 3 ,\n                copies: 2,\n                item: {\n                    nodes: getPointsOnACircle(5, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [0, 3], [0, 4]],\n                    colour: 1\n                }\n            }, {\n                type: 4,\n                item: {\n                    nodes: getPointsOnACircle(5, { r: 0.8 }),\n                    edges: [[0, 1], [0, 2], [0, 3], [3, 4]],\n                    colour: 1\n                }\n            }\n        ]\n    }, {\n        colourPalette: 3,\n        randomRotate: true,\n        categories: [\n            {\n                type: 1,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(6, { r: 0.9 }),\n                    edges: ([[0, 1], [1, 2], [2, 5], [4, 5], [3, 4]]),\n                    colour: 1\n                }\n            }, {\n                type: 2,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(6, { r: 0.9 }),\n                    edges: ([[0, 1], [1, 2], [2, 4], [4, 5], [3, 4]]),\n                    colour: 1\n                }\n            }, {\n                type: 3,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(6, { r: 0.9 }),\n                    edges: ([[0, 1], [1, 2], [1, 4], [4, 5], [3, 4]]),\n                    colour: 1\n                }\n            }\n        ]\n    }, {\n        colourPalette: 4,\n        randomRotate: true,\n        categories: [\n            {\n                type: 1,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(6),\n                    edges: getLoopOfEdges(6).concat([[0, 3], [0, 4], [1, 5]]),\n                    colour: 1\n                }\n            }, {\n                type: 2,\n                copies: 2, \n                item: {\n                    nodes: getPointsOnACircle(6),\n                    edges: getLoopOfEdges(6).concat([[0, 3], [0, 4], [1, 4]]),\n                    colour: 1\n                }\n            }, {\n                type: 3,\n                copies: 1, \n                item: {\n                    nodes: getPointsOnACircle(6),\n                    edges: getLoopOfEdges(6).concat([[0, 3], [0, 4], [2, 4]]),\n                    colour: 1\n                }\n            }, {\n                type: 4,\n                copies: 1, \n                item: {\n                    nodes: getPointsOnACircle(6),\n                    edges: getLoopOfEdges(6).concat([[0, 2], [0, 4], [1, 5]]),\n                    colour: 1\n                }\n            }\n        ]\n    }\n]\n\n// Graphs are all the same shape and orientation and need to be matched by colour\nconst puzzle2 = [\n\t{\n        colourPalette: 2,\n        categories: [\n            { type: 1, item: { nodes: [[0, 0, 1]] }},\n            { type: 2, item: { nodes: [[0, 0, 2]] }},\n        ]\n    }, {\n\t\tcolourPalette: 2,\n        categories: [\n            { type: 1, item: linearGraph([1, 1]) },\n            { type: 1, item: linearGraph([1, 1]) },\n            { type: 2, item: linearGraph([2, 2]) },\n            { type: 2, item: linearGraph([2, 2]) },\n        ]\n    }, {\n\t\tcolourPalette: 3,\n        categories: [\n            { type: 1, item: linearGraph([1, 1]) },\n            { type: 2, item: linearGraph([1, 2]) },\n            { type: 2, item: linearGraph([1, 2]) },\n            { type: 3, item: linearGraph([2, 2]) },\n        ]\n    }, {\n        colourPalette: 2,\n        categories: [\n            { type: 1, item: linearGraph([1, 2, 1]) },\n            { type: 1, item: linearGraph([1, 2, 1]) },\n            { type: 2, item: linearGraph([2, 1, 2]) },\n            { type: 2, item: linearGraph([2, 1, 2]) },\n        ]\n    }, {\n        colourPalette: 3,\n        categories: [\n            { type: 1, item: linearGraph([1, 1, 2]) },\n            { type: 1, item: linearGraph([1, 1, 2]) },\n            { type: 2, item: linearGraph([1, 2, 1]) },\n            { type: 3, item: linearGraph([2, 1, 1]) },\n            { type: 3, item: linearGraph([2, 1, 1]) },\n        ]\n    }, {\n        colourPalette: 3,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 2], { scale: 0.75 }) },\n            { type: 1, item: loopGraph([1, 1, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 2, 1], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 2, 1], { scale: 0.75 }) },\n            { type: 3, item: loopGraph([2, 1, 1], { scale: 0.75 }) },\n            { type: 3, item: loopGraph([2, 1, 1], { scale: 0.75 }) },\n        ]\n    }, {\n        colourPalette: 3,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 2, 2], { scale: 0.75 }) },\n            { type: 1, item: loopGraph([1, 1, 2, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 2, 1, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 2, 1, 2], { scale: 0.75 }) },\n            { type: 3, item: loopGraph([2, 1, 2, 1], { scale: 0.75 }) },\n            { type: 3, item: loopGraph([2, 1, 2, 1], { scale: 0.75 }) },\n        ]\n    }, {\n        colourPalette: 4,\n        categories: [\n            { type: 1, item: loopGraph([1, 2, 3, 1, 2, 3], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([3, 2, 1, 3, 2, 1], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([3, 2, 1, 3, 2, 1], { scale: 0.75 }) },\n            { type: 3, item: loopGraph([1, 2, 3, 2, 3, 1], { scale: 0.75 }) },\n            { type: 3, item: loopGraph([1, 2, 3, 2, 3, 1], { scale: 0.75 }) },\n            { type: 4, item: loopGraph([3, 2, 1, 2, 3, 1], { scale: 0.75 }) },\n        ]\n    }\n];\n\n// Graphs are all the same shape but rotated and need to be matched by colour\nconst puzzle3 = [\n    {\n        colourPalette: 3,\n        categories: [\n            { type: 1, item: linearGraph([1, 1]) },\n            { type: 2, item: linearGraph([1, 2]) },\n            { type: 2, item: linearGraph([2, 1]) },\n            { type: 3, item: linearGraph([2, 2]) },\n        ]\n    }, {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: linearGraph([1, 2, 1]) },\n            { type: 1, item: linearGraph([1, 2, 1]) },\n            { type: 1, item: linearGraph([1, 2, 1]) },\n            { type: 2, item: linearGraph([2, 1, 2]) },\n            { type: 2, item: linearGraph([2, 1, 2]) },\n            { type: 2, item: linearGraph([2, 1, 2]) },\n        ]\n    }, {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 2, 2], { scale: 0.75 }) },\n            { type: 1, item: loopGraph([1, 2, 2], { scale: 0.75 }) },\n            { type: 1, item: loopGraph([1, 2, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 1, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 1, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 1, 2], { scale: 0.75 }) },\n        ]\n    }, {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 2, 2], { scale: 0.75 }) },\n            { type: 1, item: loopGraph([1, 1, 2, 2], { scale: 0.75 }) },\n            { type: 1, item: loopGraph([1, 1, 2, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 2, 1, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 2, 1, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 2, 1, 2], { scale: 0.75 }) },\n        ]\n    }, {\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 2, 3], { scale: 0.75 }) },\n            { type: 1, item: loopGraph([1, 2, 3], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 3, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 3, 2], { scale: 0.75 }) },\n        ]\n    }, {\n        colourPalette: 3,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 2, 3], { scale: 0.75 }) },\n            { type: 1, item: loopGraph([1, 1, 2, 3], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 1, 3, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 1, 3, 2], { scale: 0.75 }) },\n            { type: 3, item: loopGraph([1, 2, 1, 3], { scale: 0.75 }) },\n            { type: 3, item: loopGraph([1, 2, 1, 3], { scale: 0.75 }) },\n        ]\n    }, {\n        colourPalette: 4,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 2, 3, 4], { scale: 0.75 }) },\n            { type: 1, item: loopGraph([1, 2, 3, 4], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 4, 3, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 4, 3, 2], { scale: 0.75 }) },\n            { type: 3, item: loopGraph([1, 3, 2, 4], { scale: 0.75 }) },\n            { type: 4, item: loopGraph([1, 2, 4, 3], { scale: 0.75 }) },\n        ]\n    }, {\n        colourPalette: 4,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 2, 3, 1, 2, 3], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 3, 2, 1, 3, 2], { scale: 0.75 }) },\n            { type: 2, item: loopGraph([1, 3, 2, 1, 3, 2], { scale: 0.75 }) },\n            { type: 3, item: loopGraph([1, 2, 3, 2, 3, 1], { scale: 0.75 }) },\n            { type: 4, item: loopGraph([1, 2, 1, 3, 2, 3], { scale: 0.75 }) },\n            { type: 4, item: loopGraph([1, 2, 1, 3, 2, 3], { scale: 0.75 }) },\n        ]\n    }\n];\n\nconst triangleWithCenter = getNodesOnCircle([1, 1, 1], { r: 1.2 }).concat([[0, 0, 1]]);\nconst lowTriangle = [[0, -1, 1], [-1, 0.5, 1], [0, 0.5, 1], [1, 0.5, 1]];\nconst rectangle = [[-0.5, -1.25, 1], [-0.5, 1.25, 1], [0.5, 1.25, 1], [0.5, -1.25, 1]]\n\n// Graphs have the same set of connections, but nodes are moved\nconst puzzle4 = [\n    {\n        // Triangles vs straight lines big and smaller\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: linearGraph(3, { scale: 0.8, colour: 1 }) },\n            { type: 1, item: linearGraph(3, { scale: 1.5, colour: 1 }) },\n            { type: 2, item: loopGraph(3, { scale: 0.7 }) },\n            { type: 2, item: loopGraph(3, { scale: 1.4 }) },\n        ]\n    }, {\n        // Triangles vs straight lines\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: linearGraph([1, 1, 1]) },\n            { type: 2, item: loopGraph([1, 1, 1]) },\n            { type: 1,\n                item: {\n                    nodes: [[0.7, 0.7, 1], [-0.7, 0.7, 1], [-0.7, -0.7, 1]],\n                    edges: getLineOfEdges(3)\n                }\n            },\n            { type: 2,\n                item: {\n                    nodes: [[0.7, 0.7, 1], [-0.7, 0.7, 1], [-0.7, -0.7, 1]],\n                    edges: getLoopOfEdges(3)\n                }\n            }\n        ]\n    }, {\n        // Three node- vs four node-triangles\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 1]) },\n            { type: 1,\n                item: {\n                    nodes: [[0, -0.5], [1.25, 0.5], [-1.25, 0.5]],\n                    edges: getLoopOfEdges(3),\n                    colour: 1\n                }\n            },\n            { type: 2,\n                item: {\n                    nodes: [[0, -0.5], [1.25, 0.5], [0, 0.5], [-1.25, 0.5]],\n                    edges: getLoopOfEdges(4),\n                    colour: 1\n                }\n            },\n            { type: 2,\n                item: {\n                    nodes: getPointsOnACircle(3).concat([[0, 0.5]]),\n                    edges: [[0, 3], [3, 1], [1, 2], [2, 0]],\n                    colour: 1\n                }\n            }\n        ]\n    }, {\n        // Quadrilaterals vs stars\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: loopGraph([1, 1, 1, 1]) },\n            { type: 1,\n                item: {\n                    nodes: lowTriangle,\n                    edges: getLoopOfEdges(4)\n                }\n            }, {\n                type: 2,\n                item: {\n                    nodes: lowTriangle,\n                    edges: [[0, 2], [1, 2], [2, 3]]\n                }\n            }, { type: 2, item: starGraph([1, 1, 1, 1]) }\n        ]\n    }, {\n        // Quadrilaterals vs straight lines\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            { type: 1, item: linearGraph([1, 1, 1, 1]) },\n            { type: 2, item: loopGraph([1, 1, 1, 1]) },\n            {\n                type: 1,\n                item: {\n                    nodes: getNodesOnCircle([1, 1, 1, 1]),\n                    edges: getLineOfEdges(4)\n                }\n            }, {\n                type: 1,\n                item: {\n                    nodes: [[-0.5, -1], [-0.5, 0], [0.5, 0], [0.5, 1]],\n                    edges: getLineOfEdges(4),\n                    colour: 1\n                }\n            }, {\n                type: 2,\n                item: {\n                    nodes: triangleWithCenter,\n                    edges: getLoopOfEdges(4)\n                }\n            }\n        ]\n    }, {\n        // Quadrilaterals vs straight lines with a rectangle\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            {\n                type: 1,\n                item: {\n                    nodes: rectangle,\n                    edges: getLineOfEdges(4)\n                }\n            }, {\n                type: 1,\n                item: {\n                    nodes: rectangle,\n                    edges: [[0, 3], [0, 2], [2, 1]]\n                }\n            }, {\n                type: 1,\n                item: {\n                    nodes: rectangle,\n                    edges: [[1, 2], [2, 3], [3, 0]]\n                }\n            }, {\n                type: 2,\n                item: {\n                    nodes: rectangle,\n                    edges: getLoopOfEdges(4),\n                }\n            }, {\n                type: 2,\n                item: {\n                    nodes: rectangle,\n                    edges: [[0, 2], [2, 1], [1, 3], [3, 0]],\n                }\n            }\n        ]\n    }, {\n        // Stars vs triangles with hanging point\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            {\n                type: 1,\n                item: {\n                    nodes: triangleWithCenter,\n                    edges: [[0, 1], [1, 2], [0, 3], [0, 2]]\n                }\n            }, {\n                type: 2,\n                item: {\n                    nodes: triangleWithCenter,\n                    edges: [[0, 3], [1, 3], [2, 3]]\n                }\n            }, {\n                type: 2,\n                item: {\n                    nodes: lowTriangle,\n                    edges: [[0, 1], [0, 2], [0, 3]]\n                }\n            }, {\n                type: 1,\n                item: {\n                    nodes: lowTriangle,\n                    edges: [[0, 1], [0, 2], [0, 3], [1, 2]]\n                }\n            }, {\n                type: 1,\n                item: {\n                    nodes: lowTriangle,\n                    edges: [[0, 1], [0, 2], [1, 2], [2, 3]]\n                }\n            }\n        ]\n    }, {\n        // Quadrilateral with one diagonal vs two\n        colourPalette: 2,\n        randomRotate: true,\n        categories: [\n            {\n                type: 1,\n                item: {\n                    nodes: getNodesOnCircle(4),\n                    edges: getLoopOfEdges(4).concat([[0, 2], [1, 3]]),\n                    colour: 1\n                }\n            },\n            {\n                type: 1,\n                item: {\n                    nodes: triangleWithCenter,\n                    edges: [[0, 1], [1, 2], [2, 0], [3, 0], [3, 1], [3, 2]]\n                }\n            },\n            {\n                type: 2,\n                item: {\n                    nodes: getNodesOnCircle(4),\n                    edges: getLoopOfEdges(4).concat([[0, 2]]),\n                    colour: 1\n                }\n            },\n            {\n                type: 2,\n                item: {\n                    nodes: triangleWithCenter,\n                    edges: getLoopOfEdges(4).concat([[0, 2]]),\n                    colour: 1\n                }\n            },\n            {\n                type: 2,\n                item: {\n                    nodes: getPointsOnACircle(3).concat([[0, 0.5]]),\n                    edges: [[0, 3], [3, 1], [1, 2], [2, 0], [3, 2]],\n                    colour: 1\n                }\n            }\n        ]\n    }\n];\n\n// Categorising graphs of the same type, e.g. cyclic vs star\nconst puzzle5 = [\n    {\n        // Linear vs cyclic\n        colourPalette: 2,\n        randomRotate: true,\n        itemProps: { colour: 1 },\n        categories: [\n            { type: 1, item: linearGraph(3) },\n            { type: 1, item: linearGraph(4) },\n            { type: 2, item: loopGraph(3) },\n            { type: 2, item: loopGraph(4) },\n            { type: 2, item: loopGraph(5) },\n        ]\n    }, {\n        // Cyclc vs star\n        colourPalette: 2,\n        randomRotate: true,\n        itemProps: { colour: 1, size: 36, r: 7 },\n        categories: [\n            { type: 1, item: starGraph(4) },\n            { type: 1, item: starGraph(5) },\n            { type: 1, item: starGraph(6) },\n            { type: 2, item: loopGraph(3) },\n            { type: 2, item: loopGraph(4) },\n            { type: 2, item: loopGraph(5) },\n        ]\n    }, {\n        // Spoked wheel vs star\n        colourPalette: 2,\n        randomRotate: true,\n        itemProps: { colour: 1, size: 36, r: 7 },\n        categories: [\n            { type: 1, item: starGraph(4) },\n            { type: 1, item: starGraph(5) },\n            { type: 1, item: starGraph(6) },\n            { type: 2, item: spokeGraph(4) },\n            { type: 2, item: spokeGraph(5) },\n            { type: 2, item: spokeGraph(6) },\n        ]\n    }, {\n        // Spoked wheel vs sunlet - remove\n        colourPalette: 2,\n        randomRotate: true,\n        itemProps: { colour: 1, size: 40, r: 5 },\n        categories: [\n            { type: 1, item: spokeGraph(4) },\n            { type: 1, item: spokeGraph(5) },\n            { type: 1, item: spokeGraph(6) },\n            { type: 2, item: sunletGraph(3) },\n            { type: 2, item: sunletGraph(4) },\n            { type: 2, item: sunletGraph(5) },\n        ]\n    }, {\n        // Spokes, sunlet and prism graphs\n        colourPalette: 3,\n        randomRotate: true,\n        itemProps: { colour: 1, size: 45, r: 5.2 },\n        categories: [\n            { type: 1, item: spokeGraph(5) },\n            { type: 1, item: spokeGraph(6) },\n            { type: 2, item: sunletGraph(4) },\n            { type: 2, item: sunletGraph(5) },\n            { type: 3, item: prismGraph(3) },\n            { type: 3, item: prismGraph(4) },\n        ]\n    }, {\n        // Prism vs. anti-prism graphs\n        colourPalette: 2,\n        randomRotate: true,\n        itemProps: { colour: 1, size: 45, r: 5.2 },\n        categories: [\n            { type: 1, item: prismGraph(3) },\n            { type: 1, item: prismGraph(4) },\n            { type: 1, item: prismGraph(5) },\n            { type: 2, item: antiPrismGraph(4) },\n            { type: 2, item: antiPrismGraph(5) },\n            { type: 2, item: antiPrismGraph(6) },\n        ]\n    }, {\n        // Gear graphs vs spoke graphs vs loop graphs\n        colourPalette: 3,\n        randomRotate: true,\n        itemProps: { colour: 1, size: 45, r: 5.2 },\n        categories: [\n            { type: 1, item: subdivideGraph(loopGraph(3)) },\n            { type: 1, item: loopGraph(4) },\n            { type: 2, item: gearGraph(3) },\n            { type: 2, item: gearGraph(4) },\n            { type: 3, item: spokeGraph(4) },\n            { type: 3, item: spokeGraph(5) },\n        ]\n    }\n];\n\n// Sun graphs, complete graphs\n// Crossed prism vs Franklin graph\n// Pan graph, barbell graph, web graph\n\nconst puzzles = [puzzle1, puzzle2, puzzle3, puzzle4, puzzle5];\n\nconst displayCategories = (categories, chamber) => {\n    categories.forEach(item => {\n        item.component = <Graph {...getGraphObject(item.object)} chamber={chamber} />\n    });\n\n    return <Categories size=\"128\" categories={categories} chamber={chamber} />\n};\n\nconst evaluate = puzzle => {\n    return sequencesAreEquivalent(\n        extractAttribute(puzzle, 'category'),\n        extractAttribute(puzzle, 'colour')\n    );\n}\n\nexport const Categorisation = (n) =>\n    <PuzzlePage\n        puzzles={puzzles[n]}\n        evaluate={evaluate}\n        getPuzzleObject={getCategoryObjects}\n        displayPuzzle={displayCategories} />\n","import React from 'react';\n\n\nconst PermuteSequence = () => (\n    <g>\n        <g className=\"graph-edges\">\n            <line x1=\"-20\" y1=\"-20\" x2=\"20\" y2=\"-20\" />\n            <line x1=\"-20\" y1=\"0\" x2=\"20\" y2=\"0\" />\n            <line x1=\"-20\" y1=\"20\" x2=\"20\" y2=\"20\" />\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"-20\" cy=\"-20\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"0\" cy=\"-20\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"20\" cy=\"-20\" r=\"6\" />\n\n            <circle className=\"colour-2\" cx=\"-20\" cy=\"0\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"0\" cy=\"0\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"20\" cy=\"0\" r=\"6\" />\n\n            <circle className=\"colour-2\" cx=\"-20\" cy=\"20\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"0\" cy=\"20\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"20\" cy=\"20\" r=\"6\" />\n        </g>\n    </g>\n);\n\nconst Permutations = () => (\n    <g>\n        <g className=\"graph-edges\">\n            <path d=\"M-10 -30h20\"/>\n            <path d=\"M-10 -10h20\"/>\n            <path d=\"M-10 10h20\"/>\n            <path d=\"M-10 30h20\"/>\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"-10\" cy=\"-30\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"10\" cy=\"-30\" r=\"6\" />\n\n            <circle className=\"colour-1\" cx=\"-10\" cy=\"-10\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"10\" cy=\"-10\" r=\"6\" />\n\n            <circle className=\"colour-2\" cx=\"-10\" cy=\"10\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"10\" cy=\"10\" r=\"6\" />\n\n            <circle className=\"colour-2\" cx=\"-10\" cy=\"30\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"10\" cy=\"30\" r=\"6\" />\n        </g>\n    </g>\n);\n\nconst Combinations = () => (\n    <g>\n        <g className=\"graph-edges\">\n            <path d=\"M-10 -20h20\"/>\n            <path d=\"M-10 0h20\"/>\n            <path d=\"M-10 20h20\"/>\n        </g>\n        <g className=\"graph-nodes\">\n            <circle className=\"colour-1\" cx=\"-10\" cy=\"-20\" r=\"6\" />\n            <circle className=\"colour-1\" cx=\"10\" cy=\"-20\" r=\"6\" />\n\n            <circle className=\"colour-1\" cx=\"-10\" cy=\"0\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"10\" cy=\"0\" r=\"6\" />\n\n            <circle className=\"colour-2\" cx=\"-10\" cy=\"20\" r=\"6\" />\n            <circle className=\"colour-2\" cx=\"10\" cy=\"20\" r=\"6\" />\n        </g>\n    </g>\n);\n\nconst Derrangements = () => (\n    <g>\n        <g className=\"graph-edges\">\n            <line x1=\"-12\" y1=\"8\" x2=\"0\" y2=\"-12\" />\n            <line x1=\"-12\" y1=\"8\" x2=\"12\" y2=\"8\" />\n            <line x1=\"0\" y1=\"-12\" x2=\"12\" y2=\"8\" />\n            <line x1=\"0\" y1=\"-32\" x2=\"0\" y2=\"-12\" />\n            <line x1=\"-12\" y1=\"8\" x2=\"-30\" y2=\"20\" />\n            <line x1=\"12\" y1=\"8\" x2=\"30\" y2=\"20\" />\n    </g>\n    <g className=\"graph-nodes\">\n        <circle className=\"colour-1\" cx=\"-12\" cy=\"8\" r=\"6\" />\n        <circle className=\"colour-2\" cx=\"0\" cy=\"-12\" r=\"6\" />\n        <circle className=\"colour-3\" cx=\"12\" cy=\"8\" r=\"6\" />\n\n        <circle className=\"colour-2\" cx=\"-30\" cy=\"20\" r=\"6\" />\n        <circle className=\"colour-3\" cx=\"0\" cy=\"-32\" r=\"6\" />\n        <circle className=\"colour-1\" cx=\"30\" cy=\"20\" r=\"6\" />\n    </g>\n</g>\n);\n\nconst Combinatorics2 = () => (\n    <g>\n        <g transform=\"translate(0, -24)\">\n            <line className=\"graph-edges\" x1=\"-20\" x2=\"20\" />\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-1\" cx=\"-20\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"0\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"20\" r=\"6\" />\n            </g>\n        </g>\n        <g transform=\"translate(0, -8)\">\n            <line className=\"graph-edges\" x1=\"-20\" x2=\"20\" />\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-2\" cx=\"-20\" r=\"6\" />\n                <circle className=\"colour-1\" cx=\"0\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"20\" r=\"6\" />\n            </g>\n        </g>\n        <g transform=\"translate(0, 8)\">\n            <line className=\"graph-edges\" x1=\"-20\" x2=\"20\" />\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-2\" cx=\"-20\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"0\" r=\"6\" />\n                <circle className=\"colour-1\" cx=\"20\" r=\"6\" />\n            </g>\n        </g>\n        <g transform=\"translate(0, 24)\">\n            <line className=\"graph-edges\" x1=\"-20\" x2=\"20\" />\n            <g className=\"graph-nodes\">\n                <circle className=\"colour-1\" cx=\"-20\" r=\"6\" />\n                <circle className=\"colour-2\" cx=\"0\" r=\"6\" />\n                <circle className=\"colour-1\" cx=\"20\" r=\"6\" />\n            </g>\n        </g>\n    </g>\n);\n\n\nexport default [\n    PermuteSequence,\n    Permutations,\n    Combinations,\n    Derrangements,\n    Combinatorics2,\n];\n","/*\n * Colour regions on a map such that no two touching regions have the same colour.\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { GraphRow, GraphColumn } from '../PuzzleComponents/Sequence';\nimport { getGraphSet } from '../utils/loadPuzzle';\nimport { sequenceSetMatches } from '../utils/evaluate';\nimport {\n    getArrayOfN,\n    getPermutations,\n    getPermutationsWithReplacement\n} from '../../utils/common';\n\n\n// Given a set of rows of linear graphs\n// Colour them so you have all permutations of colours with a fixed number of colours.\n// e.g. (1, 2, 2) => (1, 2, 2), (2, 1, 2), (2, 2, 1)\nconst puzzles1 = {\n    solution: puzzle => getPermutations(puzzle.graphs[0]),\n    puzzles: [{\n        colourPalette: 2,\n        graphs: [[1, 2], [2, 0]],\n    }, {\n        colourPalette: 2,\n        graphs: [[1, 2, 2], [2, 1, 2], [2, 2, 0]],\n    }, {\n        colourPalette: 2,\n        graphs: [[2, 2, 1], [1, 2, 2], [0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        graphs: [[2, 1, 2], [0, 0, 0], [0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        graphs: [[1, 2, 2, 2], [2, 1, 2, 2], [0, 0, 0, 0], [0, 0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        graphs: [[1, 1, 2, 2], [1, 2, 1, 2], [1, 2, 2, 1], [2, 1, 1, 2], [2, 1, 2, 1], [2, 0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        graphs: [[1, 1, 2, 2], [1, 0, 0, 0], [1, 0, 0, 0], [2, 0, 0, 0], [2, 0, 0, 0], [2, 0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        graphs: [[1, 1, 2, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],\n    }]\n};\n\n// Given a set of rows of linear graphs\n// Colour them so you have all permutations of colours (with replacement).\n// e.g. (1, 2) => (1, 1), (1, 2), (2, 1), (2, 2)\nconst puzzles2 = {\n    solution: puzzle =>\n        getPermutationsWithReplacement(getArrayOfN(puzzle.colourPalette), puzzle.graphs[0].length),\n    puzzles: [{\n        colourPalette: 2,\n        graphs: [[1, 1], [1, 2], [2, 1], [2, 0]],\n    }]\n};\n\n// Permutations of colours on looped graphs, so rotations count as the same thing.\n// e.g. [1,2,1]\nconst puzzles3 = [\n    {\n        colourPalette: 2,\n        loop: true,\n        graphs: [[1, 1, 1], [1, 1, 2], [1, 2, 2], [0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        loop: true,\n        graphs: [[1, 1, 2, 2], [2, 1, 2, 0]],\n    }\n];\n\nconst puzzles = [puzzles1, puzzles2, puzzles3];\n\n// Return the set of all permutation of colours based on the first pattern in the pattern array\nconst getSolutionSet = (getSolutions) => \n    (puzzle) => {\n        const solutions = getSolutions(puzzle);\n        return new Set(solutions.map(sequence => sequence.join('-')))\n    };\n\n// Display linear graphs one under another, and loop graphs in a row\nfunction displayGraphSequence({ sequence, loop }, chamber) {\n    if (loop) {\n        return GraphRow({ sequence }, chamber);\n    } else {\n        return GraphColumn({ sequence }, chamber);\n    }\n}\n\n// TODO: Evaluation for permutations with replacement on loops\n\nexport const PermutationPuzzles = (n) => {\n    const puzzle = puzzles[n];\n    const solutionSet = getSolutionSet(puzzle.solution);\n    return (\n        <PuzzlePage\n            puzzles={puzzle.puzzles}\n            evaluate={sequenceSetMatches}\n            getPuzzleObject={getGraphSet}\n            getSolutionObject={solutionSet}\n            displayPuzzle={displayGraphSequence} />\n    );\n}\n","/*\n * Find all the combinations for colouring a linear graph\n */\n\nimport React from 'react';\n\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\nimport { getGraphSet } from '../utils/loadPuzzle';\nimport { setOfSetsEqual } from '../utils/evaluate';\nimport { GraphColumn } from '../PuzzleComponents/Sequence';\nimport { getCombinationsWithReplacement, getArrayOfN } from '../../utils/common';\n\n\n// Given a set of rows of linear graphs\n// Colour them so you have all combinations of colours\nconst puzzles1 = [\n    {\n        colourPalette: 2,\n        items: [1, 2],\n        graphs: [[1, 1], [1, 2], [2, 0]],\n    }, {\n        colourPalette: 2,\n        items: [1, 2],\n        graphs: [[1, 1, 1], [2, 2, 2], [1, 1, 2], [0, 0, 0]],\n    }, {\n        colourPalette: 2,\n        items: [1, 2],\n        graphs: [[1, 1, 1, 1], [1, 1, 1, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],\n    }, {\n        colourPalette: 3,\n        items: [1, 2, 3],\n        graphs: [[1, 1], [2, 2], [3, 3], [1, 2], [0, 0], [0, 0]],\n    }\n];\n\nconst puzzles = [puzzles1];\n\n// Check the the given set of sequences matches a set of sequences.\nconst getSolutionSet = ({ colourPalette, graphs }) => {\n    const combinationLength = graphs[0].length;\n\n    // Find all combinations using this colour palette\n    const colours = getArrayOfN(colourPalette);\n    const combinations = getCombinationsWithReplacement(colours, combinationLength);\n    const combinationSet = new Set(combinations.map(combination => combination.sort().join('-')));\n    \n    return combinationSet\n};\n\nexport const CombinationPuzzles = (n) => {\n    const puzzle = puzzles[n];\n    return (\n        <PuzzlePage\n            puzzles={puzzle}\n            evaluate={setOfSetsEqual}\n            getPuzzleObject={getGraphSet}\n            getSolutionObject={getSolutionSet}\n            displayPuzzle={GraphColumn} />\n    );\n}\n","// Derrangements - permutate the colours on a graph so that each node has a different colour from before\nimport React from 'react';\n\nimport { getRepeatArray, nTimes } from '../../utils/common';\nimport { sunletGraph } from '../utils/graphTypes';\nimport { getGraphObject } from '../utils/loadPuzzle';\nimport { graphIsChromatic, allGraphsInSequenceAreDifferent } from '../utils/evaluate';\nimport { GraphRow } from '../PuzzleComponents/Sequence';\nimport PuzzlePage from '../../PuzzleChamber/PuzzleChamber';\n\n\n// TODO: Show graphs one by one\n\nconst puzzle1 = [{\n    colourPalette: [1, 1],\n    pattern: [1, 2],\n    nGraphs: 1,\n}, {\n    colourPalette: [1, 1, 1],\n    pattern: [1, 2, 3],\n    nGraphs: 1,\n}, {\n    colourPalette: [2, 2, 2],\n    pattern: [1, 2, 3],\n    nGraphs: 2,\n}, {\n    colourPalette: [2, 2],\n    pattern: [1, 2, 1, 2],\n    nGraphs: 1,\n}, {\n    colourPalette: [4, 2, 2],\n    pattern: [1, 2, 1, 3],\n    nGraphs: 2,\n}]\n\nconst puzzles = [puzzle1];\n\nfunction getGraphSet({ nGraphs, pattern }) {\n    const allNodes = getRepeatArray(0, pattern.length).concat(pattern);\n    const sequence = nTimes(nGraphs, () => {\n        return getGraphObject(sunletGraph(allNodes, { scale: 1.4 }))\n    });\n    sequence.gap = 0.2;\n    return { sequence };\n}\n\nconst allGraphsAreChromatic = ({ sequence }) =>\n    allGraphsInSequenceAreDifferent(sequence) &&\n    sequence.every(graphIsChromatic);\n\nexport const DerrangementPuzzles = (n) => {\n    return (\n        <PuzzlePage\n            puzzles={puzzles[n]}\n            evaluate={allGraphsAreChromatic}\n            getPuzzleObject={getGraphSet}\n            displayPuzzle={GraphRow} />\n    );\n}","// Create an array of object, where every item is a puzzle\n// Puzzle objects have a component, an icon, a position on the map and a URL slug\n\nimport ColourGraphIcons from './PuzzleMap/Icons/ColourGraphs';\nimport { ColourGraph } from './Puzzles//GraphTheory/ColourGraphs';\n\nimport GraphTheoryIcons from './PuzzleMap/Icons/GraphTheory';\nimport EulerPath from './Puzzles/GraphTheory/EulerPath';\nimport MinimumCut from './Puzzles/GraphTheory/MinimumCut';\nimport DominatingSet from './Puzzles/GraphTheory/DominatingSet';\nimport HamiltonianPath from './Puzzles/GraphTheory/HamiltonianPath';\n\nimport GridPath from './Puzzles/GridPaths/GridPaths';\nimport CategoriseGrids from './Puzzles/GridPaths/CategoriseGrids';\nimport GridPathIcons from './PuzzleMap/Icons/GridPaths';\n\nimport ColourMapIcons from './PuzzleMap/Icons/ColourMaps';\nimport { ColourMap } from './Puzzles/ColourMaps';\n\nimport TransformationIcons from './PuzzleMap/Icons/Transformations';\nimport { Transformations } from './Puzzles/Transformations';\n\nimport SequencesIcons from './PuzzleMap/Icons/Sequences';\nimport { Sequences } from './Puzzles/Sequences';\n\nimport CategorisationIcons from './PuzzleMap/Icons/Categorisation';\nimport { Categorisation } from './Puzzles/Categorisation';\n\nimport PermutationIcons from './PuzzleMap/Icons/Combinatorics';\nimport { PermutationPuzzles } from './Puzzles/Combinatorics/Permutations';\nimport { CombinationPuzzles } from './Puzzles/Combinatorics/Combinations';\nimport { DerrangementPuzzles } from './Puzzles/Combinatorics/Derrangements';\n\n\n// Mapping puzzle names to URLS, icons and components\nexport const puzzleData = {\n    'categorisation-0': {\n        slug: 'categorisation-0',\n        icon: CategorisationIcons[0](),\n        component: () => Categorisation(0),\n    },\n    'categorisation-1': {\n        slug: 'categorisation-1',\n        icon: CategorisationIcons[1](),\n        component: () => Categorisation(1),\n    },\n    'categorisation-2': {\n        slug: 'categorisation-2',\n        icon: CategorisationIcons[2](),\n        component: () => Categorisation(2),\n    },\n    'categorisation-3': {\n        slug: 'categorisation-3',\n        icon: CategorisationIcons[3](),\n        component: () => Categorisation(3),\n    },\n    'categorisation-4': {\n        slug: 'categorisation-4',\n        icon: CategorisationIcons[4](),\n        component: () => Categorisation(4),\n    },\n    'graph-theory-0': {\n        slug: 'hamiltonian-path',\n        icon: GraphTheoryIcons.HamiltonianPath(),\n        component: HamiltonianPath, \n    },\n    'graph-theory-1': {\n        slug: 'minimun-dominating-set',\n        icon: GraphTheoryIcons.DominatingSet(),\n        component: DominatingSet, \n    },\n    'graph-theory-2': {\n        slug: 'minimum-cut',\n        icon: GraphTheoryIcons.MinimumCut(),\n        component: MinimumCut, \n    },\n    'graph-theory-3': {\n        slug: 'euler-path',\n        icon: GraphTheoryIcons.EulerPath(),\n        component: () => EulerPath(0), \n    },\n    'permutations-0': {\n        slug: 'permutations-0',\n        icon: PermutationIcons[0](),\n        component: () => PermutationPuzzles(0),\n    },\n    'permutations-1': {\n        slug: 'permutations-1',\n        icon: PermutationIcons[1](),\n        component: () => PermutationPuzzles(1),\n    },\n    'combinations-0': {\n        slug: 'combinations-0',\n        icon: PermutationIcons[2](),\n        component: () => CombinationPuzzles(0), \n    },\n    'derrangements-0': {\n        slug: 'derrangements-0',\n        icon: PermutationIcons[3](),\n        component: () => DerrangementPuzzles(0),\n    },\n    'graph-path-2': {\n        slug: 'graph-path-2',\n        icon: GridPathIcons[2](),\n        component: () => CategoriseGrids(0),\n    },\n};\n\naddData('graph-path', 'graph-path', GridPathIcons, GridPath, 2);\naddData('colour-graphs', 'colour-graphs', ColourGraphIcons, ColourGraph, 3);\naddData('colour-maps', 'colour-maps', ColourMapIcons, ColourMap, 2);\naddData('transformations', 'transformations', TransformationIcons, Transformations, 4);\naddData('sequences', 'sequences', SequencesIcons, Sequences, 3);\n\nfunction addData(name, slug, icons, components, n) {\n    for (let i = 0; i < n; i++) {\n        puzzleData[`${ name }-${ i }`] = {\n            slug: `${ slug }-${ i }`,\n            icon: icons[i](),\n            component: () => components(i)\n        }\n    }\n}\n\nfunction getData(name, n) {\n    return Array\n        .from({ length: n })\n        .map((_, index) => puzzleData[`${ name }-${ index }`]);\n}\n\n// Puzzle data grouped into categories\nexport const puzzleLayout = [\n    getData('sequences', 3),\n    getData('permutations', 2)\n        .concat(getData('combinations', 1))\n        .concat(getData('derrangements', 1)),\n    getData('categorisation', 5),\n    getData('transformations', 4),\n    getData('colour-graphs', 3),\n    getData('colour-maps', 2),\n    getData('graph-theory', 4),\n    getData('graph-path', 3),\n];\n","import React from 'react';\nimport './icons.css';\n\nexport default (props) =>\n    <svg viewBox=\"-55 -55 110 110\">\n        <defs>\n            <filter id=\"glow-spotlight\" x=\"-200%\" y=\"-200%\" width=\"400%\" height=\"400%\">\n                <feGaussianBlur stdDeviation=\"2\" result=\"colouredBlur\" />\n                <feMerge>\n                    <feMergeNode in=\"coloredBlur\"/>\n                    <feMergeNode in=\"SourceGraphic\"/>\n                </feMerge>\n            </filter>\n        </defs>\n        <circle className=\"spotlight\" cx=\"0\" cy=\"0\" r=\"49\" />\n        <circle className=\"spotlight-outline\" cx=\"0\" cy=\"0\" r=\"49\" />\n        { props.children }\n    </svg>\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nimport { puzzleLayout } from '../AppData';\nimport Icon from './Icons/Icon';\nimport './puzzleMap.css';\n\n\nexport default () =>\n    <main className=\"front-page\">\n        <nav className=\"puzzle-map\">\n            {\n                puzzleLayout.map((section, i) =>\n                    <div className=\"puzzle-section\" key={i}>{\n                        section.map(\n                            ({ slug, icon }) => <Link className=\"map-link\" key={slug} to={slug}>\n                                <Icon>{ icon }</Icon>\n                            </Link>\n                        )\n                    }</div>\n                )\n            }\n        </nav>\n    </main>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { puzzleData } from './AppData';\nimport PuzzleMap from './PuzzleMap/PuzzleMap';\n\nimport './base.css';\n\n\nexport default () =>\n    <Router>\n        <Switch>\n            {\n                Object.values(puzzleData).map(({ slug, component }) =>\n                    <Route key={slug} path={`/${ slug }`} component={component} />\n                )\n            }\n            <Route path=\"/\" component={PuzzleMap} />\n        </Switch>\n    </Router>\n"],"sourceRoot":""}